using Code2Xml.Core.Antlr;
using System;
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 JavaScript.g 2012-01-29 22:14:17

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;


using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
[System.CLSCompliant(false)]
public partial class JavaScriptParser : Antlr.Runtime.Parser, IAntlrParser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "CharacterEscapeSequence", "Comment", "ContinuousLineCharacter", "DecimalDigit", "DecimalLiteral", "DoubleStringCharacter", "EscapeCharacter", "EscapeSequence", "ExponentPart", "FALSE", "HexDigit", "HexEscapeSequence", "HexIntegerLiteral", "Identifier", "IdentifierPart", "IdentifierStart", "LT", "LineComment", "NULL", "NonEscapeCharacter", "NumericLiteral", "RBRACE", "RBRACK", "RPAREN", "RegularExpressionChar", "RegularExpressionFirstChar", "RegularExpressionInnerChar", "RegularExpressionLiteral", "SingleEscapeCharacter", "SingleStringCharacter", "StringLiteral", "THIS", "TRUE", "UnicodeCombiningMark", "UnicodeConnectorPunctuation", "UnicodeDigit", "UnicodeEscapeSequence", "UnicodeLetter", "WhiteSpace", "'!'", "'!='", "'!=='", "'%'", "'%='", "'&&'", "'&'", "'&='", "'('", "'*'", "'*='", "'+'", "'++'", "'+='", "','", "'-'", "'--'", "'-='", "'.'", "'/'", "'/='", "':'", "';'", "'<'", "'<<'", "'<<='", "'<='", "'='", "'=='", "'==='", "'>'", "'>='", "'>>'", "'>>='", "'>>>'", "'>>>='", "'?'", "'['", "'^'", "'^='", "'break'", "'case'", "'catch'", "'continue'", "'default'", "'delete'", "'do'", "'else'", "'finally'", "'for'", "'function'", "'if'", "'in'", "'instanceof'", "'new'", "'return'", "'switch'", "'throw'", "'try'", "'typeof'", "'var'", "'void'", "'while'", "'with'", "'{'", "'|'", "'|='", "'||'", "'~'"
	};
	public const int EOF=-1;
	public const int T__43=43;
	public const int T__44=44;
	public const int T__45=45;
	public const int T__46=46;
	public const int T__47=47;
	public const int T__48=48;
	public const int T__49=49;
	public const int T__50=50;
	public const int T__51=51;
	public const int T__52=52;
	public const int T__53=53;
	public const int T__54=54;
	public const int T__55=55;
	public const int T__56=56;
	public const int T__57=57;
	public const int T__58=58;
	public const int T__59=59;
	public const int T__60=60;
	public const int T__61=61;
	public const int T__62=62;
	public const int T__63=63;
	public const int T__64=64;
	public const int T__65=65;
	public const int T__66=66;
	public const int T__67=67;
	public const int T__68=68;
	public const int T__69=69;
	public const int T__70=70;
	public const int T__71=71;
	public const int T__72=72;
	public const int T__73=73;
	public const int T__74=74;
	public const int T__75=75;
	public const int T__76=76;
	public const int T__77=77;
	public const int T__78=78;
	public const int T__79=79;
	public const int T__80=80;
	public const int T__81=81;
	public const int T__82=82;
	public const int T__83=83;
	public const int T__84=84;
	public const int T__85=85;
	public const int T__86=86;
	public const int T__87=87;
	public const int T__88=88;
	public const int T__89=89;
	public const int T__90=90;
	public const int T__91=91;
	public const int T__92=92;
	public const int T__93=93;
	public const int T__94=94;
	public const int T__95=95;
	public const int T__96=96;
	public const int T__97=97;
	public const int T__98=98;
	public const int T__99=99;
	public const int T__100=100;
	public const int T__101=101;
	public const int T__102=102;
	public const int T__103=103;
	public const int T__104=104;
	public const int T__105=105;
	public const int T__106=106;
	public const int T__107=107;
	public const int T__108=108;
	public const int T__109=109;
	public const int T__110=110;
	public const int T__111=111;
	public const int CharacterEscapeSequence=4;
	public const int Comment=5;
	public const int ContinuousLineCharacter=6;
	public const int DecimalDigit=7;
	public const int DecimalLiteral=8;
	public const int DoubleStringCharacter=9;
	public const int EscapeCharacter=10;
	public const int EscapeSequence=11;
	public const int ExponentPart=12;
	public const int FALSE=13;
	public const int HexDigit=14;
	public const int HexEscapeSequence=15;
	public const int HexIntegerLiteral=16;
	public const int Identifier=17;
	public const int IdentifierPart=18;
	public const int IdentifierStart=19;
	public const int LT=20;
	public const int LineComment=21;
	public const int NULL=22;
	public const int NonEscapeCharacter=23;
	public const int NumericLiteral=24;
	public const int RBRACE=25;
	public const int RBRACK=26;
	public const int RPAREN=27;
	public const int RegularExpressionChar=28;
	public const int RegularExpressionFirstChar=29;
	public const int RegularExpressionInnerChar=30;
	public const int RegularExpressionLiteral=31;
	public const int SingleEscapeCharacter=32;
	public const int SingleStringCharacter=33;
	public const int StringLiteral=34;
	public const int THIS=35;
	public const int TRUE=36;
	public const int UnicodeCombiningMark=37;
	public const int UnicodeConnectorPunctuation=38;
	public const int UnicodeDigit=39;
	public const int UnicodeEscapeSequence=40;
	public const int UnicodeLetter=41;
	public const int WhiteSpace=42;

	public JavaScriptParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public JavaScriptParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		this.state.ruleMemo = new System.Collections.Generic.Dictionary<int, int>[386+1];


		XmlTreeAdaptor treeAdaptor = default(XmlTreeAdaptor);
		CreateTreeAdaptor(ref treeAdaptor);
		TreeAdaptor = treeAdaptor ?? new XmlTreeAdaptor();
		OnCreated();
	}
	// Implement this function in your helper file to use a custom tree adaptor
	partial void CreateTreeAdaptor(ref XmlTreeAdaptor adaptor);

	private XmlTreeAdaptor adaptor;

	public XmlTreeAdaptor TreeAdaptor
	{
		get
		{
			return adaptor;
		}

		set
		{
			this.adaptor = value;
		}
	}

	public override string[] TokenNames { get { return JavaScriptParser.tokenNames; } }
	public override string GrammarFileName { get { return "JavaScript.g"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	partial void EnterRule_statementEnd();
	partial void LeaveRule_statementEnd();

	// $ANTLR start "statementEnd"
	// JavaScript.g:30:1: statementEnd : ( ';' | LT | Comment | LineComment | EOF !|{...}?);
	[GrammarRule("statementEnd")]
	public XAstParserRuleReturnScope statementEnd()
	{
		EnterRule_statementEnd();
		EnterRule("statementEnd", 1);
		var retval = new XAstParserRuleReturnScope("statementEnd");
		retval.Start = (IToken)input.LT(1);
		int statementEnd_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal1 = default(IToken);
		IToken LT2 = default(IToken);
		IToken Comment3 = default(IToken);
		IToken LineComment4 = default(IToken);
		IToken EOF5 = default(IToken);

		object char_literal1_tree = default(object);
		object LT2_tree = default(object);
		object Comment3_tree = default(object);
		object LineComment4_tree = default(object);
		object EOF5_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "statementEnd");
		DebugLocation(30, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 1)) { return retval; }

			// JavaScript.g:31:5: ( ';' | LT | Comment | LineComment | EOF !|{...}?)
			int alt1=6;
			try { DebugEnterDecision(1, false);
			switch (input.LA(1))
			{
			case 65:
				{
				int LA1_1 = input.LA(2);

				if ((EvaluatePredicate(synpred1_JavaScript_fragment)))
				{
					alt1 = 1;
				}
				else if ((( input.LA(-1) == RBRACE || input.LA(1) == RBRACE )))
				{
					alt1 = 6;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 1, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case LT:
				{
				int LA1_2 = input.LA(2);

				if ((EvaluatePredicate(synpred2_JavaScript_fragment)))
				{
					alt1 = 2;
				}
				else if ((( input.LA(-1) == RBRACE || input.LA(1) == RBRACE )))
				{
					alt1 = 6;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 1, 2, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Comment:
				{
				alt1 = 3;
				}
				break;
			case LineComment:
				{
				alt1 = 4;
				}
				break;
			case EOF:
				{
				int LA1_5 = input.LA(2);

				if ((LA1_5==FALSE||LA1_5==Identifier||LA1_5==LT||LA1_5==NULL||(LA1_5>=NumericLiteral && LA1_5<=RBRACE)||LA1_5==RegularExpressionLiteral||(LA1_5>=StringLiteral && LA1_5<=TRUE)||LA1_5==43||LA1_5==51||(LA1_5>=54 && LA1_5<=55)||(LA1_5>=58 && LA1_5<=59)||LA1_5==65||LA1_5==80||(LA1_5>=83 && LA1_5<=84)||(LA1_5>=86 && LA1_5<=90)||(LA1_5>=92 && LA1_5<=94)||(LA1_5>=97 && LA1_5<=107)||LA1_5==111))
				{
					alt1 = 5;
				}
				else if ((LA1_5==EOF))
				{
					int LA1_10 = input.LA(3);

					if ((LA1_10==EOF))
					{
						alt1 = 5;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 1, 10, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 1, 5, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case FALSE:
			case Identifier:
			case NULL:
			case NumericLiteral:
			case RBRACE:
			case RegularExpressionLiteral:
			case StringLiteral:
			case THIS:
			case TRUE:
			case 43:
			case 51:
			case 54:
			case 55:
			case 58:
			case 59:
			case 80:
			case 83:
			case 84:
			case 86:
			case 87:
			case 88:
			case 89:
			case 90:
			case 92:
			case 93:
			case 94:
			case 97:
			case 98:
			case 99:
			case 100:
			case 101:
			case 102:
			case 103:
			case 104:
			case 105:
			case 106:
			case 107:
			case 111:
				{
				alt1 = 6;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 1, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(1); }
			switch (alt1)
			{
			case 1:
				DebugEnterAlt(1);
				// JavaScript.g:31:7: ';'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(31, 7);
				char_literal1=(IToken)Match(input,65,Follow._65_in_statementEnd158); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal1_tree = (object)adaptor.Create(char_literal1, retval);
				adaptor.AddChild(root_0, char_literal1_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// JavaScript.g:32:7: LT
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(32, 7);
				LT2=(IToken)new XToken((IToken)Match(input,LT,Follow._LT_in_statementEnd166), "LT"); if (state.failed) return retval;
				if (state.backtracking == 0) {
				LT2_tree = (object)adaptor.Create(LT2, retval);
				adaptor.AddChild(root_0, LT2_tree);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// JavaScript.g:33:7: Comment
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(33, 7);
				Comment3=(IToken)new XToken((IToken)Match(input,Comment,Follow._Comment_in_statementEnd174), "Comment"); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Comment3_tree = (object)adaptor.Create(Comment3, retval);
				adaptor.AddChild(root_0, Comment3_tree);
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// JavaScript.g:34:7: LineComment
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(34, 7);
				LineComment4=(IToken)new XToken((IToken)Match(input,LineComment,Follow._LineComment_in_statementEnd182), "LineComment"); if (state.failed) return retval;
				if (state.backtracking == 0) {
				LineComment4_tree = (object)adaptor.Create(LineComment4, retval);
				adaptor.AddChild(root_0, LineComment4_tree);
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// JavaScript.g:35:7: EOF !
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(35, 10);
				EOF5=(IToken)new XToken((IToken)Match(input,EOF,Follow._EOF_in_statementEnd190), "EOF"); if (state.failed) return retval;

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// JavaScript.g:36:7: {...}?
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(36, 7);
				if (!(( input.LA(-1) == RBRACE || input.LA(1) == RBRACE )))
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					throw new FailedPredicateException(input, "statementEnd", " input.LA(-1) == RBRACE || input.LA(1) == RBRACE ");
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("statementEnd", 1);
			LeaveRule("statementEnd", 1);
			LeaveRule_statementEnd();
			if (state.backtracking > 0) { Memoize(input, 1, statementEnd_StartIndex); }

		}
		DebugLocation(37, 4);
		} finally { DebugExitRule(GrammarFileName, "statementEnd"); }
		return retval;

	}
	// $ANTLR end "statementEnd"

	partial void EnterRule_program();
	partial void LeaveRule_program();

	// $ANTLR start "program"
	// JavaScript.g:39:1: program : ( LT !)* sourceElements ( LT !)* EOF !;
	[GrammarRule("program")]
	public XAstParserRuleReturnScope program()
	{
		EnterRule_program();
		EnterRule("program", 2);
		var retval = new XAstParserRuleReturnScope("program");
		retval.Start = (IToken)input.LT(1);
		int program_StartIndex = input.Index;

		object root_0 = default(object);

		IToken LT6 = default(IToken);
		IToken LT8 = default(IToken);
		IToken EOF9 = default(IToken);
		XAstParserRuleReturnScope sourceElements7 = default(XAstParserRuleReturnScope);

		object LT6_tree = default(object);
		object LT8_tree = default(object);
		object EOF9_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "program");
		DebugLocation(39, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 2)) { return retval; }

			// JavaScript.g:40:5: ( ( LT !)* sourceElements ( LT !)* EOF !)
			DebugEnterAlt(1);
			// JavaScript.g:40:7: ( LT !)* sourceElements ( LT !)* EOF !
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(40, 9);
			// JavaScript.g:40:9: ( LT !)*
			try { DebugEnterSubRule(2);
			while (true)
			{
				int alt2=2;
				try { DebugEnterDecision(2, false);
				int LA2_0 = input.LA(1);

				if ((LA2_0==LT))
				{
					alt2 = 1;
				}


				} finally { DebugExitDecision(2); }
				switch ( alt2 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g:40:9: LT !
					{
					DebugLocation(40, 9);
					LT6=(IToken)new XToken((IToken)Match(input,LT,Follow._LT_in_program216), "LT"); if (state.failed) return retval;

					}
					break;

				default:
					goto loop2;
				}
			}

			loop2:
				;

			} finally { DebugExitSubRule(2); }

			DebugLocation(40, 12);
			PushFollow(Follow._sourceElements_in_program220);
			sourceElements7=sourceElements();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, sourceElements7.Tree, sourceElements7, retval);
			DebugLocation(40, 29);
			// JavaScript.g:40:29: ( LT !)*
			try { DebugEnterSubRule(3);
			while (true)
			{
				int alt3=2;
				try { DebugEnterDecision(3, false);
				int LA3_0 = input.LA(1);

				if ((LA3_0==LT))
				{
					alt3 = 1;
				}


				} finally { DebugExitDecision(3); }
				switch ( alt3 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g:40:29: LT !
					{
					DebugLocation(40, 29);
					LT8=(IToken)new XToken((IToken)Match(input,LT,Follow._LT_in_program222), "LT"); if (state.failed) return retval;

					}
					break;

				default:
					goto loop3;
				}
			}

			loop3:
				;

			} finally { DebugExitSubRule(3); }

			DebugLocation(40, 35);
			EOF9=(IToken)new XToken((IToken)Match(input,EOF,Follow._EOF_in_program226), "EOF"); if (state.failed) return retval;

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("program", 2);
			LeaveRule("program", 2);
			LeaveRule_program();
			if (state.backtracking > 0) { Memoize(input, 2, program_StartIndex); }

		}
		DebugLocation(41, 4);
		} finally { DebugExitRule(GrammarFileName, "program"); }
		return retval;

	}
	// $ANTLR end "program"

	partial void EnterRule_sourceElements();
	partial void LeaveRule_sourceElements();

	// $ANTLR start "sourceElements"
	// JavaScript.g:43:1: sourceElements : sourceElement ( ( LT !)* sourceElement )* ;
	[GrammarRule("sourceElements")]
	public XAstParserRuleReturnScope sourceElements()
	{
		EnterRule_sourceElements();
		EnterRule("sourceElements", 3);
		var retval = new XAstParserRuleReturnScope("sourceElements");
		retval.Start = (IToken)input.LT(1);
		int sourceElements_StartIndex = input.Index;

		object root_0 = default(object);

		IToken LT11 = default(IToken);
		XAstParserRuleReturnScope sourceElement10 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope sourceElement12 = default(XAstParserRuleReturnScope);

		object LT11_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "sourceElements");
		DebugLocation(43, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 3)) { return retval; }

			// JavaScript.g:44:5: ( sourceElement ( ( LT !)* sourceElement )* )
			DebugEnterAlt(1);
			// JavaScript.g:44:7: sourceElement ( ( LT !)* sourceElement )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(44, 7);
			PushFollow(Follow._sourceElement_in_sourceElements248);
			sourceElement10=sourceElement();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, sourceElement10.Tree, sourceElement10, retval);
			DebugLocation(44, 21);
			// JavaScript.g:44:21: ( ( LT !)* sourceElement )*
			try { DebugEnterSubRule(5);
			while (true)
			{
				int alt5=2;
				try { DebugEnterDecision(5, false);
				try
				{
					alt5 = dfa5.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(5); }
				switch ( alt5 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g:44:22: ( LT !)* sourceElement
					{
					DebugLocation(44, 24);
					// JavaScript.g:44:24: ( LT !)*
					try { DebugEnterSubRule(4);
					while (true)
					{
						int alt4=2;
						try { DebugEnterDecision(4, false);
						int LA4_0 = input.LA(1);

						if ((LA4_0==LT))
						{
							alt4 = 1;
						}


						} finally { DebugExitDecision(4); }
						switch ( alt4 )
						{
						case 1:
							DebugEnterAlt(1);
							// JavaScript.g:44:24: LT !
							{
							DebugLocation(44, 24);
							LT11=(IToken)new XToken((IToken)Match(input,LT,Follow._LT_in_sourceElements251), "LT"); if (state.failed) return retval;

							}
							break;

						default:
							goto loop4;
						}
					}

					loop4:
						;

					} finally { DebugExitSubRule(4); }

					DebugLocation(44, 27);
					PushFollow(Follow._sourceElement_in_sourceElements255);
					sourceElement12=sourceElement();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, sourceElement12.Tree, sourceElement12, retval);

					}
					break;

				default:
					goto loop5;
				}
			}

			loop5:
				;

			} finally { DebugExitSubRule(5); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("sourceElements", 3);
			LeaveRule("sourceElements", 3);
			LeaveRule_sourceElements();
			if (state.backtracking > 0) { Memoize(input, 3, sourceElements_StartIndex); }

		}
		DebugLocation(45, 4);
		} finally { DebugExitRule(GrammarFileName, "sourceElements"); }
		return retval;

	}
	// $ANTLR end "sourceElements"

	partial void EnterRule_sourceElement();
	partial void LeaveRule_sourceElement();

	// $ANTLR start "sourceElement"
	// JavaScript.g:47:1: sourceElement : ( functionDeclaration | statement );
	[GrammarRule("sourceElement")]
	public XAstParserRuleReturnScope sourceElement()
	{
		EnterRule_sourceElement();
		EnterRule("sourceElement", 4);
		var retval = new XAstParserRuleReturnScope("sourceElement");
		retval.Start = (IToken)input.LT(1);
		int sourceElement_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope functionDeclaration13 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope statement14 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "sourceElement");
		DebugLocation(47, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 4)) { return retval; }

			// JavaScript.g:48:5: ( functionDeclaration | statement )
			int alt6=2;
			try { DebugEnterDecision(6, false);
			int LA6_0 = input.LA(1);

			if ((LA6_0==93))
			{
				int LA6_1 = input.LA(2);

				if ((EvaluatePredicate(synpred10_JavaScript_fragment)))
				{
					alt6 = 1;
				}
				else if ((true))
				{
					alt6 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 6, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA6_0==FALSE||LA6_0==Identifier||LA6_0==NULL||LA6_0==NumericLiteral||LA6_0==RegularExpressionLiteral||(LA6_0>=StringLiteral && LA6_0<=TRUE)||LA6_0==43||LA6_0==51||(LA6_0>=54 && LA6_0<=55)||(LA6_0>=58 && LA6_0<=59)||LA6_0==65||LA6_0==80||LA6_0==83||LA6_0==86||(LA6_0>=88 && LA6_0<=89)||LA6_0==92||LA6_0==94||(LA6_0>=97 && LA6_0<=107)||LA6_0==111))
			{
				alt6 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 6, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(6); }
			switch (alt6)
			{
			case 1:
				DebugEnterAlt(1);
				// JavaScript.g:48:7: functionDeclaration
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(48, 7);
				PushFollow(Follow._functionDeclaration_in_sourceElement278);
				functionDeclaration13=functionDeclaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, functionDeclaration13.Tree, functionDeclaration13, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// JavaScript.g:49:7: statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(49, 7);
				PushFollow(Follow._statement_in_sourceElement286);
				statement14=statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, statement14.Tree, statement14, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("sourceElement", 4);
			LeaveRule("sourceElement", 4);
			LeaveRule_sourceElement();
			if (state.backtracking > 0) { Memoize(input, 4, sourceElement_StartIndex); }

		}
		DebugLocation(50, 4);
		} finally { DebugExitRule(GrammarFileName, "sourceElement"); }
		return retval;

	}
	// $ANTLR end "sourceElement"

	partial void EnterRule_functionDeclaration();
	partial void LeaveRule_functionDeclaration();

	// $ANTLR start "functionDeclaration"
	// JavaScript.g:53:1: functionDeclaration : 'function' ( LT !)* Identifier ( LT !)* formalParameterList ( LT !)* functionBody ;
	[GrammarRule("functionDeclaration")]
	public XAstParserRuleReturnScope functionDeclaration()
	{
		EnterRule_functionDeclaration();
		EnterRule("functionDeclaration", 5);
		var retval = new XAstParserRuleReturnScope("functionDeclaration");
		retval.Start = (IToken)input.LT(1);
		int functionDeclaration_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal15 = default(IToken);
		IToken LT16 = default(IToken);
		IToken Identifier17 = default(IToken);
		IToken LT18 = default(IToken);
		IToken LT20 = default(IToken);
		XAstParserRuleReturnScope formalParameterList19 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope functionBody21 = default(XAstParserRuleReturnScope);

		object string_literal15_tree = default(object);
		object LT16_tree = default(object);
		object Identifier17_tree = default(object);
		object LT18_tree = default(object);
		object LT20_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "functionDeclaration");
		DebugLocation(53, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 5)) { return retval; }

			// JavaScript.g:54:5: ( 'function' ( LT !)* Identifier ( LT !)* formalParameterList ( LT !)* functionBody )
			DebugEnterAlt(1);
			// JavaScript.g:54:7: 'function' ( LT !)* Identifier ( LT !)* formalParameterList ( LT !)* functionBody
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(54, 7);
			string_literal15=(IToken)Match(input,93,Follow._93_in_functionDeclaration308); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal15_tree = (object)adaptor.Create(string_literal15, retval);
			adaptor.AddChild(root_0, string_literal15_tree);
			}
			DebugLocation(54, 20);
			// JavaScript.g:54:20: ( LT !)*
			try { DebugEnterSubRule(7);
			while (true)
			{
				int alt7=2;
				try { DebugEnterDecision(7, false);
				int LA7_0 = input.LA(1);

				if ((LA7_0==LT))
				{
					alt7 = 1;
				}


				} finally { DebugExitDecision(7); }
				switch ( alt7 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g:54:20: LT !
					{
					DebugLocation(54, 20);
					LT16=(IToken)new XToken((IToken)Match(input,LT,Follow._LT_in_functionDeclaration310), "LT"); if (state.failed) return retval;

					}
					break;

				default:
					goto loop7;
				}
			}

			loop7:
				;

			} finally { DebugExitSubRule(7); }

			DebugLocation(54, 23);
			Identifier17=(IToken)new XToken((IToken)Match(input,Identifier,Follow._Identifier_in_functionDeclaration314), "Identifier"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			Identifier17_tree = (object)adaptor.Create(Identifier17, retval);
			adaptor.AddChild(root_0, Identifier17_tree);
			}
			DebugLocation(54, 36);
			// JavaScript.g:54:36: ( LT !)*
			try { DebugEnterSubRule(8);
			while (true)
			{
				int alt8=2;
				try { DebugEnterDecision(8, false);
				int LA8_0 = input.LA(1);

				if ((LA8_0==LT))
				{
					alt8 = 1;
				}


				} finally { DebugExitDecision(8); }
				switch ( alt8 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g:54:36: LT !
					{
					DebugLocation(54, 36);
					LT18=(IToken)new XToken((IToken)Match(input,LT,Follow._LT_in_functionDeclaration316), "LT"); if (state.failed) return retval;

					}
					break;

				default:
					goto loop8;
				}
			}

			loop8:
				;

			} finally { DebugExitSubRule(8); }

			DebugLocation(54, 39);
			PushFollow(Follow._formalParameterList_in_functionDeclaration320);
			formalParameterList19=formalParameterList();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, formalParameterList19.Tree, formalParameterList19, retval);
			DebugLocation(54, 61);
			// JavaScript.g:54:61: ( LT !)*
			try { DebugEnterSubRule(9);
			while (true)
			{
				int alt9=2;
				try { DebugEnterDecision(9, false);
				int LA9_0 = input.LA(1);

				if ((LA9_0==LT))
				{
					alt9 = 1;
				}


				} finally { DebugExitDecision(9); }
				switch ( alt9 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g:54:61: LT !
					{
					DebugLocation(54, 61);
					LT20=(IToken)new XToken((IToken)Match(input,LT,Follow._LT_in_functionDeclaration322), "LT"); if (state.failed) return retval;

					}
					break;

				default:
					goto loop9;
				}
			}

			loop9:
				;

			} finally { DebugExitSubRule(9); }

			DebugLocation(54, 64);
			PushFollow(Follow._functionBody_in_functionDeclaration326);
			functionBody21=functionBody();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, functionBody21.Tree, functionBody21, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("functionDeclaration", 5);
			LeaveRule("functionDeclaration", 5);
			LeaveRule_functionDeclaration();
			if (state.backtracking > 0) { Memoize(input, 5, functionDeclaration_StartIndex); }

		}
		DebugLocation(55, 4);
		} finally { DebugExitRule(GrammarFileName, "functionDeclaration"); }
		return retval;

	}
	// $ANTLR end "functionDeclaration"

	partial void EnterRule_functionExpression();
	partial void LeaveRule_functionExpression();

	// $ANTLR start "functionExpression"
	// JavaScript.g:57:1: functionExpression : 'function' ( LT !)* ( Identifier )? ( LT !)* formalParameterList ( LT !)* functionBody ;
	[GrammarRule("functionExpression")]
	public XAstParserRuleReturnScope functionExpression()
	{
		EnterRule_functionExpression();
		EnterRule("functionExpression", 6);
		var retval = new XAstParserRuleReturnScope("functionExpression");
		retval.Start = (IToken)input.LT(1);
		int functionExpression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal22 = default(IToken);
		IToken LT23 = default(IToken);
		IToken Identifier24 = default(IToken);
		IToken LT25 = default(IToken);
		IToken LT27 = default(IToken);
		XAstParserRuleReturnScope formalParameterList26 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope functionBody28 = default(XAstParserRuleReturnScope);

		object string_literal22_tree = default(object);
		object LT23_tree = default(object);
		object Identifier24_tree = default(object);
		object LT25_tree = default(object);
		object LT27_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "functionExpression");
		DebugLocation(57, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 6)) { return retval; }

			// JavaScript.g:58:5: ( 'function' ( LT !)* ( Identifier )? ( LT !)* formalParameterList ( LT !)* functionBody )
			DebugEnterAlt(1);
			// JavaScript.g:58:7: 'function' ( LT !)* ( Identifier )? ( LT !)* formalParameterList ( LT !)* functionBody
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(58, 7);
			string_literal22=(IToken)Match(input,93,Follow._93_in_functionExpression347); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal22_tree = (object)adaptor.Create(string_literal22, retval);
			adaptor.AddChild(root_0, string_literal22_tree);
			}
			DebugLocation(58, 20);
			// JavaScript.g:58:20: ( LT !)*
			try { DebugEnterSubRule(10);
			while (true)
			{
				int alt10=2;
				try { DebugEnterDecision(10, false);
				int LA10_0 = input.LA(1);

				if ((LA10_0==LT))
				{
					int LA10_2 = input.LA(2);

					if ((EvaluatePredicate(synpred14_JavaScript_fragment)))
					{
						alt10 = 1;
					}


				}


				} finally { DebugExitDecision(10); }
				switch ( alt10 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g:58:20: LT !
					{
					DebugLocation(58, 20);
					LT23=(IToken)new XToken((IToken)Match(input,LT,Follow._LT_in_functionExpression349), "LT"); if (state.failed) return retval;

					}
					break;

				default:
					goto loop10;
				}
			}

			loop10:
				;

			} finally { DebugExitSubRule(10); }

			DebugLocation(58, 23);
			// JavaScript.g:58:23: ( Identifier )?
			int alt11=2;
			try { DebugEnterSubRule(11);
			try { DebugEnterDecision(11, false);
			int LA11_0 = input.LA(1);

			if ((LA11_0==Identifier))
			{
				alt11 = 1;
			}
			} finally { DebugExitDecision(11); }
			switch (alt11)
			{
			case 1:
				DebugEnterAlt(1);
				// JavaScript.g:58:23: Identifier
				{
				DebugLocation(58, 23);
				Identifier24=(IToken)new XToken((IToken)Match(input,Identifier,Follow._Identifier_in_functionExpression353), "Identifier"); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Identifier24_tree = (object)adaptor.Create(Identifier24, retval);
				adaptor.AddChild(root_0, Identifier24_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(11); }

			DebugLocation(58, 37);
			// JavaScript.g:58:37: ( LT !)*
			try { DebugEnterSubRule(12);
			while (true)
			{
				int alt12=2;
				try { DebugEnterDecision(12, false);
				int LA12_0 = input.LA(1);

				if ((LA12_0==LT))
				{
					alt12 = 1;
				}


				} finally { DebugExitDecision(12); }
				switch ( alt12 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g:58:37: LT !
					{
					DebugLocation(58, 37);
					LT25=(IToken)new XToken((IToken)Match(input,LT,Follow._LT_in_functionExpression356), "LT"); if (state.failed) return retval;

					}
					break;

				default:
					goto loop12;
				}
			}

			loop12:
				;

			} finally { DebugExitSubRule(12); }

			DebugLocation(58, 40);
			PushFollow(Follow._formalParameterList_in_functionExpression360);
			formalParameterList26=formalParameterList();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, formalParameterList26.Tree, formalParameterList26, retval);
			DebugLocation(58, 62);
			// JavaScript.g:58:62: ( LT !)*
			try { DebugEnterSubRule(13);
			while (true)
			{
				int alt13=2;
				try { DebugEnterDecision(13, false);
				int LA13_0 = input.LA(1);

				if ((LA13_0==LT))
				{
					alt13 = 1;
				}


				} finally { DebugExitDecision(13); }
				switch ( alt13 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g:58:62: LT !
					{
					DebugLocation(58, 62);
					LT27=(IToken)new XToken((IToken)Match(input,LT,Follow._LT_in_functionExpression362), "LT"); if (state.failed) return retval;

					}
					break;

				default:
					goto loop13;
				}
			}

			loop13:
				;

			} finally { DebugExitSubRule(13); }

			DebugLocation(58, 65);
			PushFollow(Follow._functionBody_in_functionExpression366);
			functionBody28=functionBody();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, functionBody28.Tree, functionBody28, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("functionExpression", 6);
			LeaveRule("functionExpression", 6);
			LeaveRule_functionExpression();
			if (state.backtracking > 0) { Memoize(input, 6, functionExpression_StartIndex); }

		}
		DebugLocation(59, 4);
		} finally { DebugExitRule(GrammarFileName, "functionExpression"); }
		return retval;

	}
	// $ANTLR end "functionExpression"

	partial void EnterRule_formalParameterList();
	partial void LeaveRule_formalParameterList();

	// $ANTLR start "formalParameterList"
	// JavaScript.g:61:1: formalParameterList : '(' ( ( LT !)* Identifier ( ( LT !)* ',' ( LT !)* Identifier )* )? ( LT !)* RPAREN ;
	[GrammarRule("formalParameterList")]
	public XAstParserRuleReturnScope formalParameterList()
	{
		EnterRule_formalParameterList();
		EnterRule("formalParameterList", 7);
		var retval = new XAstParserRuleReturnScope("formalParameterList");
		retval.Start = (IToken)input.LT(1);
		int formalParameterList_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal29 = default(IToken);
		IToken LT30 = default(IToken);
		IToken Identifier31 = default(IToken);
		IToken LT32 = default(IToken);
		IToken char_literal33 = default(IToken);
		IToken LT34 = default(IToken);
		IToken Identifier35 = default(IToken);
		IToken LT36 = default(IToken);
		IToken RPAREN37 = default(IToken);

		object char_literal29_tree = default(object);
		object LT30_tree = default(object);
		object Identifier31_tree = default(object);
		object LT32_tree = default(object);
		object char_literal33_tree = default(object);
		object LT34_tree = default(object);
		object Identifier35_tree = default(object);
		object LT36_tree = default(object);
		object RPAREN37_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "formalParameterList");
		DebugLocation(61, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 7)) { return retval; }

			// JavaScript.g:62:5: ( '(' ( ( LT !)* Identifier ( ( LT !)* ',' ( LT !)* Identifier )* )? ( LT !)* RPAREN )
			DebugEnterAlt(1);
			// JavaScript.g:62:7: '(' ( ( LT !)* Identifier ( ( LT !)* ',' ( LT !)* Identifier )* )? ( LT !)* RPAREN
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(62, 7);
			char_literal29=(IToken)Match(input,51,Follow._51_in_formalParameterList387); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal29_tree = (object)adaptor.Create(char_literal29, retval);
			adaptor.AddChild(root_0, char_literal29_tree);
			}
			DebugLocation(62, 11);
			// JavaScript.g:62:11: ( ( LT !)* Identifier ( ( LT !)* ',' ( LT !)* Identifier )* )?
			int alt18=2;
			try { DebugEnterSubRule(18);
			try { DebugEnterDecision(18, false);
			try
			{
				alt18 = dfa18.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(18); }
			switch (alt18)
			{
			case 1:
				DebugEnterAlt(1);
				// JavaScript.g:62:12: ( LT !)* Identifier ( ( LT !)* ',' ( LT !)* Identifier )*
				{
				DebugLocation(62, 14);
				// JavaScript.g:62:14: ( LT !)*
				try { DebugEnterSubRule(14);
				while (true)
				{
					int alt14=2;
					try { DebugEnterDecision(14, false);
					int LA14_0 = input.LA(1);

					if ((LA14_0==LT))
					{
						alt14 = 1;
					}


					} finally { DebugExitDecision(14); }
					switch ( alt14 )
					{
					case 1:
						DebugEnterAlt(1);
						// JavaScript.g:62:14: LT !
						{
						DebugLocation(62, 14);
						LT30=(IToken)new XToken((IToken)Match(input,LT,Follow._LT_in_formalParameterList390), "LT"); if (state.failed) return retval;

						}
						break;

					default:
						goto loop14;
					}
				}

				loop14:
					;

				} finally { DebugExitSubRule(14); }

				DebugLocation(62, 17);
				Identifier31=(IToken)new XToken((IToken)Match(input,Identifier,Follow._Identifier_in_formalParameterList394), "Identifier"); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Identifier31_tree = (object)adaptor.Create(Identifier31, retval);
				adaptor.AddChild(root_0, Identifier31_tree);
				}
				DebugLocation(62, 28);
				// JavaScript.g:62:28: ( ( LT !)* ',' ( LT !)* Identifier )*
				try { DebugEnterSubRule(17);
				while (true)
				{
					int alt17=2;
					try { DebugEnterDecision(17, false);
					try
					{
						alt17 = dfa17.Predict(input);
					}
					catch (NoViableAltException nvae)
					{
						DebugRecognitionException(nvae);
						throw;
					}
					} finally { DebugExitDecision(17); }
					switch ( alt17 )
					{
					case 1:
						DebugEnterAlt(1);
						// JavaScript.g:62:29: ( LT !)* ',' ( LT !)* Identifier
						{
						DebugLocation(62, 31);
						// JavaScript.g:62:31: ( LT !)*
						try { DebugEnterSubRule(15);
						while (true)
						{
							int alt15=2;
							try { DebugEnterDecision(15, false);
							int LA15_0 = input.LA(1);

							if ((LA15_0==LT))
							{
								alt15 = 1;
							}


							} finally { DebugExitDecision(15); }
							switch ( alt15 )
							{
							case 1:
								DebugEnterAlt(1);
								// JavaScript.g:62:31: LT !
								{
								DebugLocation(62, 31);
								LT32=(IToken)new XToken((IToken)Match(input,LT,Follow._LT_in_formalParameterList397), "LT"); if (state.failed) return retval;

								}
								break;

							default:
								goto loop15;
							}
						}

						loop15:
							;

						} finally { DebugExitSubRule(15); }

						DebugLocation(62, 34);
						char_literal33=(IToken)Match(input,57,Follow._57_in_formalParameterList401); if (state.failed) return retval;
						if (state.backtracking == 0) {
						char_literal33_tree = (object)adaptor.Create(char_literal33, retval);
						adaptor.AddChild(root_0, char_literal33_tree);
						}
						DebugLocation(62, 40);
						// JavaScript.g:62:40: ( LT !)*
						try { DebugEnterSubRule(16);
						while (true)
						{
							int alt16=2;
							try { DebugEnterDecision(16, false);
							int LA16_0 = input.LA(1);

							if ((LA16_0==LT))
							{
								alt16 = 1;
							}


							} finally { DebugExitDecision(16); }
							switch ( alt16 )
							{
							case 1:
								DebugEnterAlt(1);
								// JavaScript.g:62:40: LT !
								{
								DebugLocation(62, 40);
								LT34=(IToken)new XToken((IToken)Match(input,LT,Follow._LT_in_formalParameterList403), "LT"); if (state.failed) return retval;

								}
								break;

							default:
								goto loop16;
							}
						}

						loop16:
							;

						} finally { DebugExitSubRule(16); }

						DebugLocation(62, 43);
						Identifier35=(IToken)new XToken((IToken)Match(input,Identifier,Follow._Identifier_in_formalParameterList407), "Identifier"); if (state.failed) return retval;
						if (state.backtracking == 0) {
						Identifier35_tree = (object)adaptor.Create(Identifier35, retval);
						adaptor.AddChild(root_0, Identifier35_tree);
						}

						}
						break;

					default:
						goto loop17;
					}
				}

				loop17:
					;

				} finally { DebugExitSubRule(17); }


				}
				break;

			}
			} finally { DebugExitSubRule(18); }

			DebugLocation(62, 60);
			// JavaScript.g:62:60: ( LT !)*
			try { DebugEnterSubRule(19);
			while (true)
			{
				int alt19=2;
				try { DebugEnterDecision(19, false);
				int LA19_0 = input.LA(1);

				if ((LA19_0==LT))
				{
					alt19 = 1;
				}


				} finally { DebugExitDecision(19); }
				switch ( alt19 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g:62:60: LT !
					{
					DebugLocation(62, 60);
					LT36=(IToken)new XToken((IToken)Match(input,LT,Follow._LT_in_formalParameterList413), "LT"); if (state.failed) return retval;

					}
					break;

				default:
					goto loop19;
				}
			}

			loop19:
				;

			} finally { DebugExitSubRule(19); }

			DebugLocation(62, 63);
			RPAREN37=(IToken)new XToken((IToken)Match(input,RPAREN,Follow._RPAREN_in_formalParameterList417), "RPAREN"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			RPAREN37_tree = (object)adaptor.Create(RPAREN37, retval);
			adaptor.AddChild(root_0, RPAREN37_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("formalParameterList", 7);
			LeaveRule("formalParameterList", 7);
			LeaveRule_formalParameterList();
			if (state.backtracking > 0) { Memoize(input, 7, formalParameterList_StartIndex); }

		}
		DebugLocation(63, 4);
		} finally { DebugExitRule(GrammarFileName, "formalParameterList"); }
		return retval;

	}
	// $ANTLR end "formalParameterList"

	partial void EnterRule_functionBody();
	partial void LeaveRule_functionBody();

	// $ANTLR start "functionBody"
	// JavaScript.g:65:1: functionBody : '{' ( LT !)* ( sourceElements )? ( LT !)* RBRACE ;
	[GrammarRule("functionBody")]
	public XAstParserRuleReturnScope functionBody()
	{
		EnterRule_functionBody();
		EnterRule("functionBody", 8);
		var retval = new XAstParserRuleReturnScope("functionBody");
		retval.Start = (IToken)input.LT(1);
		int functionBody_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal38 = default(IToken);
		IToken LT39 = default(IToken);
		IToken LT41 = default(IToken);
		IToken RBRACE42 = default(IToken);
		XAstParserRuleReturnScope sourceElements40 = default(XAstParserRuleReturnScope);

		object char_literal38_tree = default(object);
		object LT39_tree = default(object);
		object LT41_tree = default(object);
		object RBRACE42_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "functionBody");
		DebugLocation(65, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 8)) { return retval; }

			// JavaScript.g:66:5: ( '{' ( LT !)* ( sourceElements )? ( LT !)* RBRACE )
			DebugEnterAlt(1);
			// JavaScript.g:66:7: '{' ( LT !)* ( sourceElements )? ( LT !)* RBRACE
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(66, 7);
			char_literal38=(IToken)Match(input,107,Follow._107_in_functionBody434); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal38_tree = (object)adaptor.Create(char_literal38, retval);
			adaptor.AddChild(root_0, char_literal38_tree);
			}
			DebugLocation(66, 13);
			// JavaScript.g:66:13: ( LT !)*
			try { DebugEnterSubRule(20);
			while (true)
			{
				int alt20=2;
				try { DebugEnterDecision(20, false);
				int LA20_0 = input.LA(1);

				if ((LA20_0==LT))
				{
					int LA20_2 = input.LA(2);

					if ((EvaluatePredicate(synpred24_JavaScript_fragment)))
					{
						alt20 = 1;
					}


				}


				} finally { DebugExitDecision(20); }
				switch ( alt20 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g:66:13: LT !
					{
					DebugLocation(66, 13);
					LT39=(IToken)new XToken((IToken)Match(input,LT,Follow._LT_in_functionBody436), "LT"); if (state.failed) return retval;

					}
					break;

				default:
					goto loop20;
				}
			}

			loop20:
				;

			} finally { DebugExitSubRule(20); }

			DebugLocation(66, 16);
			// JavaScript.g:66:16: ( sourceElements )?
			int alt21=2;
			try { DebugEnterSubRule(21);
			try { DebugEnterDecision(21, false);
			int LA21_0 = input.LA(1);

			if ((LA21_0==FALSE||LA21_0==Identifier||LA21_0==NULL||LA21_0==NumericLiteral||LA21_0==RegularExpressionLiteral||(LA21_0>=StringLiteral && LA21_0<=TRUE)||LA21_0==43||LA21_0==51||(LA21_0>=54 && LA21_0<=55)||(LA21_0>=58 && LA21_0<=59)||LA21_0==65||LA21_0==80||LA21_0==83||LA21_0==86||(LA21_0>=88 && LA21_0<=89)||(LA21_0>=92 && LA21_0<=94)||(LA21_0>=97 && LA21_0<=107)||LA21_0==111))
			{
				alt21 = 1;
			}
			} finally { DebugExitDecision(21); }
			switch (alt21)
			{
			case 1:
				DebugEnterAlt(1);
				// JavaScript.g:66:16: sourceElements
				{
				DebugLocation(66, 16);
				PushFollow(Follow._sourceElements_in_functionBody440);
				sourceElements40=sourceElements();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, sourceElements40.Tree, sourceElements40, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(21); }

			DebugLocation(66, 34);
			// JavaScript.g:66:34: ( LT !)*
			try { DebugEnterSubRule(22);
			while (true)
			{
				int alt22=2;
				try { DebugEnterDecision(22, false);
				int LA22_0 = input.LA(1);

				if ((LA22_0==LT))
				{
					alt22 = 1;
				}


				} finally { DebugExitDecision(22); }
				switch ( alt22 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g:66:34: LT !
					{
					DebugLocation(66, 34);
					LT41=(IToken)new XToken((IToken)Match(input,LT,Follow._LT_in_functionBody443), "LT"); if (state.failed) return retval;

					}
					break;

				default:
					goto loop22;
				}
			}

			loop22:
				;

			} finally { DebugExitSubRule(22); }

			DebugLocation(66, 37);
			RBRACE42=(IToken)new XToken((IToken)Match(input,RBRACE,Follow._RBRACE_in_functionBody447), "RBRACE"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			RBRACE42_tree = (object)adaptor.Create(RBRACE42, retval);
			adaptor.AddChild(root_0, RBRACE42_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("functionBody", 8);
			LeaveRule("functionBody", 8);
			LeaveRule_functionBody();
			if (state.backtracking > 0) { Memoize(input, 8, functionBody_StartIndex); }

		}
		DebugLocation(67, 4);
		} finally { DebugExitRule(GrammarFileName, "functionBody"); }
		return retval;

	}
	// $ANTLR end "functionBody"

	partial void EnterRule_statement();
	partial void LeaveRule_statement();

	// $ANTLR start "statement"
	// JavaScript.g:70:1: statement : ( statementBlock | variableStatement | emptyStatement | expressionStatement | ifStatement | iterationStatement | continueStatement | breakStatement | returnStatement | withStatement | labelledStatement | switchStatement | throwStatement | tryStatement );
	[GrammarRule("statement")]
	public XAstParserRuleReturnScope statement()
	{
		EnterRule_statement();
		EnterRule("statement", 9);
		var retval = new XAstParserRuleReturnScope("statement");
		retval.Start = (IToken)input.LT(1);
		int statement_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope statementBlock43 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope variableStatement44 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope emptyStatement45 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope expressionStatement46 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope ifStatement47 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope iterationStatement48 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope continueStatement49 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope breakStatement50 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope returnStatement51 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope withStatement52 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope labelledStatement53 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope switchStatement54 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope throwStatement55 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope tryStatement56 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "statement");
		DebugLocation(70, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 9)) { return retval; }

			// JavaScript.g:71:5: ( statementBlock | variableStatement | emptyStatement | expressionStatement | ifStatement | iterationStatement | continueStatement | breakStatement | returnStatement | withStatement | labelledStatement | switchStatement | throwStatement | tryStatement )
			int alt23=14;
			try { DebugEnterDecision(23, false);
			switch (input.LA(1))
			{
			case 107:
				{
				int LA23_1 = input.LA(2);

				if ((EvaluatePredicate(synpred27_JavaScript_fragment)))
				{
					alt23 = 1;
				}
				else if ((EvaluatePredicate(synpred30_JavaScript_fragment)))
				{
					alt23 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 23, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 103:
				{
				alt23 = 2;
				}
				break;
			case 65:
				{
				alt23 = 3;
				}
				break;
			case FALSE:
			case NULL:
			case NumericLiteral:
			case RegularExpressionLiteral:
			case StringLiteral:
			case THIS:
			case TRUE:
			case 43:
			case 51:
			case 54:
			case 55:
			case 58:
			case 59:
			case 80:
			case 88:
			case 93:
			case 97:
			case 102:
			case 104:
			case 111:
				{
				alt23 = 4;
				}
				break;
			case Identifier:
				{
				int LA23_5 = input.LA(2);

				if ((EvaluatePredicate(synpred30_JavaScript_fragment)))
				{
					alt23 = 4;
				}
				else if ((EvaluatePredicate(synpred37_JavaScript_fragment)))
				{
					alt23 = 11;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 23, 5, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 94:
				{
				alt23 = 5;
				}
				break;
			case 89:
			case 92:
			case 105:
				{
				alt23 = 6;
				}
				break;
			case 86:
				{
				alt23 = 7;
				}
				break;
			case 83:
				{
				alt23 = 8;
				}
				break;
			case 98:
				{
				alt23 = 9;
				}
				break;
			case 106:
				{
				alt23 = 10;
				}
				break;
			case 99:
				{
				alt23 = 12;
				}
				break;
			case 100:
				{
				alt23 = 13;
				}
				break;
			case 101:
				{
				alt23 = 14;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 23, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(23); }
			switch (alt23)
			{
			case 1:
				DebugEnterAlt(1);
				// JavaScript.g:71:7: statementBlock
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(71, 7);
				PushFollow(Follow._statementBlock_in_statement465);
				statementBlock43=statementBlock();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, statementBlock43.Tree, statementBlock43, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// JavaScript.g:72:7: variableStatement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(72, 7);
				PushFollow(Follow._variableStatement_in_statement473);
				variableStatement44=variableStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, variableStatement44.Tree, variableStatement44, retval);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// JavaScript.g:73:7: emptyStatement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(73, 7);
				PushFollow(Follow._emptyStatement_in_statement481);
				emptyStatement45=emptyStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, emptyStatement45.Tree, emptyStatement45, retval);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// JavaScript.g:74:7: expressionStatement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(74, 7);
				PushFollow(Follow._expressionStatement_in_statement489);
				expressionStatement46=expressionStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expressionStatement46.Tree, expressionStatement46, retval);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// JavaScript.g:75:7: ifStatement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(75, 7);
				PushFollow(Follow._ifStatement_in_statement497);
				ifStatement47=ifStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, ifStatement47.Tree, ifStatement47, retval);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// JavaScript.g:76:7: iterationStatement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(76, 7);
				PushFollow(Follow._iterationStatement_in_statement505);
				iterationStatement48=iterationStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, iterationStatement48.Tree, iterationStatement48, retval);

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// JavaScript.g:77:7: continueStatement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(77, 7);
				PushFollow(Follow._continueStatement_in_statement513);
				continueStatement49=continueStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, continueStatement49.Tree, continueStatement49, retval);

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// JavaScript.g:78:7: breakStatement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(78, 7);
				PushFollow(Follow._breakStatement_in_statement521);
				breakStatement50=breakStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, breakStatement50.Tree, breakStatement50, retval);

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// JavaScript.g:79:7: returnStatement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(79, 7);
				PushFollow(Follow._returnStatement_in_statement529);
				returnStatement51=returnStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, returnStatement51.Tree, returnStatement51, retval);

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// JavaScript.g:80:7: withStatement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(80, 7);
				PushFollow(Follow._withStatement_in_statement537);
				withStatement52=withStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, withStatement52.Tree, withStatement52, retval);

				}
				break;
			case 11:
				DebugEnterAlt(11);
				// JavaScript.g:81:7: labelledStatement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(81, 7);
				PushFollow(Follow._labelledStatement_in_statement545);
				labelledStatement53=labelledStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, labelledStatement53.Tree, labelledStatement53, retval);

				}
				break;
			case 12:
				DebugEnterAlt(12);
				// JavaScript.g:82:7: switchStatement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(82, 7);
				PushFollow(Follow._switchStatement_in_statement553);
				switchStatement54=switchStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, switchStatement54.Tree, switchStatement54, retval);

				}
				break;
			case 13:
				DebugEnterAlt(13);
				// JavaScript.g:83:7: throwStatement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(83, 7);
				PushFollow(Follow._throwStatement_in_statement561);
				throwStatement55=throwStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, throwStatement55.Tree, throwStatement55, retval);

				}
				break;
			case 14:
				DebugEnterAlt(14);
				// JavaScript.g:84:7: tryStatement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(84, 7);
				PushFollow(Follow._tryStatement_in_statement569);
				tryStatement56=tryStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, tryStatement56.Tree, tryStatement56, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("statement", 9);
			LeaveRule("statement", 9);
			LeaveRule_statement();
			if (state.backtracking > 0) { Memoize(input, 9, statement_StartIndex); }

		}
		DebugLocation(85, 4);
		} finally { DebugExitRule(GrammarFileName, "statement"); }
		return retval;

	}
	// $ANTLR end "statement"

	partial void EnterRule_statementBlock();
	partial void LeaveRule_statementBlock();

	// $ANTLR start "statementBlock"
	// JavaScript.g:87:1: statementBlock : '{' ( LT !)* ( statementList )? ( LT !)* RBRACE ;
	[GrammarRule("statementBlock")]
	public XAstParserRuleReturnScope statementBlock()
	{
		EnterRule_statementBlock();
		EnterRule("statementBlock", 10);
		var retval = new XAstParserRuleReturnScope("statementBlock");
		retval.Start = (IToken)input.LT(1);
		int statementBlock_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal57 = default(IToken);
		IToken LT58 = default(IToken);
		IToken LT60 = default(IToken);
		IToken RBRACE61 = default(IToken);
		XAstParserRuleReturnScope statementList59 = default(XAstParserRuleReturnScope);

		object char_literal57_tree = default(object);
		object LT58_tree = default(object);
		object LT60_tree = default(object);
		object RBRACE61_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "statementBlock");
		DebugLocation(87, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 10)) { return retval; }

			// JavaScript.g:88:5: ( '{' ( LT !)* ( statementList )? ( LT !)* RBRACE )
			DebugEnterAlt(1);
			// JavaScript.g:88:7: '{' ( LT !)* ( statementList )? ( LT !)* RBRACE
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(88, 7);
			char_literal57=(IToken)Match(input,107,Follow._107_in_statementBlock590); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal57_tree = (object)adaptor.Create(char_literal57, retval);
			adaptor.AddChild(root_0, char_literal57_tree);
			}
			DebugLocation(88, 13);
			// JavaScript.g:88:13: ( LT !)*
			try { DebugEnterSubRule(24);
			while (true)
			{
				int alt24=2;
				try { DebugEnterDecision(24, false);
				int LA24_0 = input.LA(1);

				if ((LA24_0==LT))
				{
					int LA24_2 = input.LA(2);

					if ((EvaluatePredicate(synpred40_JavaScript_fragment)))
					{
						alt24 = 1;
					}


				}


				} finally { DebugExitDecision(24); }
				switch ( alt24 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g:88:13: LT !
					{
					DebugLocation(88, 13);
					LT58=(IToken)new XToken((IToken)Match(input,LT,Follow._LT_in_statementBlock592), "LT"); if (state.failed) return retval;

					}
					break;

				default:
					goto loop24;
				}
			}

			loop24:
				;

			} finally { DebugExitSubRule(24); }

			DebugLocation(88, 16);
			// JavaScript.g:88:16: ( statementList )?
			int alt25=2;
			try { DebugEnterSubRule(25);
			try { DebugEnterDecision(25, false);
			int LA25_0 = input.LA(1);

			if ((LA25_0==FALSE||LA25_0==Identifier||LA25_0==NULL||LA25_0==NumericLiteral||LA25_0==RegularExpressionLiteral||(LA25_0>=StringLiteral && LA25_0<=TRUE)||LA25_0==43||LA25_0==51||(LA25_0>=54 && LA25_0<=55)||(LA25_0>=58 && LA25_0<=59)||LA25_0==65||LA25_0==80||LA25_0==83||LA25_0==86||(LA25_0>=88 && LA25_0<=89)||(LA25_0>=92 && LA25_0<=94)||(LA25_0>=97 && LA25_0<=107)||LA25_0==111))
			{
				alt25 = 1;
			}
			} finally { DebugExitDecision(25); }
			switch (alt25)
			{
			case 1:
				DebugEnterAlt(1);
				// JavaScript.g:88:16: statementList
				{
				DebugLocation(88, 16);
				PushFollow(Follow._statementList_in_statementBlock596);
				statementList59=statementList();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, statementList59.Tree, statementList59, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(25); }

			DebugLocation(88, 33);
			// JavaScript.g:88:33: ( LT !)*
			try { DebugEnterSubRule(26);
			while (true)
			{
				int alt26=2;
				try { DebugEnterDecision(26, false);
				int LA26_0 = input.LA(1);

				if ((LA26_0==LT))
				{
					alt26 = 1;
				}


				} finally { DebugExitDecision(26); }
				switch ( alt26 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g:88:33: LT !
					{
					DebugLocation(88, 33);
					LT60=(IToken)new XToken((IToken)Match(input,LT,Follow._LT_in_statementBlock599), "LT"); if (state.failed) return retval;

					}
					break;

				default:
					goto loop26;
				}
			}

			loop26:
				;

			} finally { DebugExitSubRule(26); }

			DebugLocation(88, 36);
			RBRACE61=(IToken)new XToken((IToken)Match(input,RBRACE,Follow._RBRACE_in_statementBlock603), "RBRACE"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			RBRACE61_tree = (object)adaptor.Create(RBRACE61, retval);
			adaptor.AddChild(root_0, RBRACE61_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("statementBlock", 10);
			LeaveRule("statementBlock", 10);
			LeaveRule_statementBlock();
			if (state.backtracking > 0) { Memoize(input, 10, statementBlock_StartIndex); }

		}
		DebugLocation(89, 4);
		} finally { DebugExitRule(GrammarFileName, "statementBlock"); }
		return retval;

	}
	// $ANTLR end "statementBlock"

	partial void EnterRule_statementList();
	partial void LeaveRule_statementList();

	// $ANTLR start "statementList"
	// JavaScript.g:91:1: statementList : statement ( ( LT !)* statement )* ;
	[GrammarRule("statementList")]
	public XAstParserRuleReturnScope statementList()
	{
		EnterRule_statementList();
		EnterRule("statementList", 11);
		var retval = new XAstParserRuleReturnScope("statementList");
		retval.Start = (IToken)input.LT(1);
		int statementList_StartIndex = input.Index;

		object root_0 = default(object);

		IToken LT63 = default(IToken);
		XAstParserRuleReturnScope statement62 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope statement64 = default(XAstParserRuleReturnScope);

		object LT63_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "statementList");
		DebugLocation(91, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 11)) { return retval; }

			// JavaScript.g:92:5: ( statement ( ( LT !)* statement )* )
			DebugEnterAlt(1);
			// JavaScript.g:92:7: statement ( ( LT !)* statement )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(92, 7);
			PushFollow(Follow._statement_in_statementList624);
			statement62=statement();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, statement62.Tree, statement62, retval);
			DebugLocation(92, 17);
			// JavaScript.g:92:17: ( ( LT !)* statement )*
			try { DebugEnterSubRule(28);
			while (true)
			{
				int alt28=2;
				try { DebugEnterDecision(28, false);
				try
				{
					alt28 = dfa28.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(28); }
				switch ( alt28 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g:92:18: ( LT !)* statement
					{
					DebugLocation(92, 20);
					// JavaScript.g:92:20: ( LT !)*
					try { DebugEnterSubRule(27);
					while (true)
					{
						int alt27=2;
						try { DebugEnterDecision(27, false);
						int LA27_0 = input.LA(1);

						if ((LA27_0==LT))
						{
							alt27 = 1;
						}


						} finally { DebugExitDecision(27); }
						switch ( alt27 )
						{
						case 1:
							DebugEnterAlt(1);
							// JavaScript.g:92:20: LT !
							{
							DebugLocation(92, 20);
							LT63=(IToken)new XToken((IToken)Match(input,LT,Follow._LT_in_statementList627), "LT"); if (state.failed) return retval;

							}
							break;

						default:
							goto loop27;
						}
					}

					loop27:
						;

					} finally { DebugExitSubRule(27); }

					DebugLocation(92, 23);
					PushFollow(Follow._statement_in_statementList631);
					statement64=statement();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, statement64.Tree, statement64, retval);

					}
					break;

				default:
					goto loop28;
				}
			}

			loop28:
				;

			} finally { DebugExitSubRule(28); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("statementList", 11);
			LeaveRule("statementList", 11);
			LeaveRule_statementList();
			if (state.backtracking > 0) { Memoize(input, 11, statementList_StartIndex); }

		}
		DebugLocation(93, 4);
		} finally { DebugExitRule(GrammarFileName, "statementList"); }
		return retval;

	}
	// $ANTLR end "statementList"

	partial void EnterRule_variableStatement();
	partial void LeaveRule_variableStatement();

	// $ANTLR start "variableStatement"
	// JavaScript.g:95:1: variableStatement : 'var' ( LT !)* variableDeclarationList statementEnd ;
	[GrammarRule("variableStatement")]
	public XAstParserRuleReturnScope variableStatement()
	{
		EnterRule_variableStatement();
		EnterRule("variableStatement", 12);
		var retval = new XAstParserRuleReturnScope("variableStatement");
		retval.Start = (IToken)input.LT(1);
		int variableStatement_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal65 = default(IToken);
		IToken LT66 = default(IToken);
		XAstParserRuleReturnScope variableDeclarationList67 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope statementEnd68 = default(XAstParserRuleReturnScope);

		object string_literal65_tree = default(object);
		object LT66_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "variableStatement");
		DebugLocation(95, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 12)) { return retval; }

			// JavaScript.g:96:5: ( 'var' ( LT !)* variableDeclarationList statementEnd )
			DebugEnterAlt(1);
			// JavaScript.g:96:7: 'var' ( LT !)* variableDeclarationList statementEnd
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(96, 7);
			string_literal65=(IToken)Match(input,103,Follow._103_in_variableStatement654); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal65_tree = (object)adaptor.Create(string_literal65, retval);
			adaptor.AddChild(root_0, string_literal65_tree);
			}
			DebugLocation(96, 15);
			// JavaScript.g:96:15: ( LT !)*
			try { DebugEnterSubRule(29);
			while (true)
			{
				int alt29=2;
				try { DebugEnterDecision(29, false);
				int LA29_0 = input.LA(1);

				if ((LA29_0==LT))
				{
					alt29 = 1;
				}


				} finally { DebugExitDecision(29); }
				switch ( alt29 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g:96:15: LT !
					{
					DebugLocation(96, 15);
					LT66=(IToken)new XToken((IToken)Match(input,LT,Follow._LT_in_variableStatement656), "LT"); if (state.failed) return retval;

					}
					break;

				default:
					goto loop29;
				}
			}

			loop29:
				;

			} finally { DebugExitSubRule(29); }

			DebugLocation(96, 18);
			PushFollow(Follow._variableDeclarationList_in_variableStatement660);
			variableDeclarationList67=variableDeclarationList();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, variableDeclarationList67.Tree, variableDeclarationList67, retval);
			DebugLocation(96, 42);
			PushFollow(Follow._statementEnd_in_variableStatement662);
			statementEnd68=statementEnd();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, statementEnd68.Tree, statementEnd68, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("variableStatement", 12);
			LeaveRule("variableStatement", 12);
			LeaveRule_variableStatement();
			if (state.backtracking > 0) { Memoize(input, 12, variableStatement_StartIndex); }

		}
		DebugLocation(97, 4);
		} finally { DebugExitRule(GrammarFileName, "variableStatement"); }
		return retval;

	}
	// $ANTLR end "variableStatement"

	partial void EnterRule_variableDeclarationList();
	partial void LeaveRule_variableDeclarationList();

	// $ANTLR start "variableDeclarationList"
	// JavaScript.g:99:1: variableDeclarationList : variableDeclaration ( ( LT !)* ',' ( LT !)* variableDeclaration )* ;
	[GrammarRule("variableDeclarationList")]
	public XAstParserRuleReturnScope variableDeclarationList()
	{
		EnterRule_variableDeclarationList();
		EnterRule("variableDeclarationList", 13);
		var retval = new XAstParserRuleReturnScope("variableDeclarationList");
		retval.Start = (IToken)input.LT(1);
		int variableDeclarationList_StartIndex = input.Index;

		object root_0 = default(object);

		IToken LT70 = default(IToken);
		IToken char_literal71 = default(IToken);
		IToken LT72 = default(IToken);
		XAstParserRuleReturnScope variableDeclaration69 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope variableDeclaration73 = default(XAstParserRuleReturnScope);

		object LT70_tree = default(object);
		object char_literal71_tree = default(object);
		object LT72_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "variableDeclarationList");
		DebugLocation(99, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 13)) { return retval; }

			// JavaScript.g:100:5: ( variableDeclaration ( ( LT !)* ',' ( LT !)* variableDeclaration )* )
			DebugEnterAlt(1);
			// JavaScript.g:100:7: variableDeclaration ( ( LT !)* ',' ( LT !)* variableDeclaration )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(100, 7);
			PushFollow(Follow._variableDeclaration_in_variableDeclarationList683);
			variableDeclaration69=variableDeclaration();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, variableDeclaration69.Tree, variableDeclaration69, retval);
			DebugLocation(100, 27);
			// JavaScript.g:100:27: ( ( LT !)* ',' ( LT !)* variableDeclaration )*
			try { DebugEnterSubRule(32);
			while (true)
			{
				int alt32=2;
				try { DebugEnterDecision(32, false);
				try
				{
					alt32 = dfa32.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(32); }
				switch ( alt32 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g:100:28: ( LT !)* ',' ( LT !)* variableDeclaration
					{
					DebugLocation(100, 30);
					// JavaScript.g:100:30: ( LT !)*
					try { DebugEnterSubRule(30);
					while (true)
					{
						int alt30=2;
						try { DebugEnterDecision(30, false);
						int LA30_0 = input.LA(1);

						if ((LA30_0==LT))
						{
							alt30 = 1;
						}


						} finally { DebugExitDecision(30); }
						switch ( alt30 )
						{
						case 1:
							DebugEnterAlt(1);
							// JavaScript.g:100:30: LT !
							{
							DebugLocation(100, 30);
							LT70=(IToken)new XToken((IToken)Match(input,LT,Follow._LT_in_variableDeclarationList686), "LT"); if (state.failed) return retval;

							}
							break;

						default:
							goto loop30;
						}
					}

					loop30:
						;

					} finally { DebugExitSubRule(30); }

					DebugLocation(100, 33);
					char_literal71=(IToken)Match(input,57,Follow._57_in_variableDeclarationList690); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal71_tree = (object)adaptor.Create(char_literal71, retval);
					adaptor.AddChild(root_0, char_literal71_tree);
					}
					DebugLocation(100, 39);
					// JavaScript.g:100:39: ( LT !)*
					try { DebugEnterSubRule(31);
					while (true)
					{
						int alt31=2;
						try { DebugEnterDecision(31, false);
						int LA31_0 = input.LA(1);

						if ((LA31_0==LT))
						{
							alt31 = 1;
						}


						} finally { DebugExitDecision(31); }
						switch ( alt31 )
						{
						case 1:
							DebugEnterAlt(1);
							// JavaScript.g:100:39: LT !
							{
							DebugLocation(100, 39);
							LT72=(IToken)new XToken((IToken)Match(input,LT,Follow._LT_in_variableDeclarationList692), "LT"); if (state.failed) return retval;

							}
							break;

						default:
							goto loop31;
						}
					}

					loop31:
						;

					} finally { DebugExitSubRule(31); }

					DebugLocation(100, 42);
					PushFollow(Follow._variableDeclaration_in_variableDeclarationList696);
					variableDeclaration73=variableDeclaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, variableDeclaration73.Tree, variableDeclaration73, retval);

					}
					break;

				default:
					goto loop32;
				}
			}

			loop32:
				;

			} finally { DebugExitSubRule(32); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("variableDeclarationList", 13);
			LeaveRule("variableDeclarationList", 13);
			LeaveRule_variableDeclarationList();
			if (state.backtracking > 0) { Memoize(input, 13, variableDeclarationList_StartIndex); }

		}
		DebugLocation(101, 4);
		} finally { DebugExitRule(GrammarFileName, "variableDeclarationList"); }
		return retval;

	}
	// $ANTLR end "variableDeclarationList"

	partial void EnterRule_variableDeclarationListNoIn();
	partial void LeaveRule_variableDeclarationListNoIn();

	// $ANTLR start "variableDeclarationListNoIn"
	// JavaScript.g:103:1: variableDeclarationListNoIn : variableDeclarationNoIn ( ( LT !)* ',' ( LT !)* variableDeclarationNoIn )* ;
	[GrammarRule("variableDeclarationListNoIn")]
	public XAstParserRuleReturnScope variableDeclarationListNoIn()
	{
		EnterRule_variableDeclarationListNoIn();
		EnterRule("variableDeclarationListNoIn", 14);
		var retval = new XAstParserRuleReturnScope("variableDeclarationListNoIn");
		retval.Start = (IToken)input.LT(1);
		int variableDeclarationListNoIn_StartIndex = input.Index;

		object root_0 = default(object);

		IToken LT75 = default(IToken);
		IToken char_literal76 = default(IToken);
		IToken LT77 = default(IToken);
		XAstParserRuleReturnScope variableDeclarationNoIn74 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope variableDeclarationNoIn78 = default(XAstParserRuleReturnScope);

		object LT75_tree = default(object);
		object char_literal76_tree = default(object);
		object LT77_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "variableDeclarationListNoIn");
		DebugLocation(103, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 14)) { return retval; }

			// JavaScript.g:104:5: ( variableDeclarationNoIn ( ( LT !)* ',' ( LT !)* variableDeclarationNoIn )* )
			DebugEnterAlt(1);
			// JavaScript.g:104:7: variableDeclarationNoIn ( ( LT !)* ',' ( LT !)* variableDeclarationNoIn )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(104, 7);
			PushFollow(Follow._variableDeclarationNoIn_in_variableDeclarationListNoIn719);
			variableDeclarationNoIn74=variableDeclarationNoIn();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, variableDeclarationNoIn74.Tree, variableDeclarationNoIn74, retval);
			DebugLocation(104, 31);
			// JavaScript.g:104:31: ( ( LT !)* ',' ( LT !)* variableDeclarationNoIn )*
			try { DebugEnterSubRule(35);
			while (true)
			{
				int alt35=2;
				try { DebugEnterDecision(35, false);
				try
				{
					alt35 = dfa35.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(35); }
				switch ( alt35 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g:104:32: ( LT !)* ',' ( LT !)* variableDeclarationNoIn
					{
					DebugLocation(104, 34);
					// JavaScript.g:104:34: ( LT !)*
					try { DebugEnterSubRule(33);
					while (true)
					{
						int alt33=2;
						try { DebugEnterDecision(33, false);
						int LA33_0 = input.LA(1);

						if ((LA33_0==LT))
						{
							alt33 = 1;
						}


						} finally { DebugExitDecision(33); }
						switch ( alt33 )
						{
						case 1:
							DebugEnterAlt(1);
							// JavaScript.g:104:34: LT !
							{
							DebugLocation(104, 34);
							LT75=(IToken)new XToken((IToken)Match(input,LT,Follow._LT_in_variableDeclarationListNoIn722), "LT"); if (state.failed) return retval;

							}
							break;

						default:
							goto loop33;
						}
					}

					loop33:
						;

					} finally { DebugExitSubRule(33); }

					DebugLocation(104, 37);
					char_literal76=(IToken)Match(input,57,Follow._57_in_variableDeclarationListNoIn726); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal76_tree = (object)adaptor.Create(char_literal76, retval);
					adaptor.AddChild(root_0, char_literal76_tree);
					}
					DebugLocation(104, 43);
					// JavaScript.g:104:43: ( LT !)*
					try { DebugEnterSubRule(34);
					while (true)
					{
						int alt34=2;
						try { DebugEnterDecision(34, false);
						int LA34_0 = input.LA(1);

						if ((LA34_0==LT))
						{
							alt34 = 1;
						}


						} finally { DebugExitDecision(34); }
						switch ( alt34 )
						{
						case 1:
							DebugEnterAlt(1);
							// JavaScript.g:104:43: LT !
							{
							DebugLocation(104, 43);
							LT77=(IToken)new XToken((IToken)Match(input,LT,Follow._LT_in_variableDeclarationListNoIn728), "LT"); if (state.failed) return retval;

							}
							break;

						default:
							goto loop34;
						}
					}

					loop34:
						;

					} finally { DebugExitSubRule(34); }

					DebugLocation(104, 46);
					PushFollow(Follow._variableDeclarationNoIn_in_variableDeclarationListNoIn732);
					variableDeclarationNoIn78=variableDeclarationNoIn();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, variableDeclarationNoIn78.Tree, variableDeclarationNoIn78, retval);

					}
					break;

				default:
					goto loop35;
				}
			}

			loop35:
				;

			} finally { DebugExitSubRule(35); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("variableDeclarationListNoIn", 14);
			LeaveRule("variableDeclarationListNoIn", 14);
			LeaveRule_variableDeclarationListNoIn();
			if (state.backtracking > 0) { Memoize(input, 14, variableDeclarationListNoIn_StartIndex); }

		}
		DebugLocation(105, 4);
		} finally { DebugExitRule(GrammarFileName, "variableDeclarationListNoIn"); }
		return retval;

	}
	// $ANTLR end "variableDeclarationListNoIn"

	partial void EnterRule_variableDeclaration();
	partial void LeaveRule_variableDeclaration();

	// $ANTLR start "variableDeclaration"
	// JavaScript.g:107:1: variableDeclaration : Identifier ( ( LT !)* initialiser )? ;
	[GrammarRule("variableDeclaration")]
	public XAstParserRuleReturnScope variableDeclaration()
	{
		EnterRule_variableDeclaration();
		EnterRule("variableDeclaration", 15);
		var retval = new XAstParserRuleReturnScope("variableDeclaration");
		retval.Start = (IToken)input.LT(1);
		int variableDeclaration_StartIndex = input.Index;

		object root_0 = default(object);

		IToken Identifier79 = default(IToken);
		IToken LT80 = default(IToken);
		XAstParserRuleReturnScope initialiser81 = default(XAstParserRuleReturnScope);

		object Identifier79_tree = default(object);
		object LT80_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "variableDeclaration");
		DebugLocation(107, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 15)) { return retval; }

			// JavaScript.g:108:5: ( Identifier ( ( LT !)* initialiser )? )
			DebugEnterAlt(1);
			// JavaScript.g:108:7: Identifier ( ( LT !)* initialiser )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(108, 7);
			Identifier79=(IToken)new XToken((IToken)Match(input,Identifier,Follow._Identifier_in_variableDeclaration755), "Identifier"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			Identifier79_tree = (object)adaptor.Create(Identifier79, retval);
			adaptor.AddChild(root_0, Identifier79_tree);
			}
			DebugLocation(108, 18);
			// JavaScript.g:108:18: ( ( LT !)* initialiser )?
			int alt37=2;
			try { DebugEnterSubRule(37);
			try { DebugEnterDecision(37, false);
			try
			{
				alt37 = dfa37.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(37); }
			switch (alt37)
			{
			case 1:
				DebugEnterAlt(1);
				// JavaScript.g:108:19: ( LT !)* initialiser
				{
				DebugLocation(108, 21);
				// JavaScript.g:108:21: ( LT !)*
				try { DebugEnterSubRule(36);
				while (true)
				{
					int alt36=2;
					try { DebugEnterDecision(36, false);
					int LA36_0 = input.LA(1);

					if ((LA36_0==LT))
					{
						alt36 = 1;
					}


					} finally { DebugExitDecision(36); }
					switch ( alt36 )
					{
					case 1:
						DebugEnterAlt(1);
						// JavaScript.g:108:21: LT !
						{
						DebugLocation(108, 21);
						LT80=(IToken)new XToken((IToken)Match(input,LT,Follow._LT_in_variableDeclaration758), "LT"); if (state.failed) return retval;

						}
						break;

					default:
						goto loop36;
					}
				}

				loop36:
					;

				} finally { DebugExitSubRule(36); }

				DebugLocation(108, 24);
				PushFollow(Follow._initialiser_in_variableDeclaration762);
				initialiser81=initialiser();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, initialiser81.Tree, initialiser81, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(37); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("variableDeclaration", 15);
			LeaveRule("variableDeclaration", 15);
			LeaveRule_variableDeclaration();
			if (state.backtracking > 0) { Memoize(input, 15, variableDeclaration_StartIndex); }

		}
		DebugLocation(109, 4);
		} finally { DebugExitRule(GrammarFileName, "variableDeclaration"); }
		return retval;

	}
	// $ANTLR end "variableDeclaration"

	partial void EnterRule_variableDeclarationNoIn();
	partial void LeaveRule_variableDeclarationNoIn();

	// $ANTLR start "variableDeclarationNoIn"
	// JavaScript.g:111:1: variableDeclarationNoIn : Identifier ( ( LT !)* initialiserNoIn )? ;
	[GrammarRule("variableDeclarationNoIn")]
	public XAstParserRuleReturnScope variableDeclarationNoIn()
	{
		EnterRule_variableDeclarationNoIn();
		EnterRule("variableDeclarationNoIn", 16);
		var retval = new XAstParserRuleReturnScope("variableDeclarationNoIn");
		retval.Start = (IToken)input.LT(1);
		int variableDeclarationNoIn_StartIndex = input.Index;

		object root_0 = default(object);

		IToken Identifier82 = default(IToken);
		IToken LT83 = default(IToken);
		XAstParserRuleReturnScope initialiserNoIn84 = default(XAstParserRuleReturnScope);

		object Identifier82_tree = default(object);
		object LT83_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "variableDeclarationNoIn");
		DebugLocation(111, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 16)) { return retval; }

			// JavaScript.g:112:5: ( Identifier ( ( LT !)* initialiserNoIn )? )
			DebugEnterAlt(1);
			// JavaScript.g:112:7: Identifier ( ( LT !)* initialiserNoIn )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(112, 7);
			Identifier82=(IToken)new XToken((IToken)Match(input,Identifier,Follow._Identifier_in_variableDeclarationNoIn785), "Identifier"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			Identifier82_tree = (object)adaptor.Create(Identifier82, retval);
			adaptor.AddChild(root_0, Identifier82_tree);
			}
			DebugLocation(112, 18);
			// JavaScript.g:112:18: ( ( LT !)* initialiserNoIn )?
			int alt39=2;
			try { DebugEnterSubRule(39);
			try { DebugEnterDecision(39, false);
			try
			{
				alt39 = dfa39.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(39); }
			switch (alt39)
			{
			case 1:
				DebugEnterAlt(1);
				// JavaScript.g:112:19: ( LT !)* initialiserNoIn
				{
				DebugLocation(112, 21);
				// JavaScript.g:112:21: ( LT !)*
				try { DebugEnterSubRule(38);
				while (true)
				{
					int alt38=2;
					try { DebugEnterDecision(38, false);
					int LA38_0 = input.LA(1);

					if ((LA38_0==LT))
					{
						alt38 = 1;
					}


					} finally { DebugExitDecision(38); }
					switch ( alt38 )
					{
					case 1:
						DebugEnterAlt(1);
						// JavaScript.g:112:21: LT !
						{
						DebugLocation(112, 21);
						LT83=(IToken)new XToken((IToken)Match(input,LT,Follow._LT_in_variableDeclarationNoIn788), "LT"); if (state.failed) return retval;

						}
						break;

					default:
						goto loop38;
					}
				}

				loop38:
					;

				} finally { DebugExitSubRule(38); }

				DebugLocation(112, 24);
				PushFollow(Follow._initialiserNoIn_in_variableDeclarationNoIn792);
				initialiserNoIn84=initialiserNoIn();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, initialiserNoIn84.Tree, initialiserNoIn84, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(39); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("variableDeclarationNoIn", 16);
			LeaveRule("variableDeclarationNoIn", 16);
			LeaveRule_variableDeclarationNoIn();
			if (state.backtracking > 0) { Memoize(input, 16, variableDeclarationNoIn_StartIndex); }

		}
		DebugLocation(113, 4);
		} finally { DebugExitRule(GrammarFileName, "variableDeclarationNoIn"); }
		return retval;

	}
	// $ANTLR end "variableDeclarationNoIn"

	partial void EnterRule_initialiser();
	partial void LeaveRule_initialiser();

	// $ANTLR start "initialiser"
	// JavaScript.g:115:1: initialiser : '=' ( LT !)* assignmentExpression ;
	[GrammarRule("initialiser")]
	public XAstParserRuleReturnScope initialiser()
	{
		EnterRule_initialiser();
		EnterRule("initialiser", 17);
		var retval = new XAstParserRuleReturnScope("initialiser");
		retval.Start = (IToken)input.LT(1);
		int initialiser_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal85 = default(IToken);
		IToken LT86 = default(IToken);
		XAstParserRuleReturnScope assignmentExpression87 = default(XAstParserRuleReturnScope);

		object char_literal85_tree = default(object);
		object LT86_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "initialiser");
		DebugLocation(115, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 17)) { return retval; }

			// JavaScript.g:116:5: ( '=' ( LT !)* assignmentExpression )
			DebugEnterAlt(1);
			// JavaScript.g:116:7: '=' ( LT !)* assignmentExpression
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(116, 7);
			char_literal85=(IToken)Match(input,70,Follow._70_in_initialiser815); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal85_tree = (object)adaptor.Create(char_literal85, retval);
			adaptor.AddChild(root_0, char_literal85_tree);
			}
			DebugLocation(116, 13);
			// JavaScript.g:116:13: ( LT !)*
			try { DebugEnterSubRule(40);
			while (true)
			{
				int alt40=2;
				try { DebugEnterDecision(40, false);
				int LA40_0 = input.LA(1);

				if ((LA40_0==LT))
				{
					alt40 = 1;
				}


				} finally { DebugExitDecision(40); }
				switch ( alt40 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g:116:13: LT !
					{
					DebugLocation(116, 13);
					LT86=(IToken)new XToken((IToken)Match(input,LT,Follow._LT_in_initialiser817), "LT"); if (state.failed) return retval;

					}
					break;

				default:
					goto loop40;
				}
			}

			loop40:
				;

			} finally { DebugExitSubRule(40); }

			DebugLocation(116, 16);
			PushFollow(Follow._assignmentExpression_in_initialiser821);
			assignmentExpression87=assignmentExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, assignmentExpression87.Tree, assignmentExpression87, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("initialiser", 17);
			LeaveRule("initialiser", 17);
			LeaveRule_initialiser();
			if (state.backtracking > 0) { Memoize(input, 17, initialiser_StartIndex); }

		}
		DebugLocation(117, 4);
		} finally { DebugExitRule(GrammarFileName, "initialiser"); }
		return retval;

	}
	// $ANTLR end "initialiser"

	partial void EnterRule_initialiserNoIn();
	partial void LeaveRule_initialiserNoIn();

	// $ANTLR start "initialiserNoIn"
	// JavaScript.g:119:1: initialiserNoIn : '=' ( LT !)* assignmentExpressionNoIn ;
	[GrammarRule("initialiserNoIn")]
	public XAstParserRuleReturnScope initialiserNoIn()
	{
		EnterRule_initialiserNoIn();
		EnterRule("initialiserNoIn", 18);
		var retval = new XAstParserRuleReturnScope("initialiserNoIn");
		retval.Start = (IToken)input.LT(1);
		int initialiserNoIn_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal88 = default(IToken);
		IToken LT89 = default(IToken);
		XAstParserRuleReturnScope assignmentExpressionNoIn90 = default(XAstParserRuleReturnScope);

		object char_literal88_tree = default(object);
		object LT89_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "initialiserNoIn");
		DebugLocation(119, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 18)) { return retval; }

			// JavaScript.g:120:5: ( '=' ( LT !)* assignmentExpressionNoIn )
			DebugEnterAlt(1);
			// JavaScript.g:120:7: '=' ( LT !)* assignmentExpressionNoIn
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(120, 7);
			char_literal88=(IToken)Match(input,70,Follow._70_in_initialiserNoIn842); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal88_tree = (object)adaptor.Create(char_literal88, retval);
			adaptor.AddChild(root_0, char_literal88_tree);
			}
			DebugLocation(120, 13);
			// JavaScript.g:120:13: ( LT !)*
			try { DebugEnterSubRule(41);
			while (true)
			{
				int alt41=2;
				try { DebugEnterDecision(41, false);
				int LA41_0 = input.LA(1);

				if ((LA41_0==LT))
				{
					alt41 = 1;
				}


				} finally { DebugExitDecision(41); }
				switch ( alt41 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g:120:13: LT !
					{
					DebugLocation(120, 13);
					LT89=(IToken)new XToken((IToken)Match(input,LT,Follow._LT_in_initialiserNoIn844), "LT"); if (state.failed) return retval;

					}
					break;

				default:
					goto loop41;
				}
			}

			loop41:
				;

			} finally { DebugExitSubRule(41); }

			DebugLocation(120, 16);
			PushFollow(Follow._assignmentExpressionNoIn_in_initialiserNoIn848);
			assignmentExpressionNoIn90=assignmentExpressionNoIn();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, assignmentExpressionNoIn90.Tree, assignmentExpressionNoIn90, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("initialiserNoIn", 18);
			LeaveRule("initialiserNoIn", 18);
			LeaveRule_initialiserNoIn();
			if (state.backtracking > 0) { Memoize(input, 18, initialiserNoIn_StartIndex); }

		}
		DebugLocation(121, 4);
		} finally { DebugExitRule(GrammarFileName, "initialiserNoIn"); }
		return retval;

	}
	// $ANTLR end "initialiserNoIn"

	partial void EnterRule_emptyStatement();
	partial void LeaveRule_emptyStatement();

	// $ANTLR start "emptyStatement"
	// JavaScript.g:123:1: emptyStatement : ';' ;
	[GrammarRule("emptyStatement")]
	public XAstParserRuleReturnScope emptyStatement()
	{
		EnterRule_emptyStatement();
		EnterRule("emptyStatement", 19);
		var retval = new XAstParserRuleReturnScope("emptyStatement");
		retval.Start = (IToken)input.LT(1);
		int emptyStatement_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal91 = default(IToken);

		object char_literal91_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "emptyStatement");
		DebugLocation(123, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 19)) { return retval; }

			// JavaScript.g:124:5: ( ';' )
			DebugEnterAlt(1);
			// JavaScript.g:124:7: ';'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(124, 7);
			char_literal91=(IToken)Match(input,65,Follow._65_in_emptyStatement869); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal91_tree = (object)adaptor.Create(char_literal91, retval);
			adaptor.AddChild(root_0, char_literal91_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("emptyStatement", 19);
			LeaveRule("emptyStatement", 19);
			LeaveRule_emptyStatement();
			if (state.backtracking > 0) { Memoize(input, 19, emptyStatement_StartIndex); }

		}
		DebugLocation(125, 4);
		} finally { DebugExitRule(GrammarFileName, "emptyStatement"); }
		return retval;

	}
	// $ANTLR end "emptyStatement"

	partial void EnterRule_expressionStatement();
	partial void LeaveRule_expressionStatement();

	// $ANTLR start "expressionStatement"
	// JavaScript.g:127:1: expressionStatement : expression statementEnd ;
	[GrammarRule("expressionStatement")]
	public XAstParserRuleReturnScope expressionStatement()
	{
		EnterRule_expressionStatement();
		EnterRule("expressionStatement", 20);
		var retval = new XAstParserRuleReturnScope("expressionStatement");
		retval.Start = (IToken)input.LT(1);
		int expressionStatement_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope expression92 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope statementEnd93 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "expressionStatement");
		DebugLocation(127, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 20)) { return retval; }

			// JavaScript.g:128:5: ( expression statementEnd )
			DebugEnterAlt(1);
			// JavaScript.g:128:7: expression statementEnd
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(128, 7);
			PushFollow(Follow._expression_in_expressionStatement890);
			expression92=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, expression92.Tree, expression92, retval);
			DebugLocation(128, 18);
			PushFollow(Follow._statementEnd_in_expressionStatement892);
			statementEnd93=statementEnd();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, statementEnd93.Tree, statementEnd93, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expressionStatement", 20);
			LeaveRule("expressionStatement", 20);
			LeaveRule_expressionStatement();
			if (state.backtracking > 0) { Memoize(input, 20, expressionStatement_StartIndex); }

		}
		DebugLocation(129, 4);
		} finally { DebugExitRule(GrammarFileName, "expressionStatement"); }
		return retval;

	}
	// $ANTLR end "expressionStatement"

	partial void EnterRule_ifStatement();
	partial void LeaveRule_ifStatement();

	// $ANTLR start "ifStatement"
	// JavaScript.g:131:1: ifStatement : 'if' ( LT !)* '(' ( LT !)* expression ( LT !)* RPAREN ( LT !)* statement ( ( LT !)* 'else' ( LT !)* statement )? ;
	[GrammarRule("ifStatement")]
	public XAstParserRuleReturnScope ifStatement()
	{
		EnterRule_ifStatement();
		EnterRule("ifStatement", 21);
		var retval = new XAstParserRuleReturnScope("ifStatement");
		retval.Start = (IToken)input.LT(1);
		int ifStatement_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal94 = default(IToken);
		IToken LT95 = default(IToken);
		IToken char_literal96 = default(IToken);
		IToken LT97 = default(IToken);
		IToken LT99 = default(IToken);
		IToken RPAREN100 = default(IToken);
		IToken LT101 = default(IToken);
		IToken LT103 = default(IToken);
		IToken string_literal104 = default(IToken);
		IToken LT105 = default(IToken);
		XAstParserRuleReturnScope expression98 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope statement102 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope statement106 = default(XAstParserRuleReturnScope);

		object string_literal94_tree = default(object);
		object LT95_tree = default(object);
		object char_literal96_tree = default(object);
		object LT97_tree = default(object);
		object LT99_tree = default(object);
		object RPAREN100_tree = default(object);
		object LT101_tree = default(object);
		object LT103_tree = default(object);
		object string_literal104_tree = default(object);
		object LT105_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "ifStatement");
		DebugLocation(131, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 21)) { return retval; }

			// JavaScript.g:132:5: ( 'if' ( LT !)* '(' ( LT !)* expression ( LT !)* RPAREN ( LT !)* statement ( ( LT !)* 'else' ( LT !)* statement )? )
			DebugEnterAlt(1);
			// JavaScript.g:132:7: 'if' ( LT !)* '(' ( LT !)* expression ( LT !)* RPAREN ( LT !)* statement ( ( LT !)* 'else' ( LT !)* statement )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(132, 7);
			string_literal94=(IToken)Match(input,94,Follow._94_in_ifStatement913); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal94_tree = (object)adaptor.Create(string_literal94, retval);
			adaptor.AddChild(root_0, string_literal94_tree);
			}
			DebugLocation(132, 14);
			// JavaScript.g:132:14: ( LT !)*
			try { DebugEnterSubRule(42);
			while (true)
			{
				int alt42=2;
				try { DebugEnterDecision(42, false);
				int LA42_0 = input.LA(1);

				if ((LA42_0==LT))
				{
					alt42 = 1;
				}


				} finally { DebugExitDecision(42); }
				switch ( alt42 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g:132:14: LT !
					{
					DebugLocation(132, 14);
					LT95=(IToken)new XToken((IToken)Match(input,LT,Follow._LT_in_ifStatement915), "LT"); if (state.failed) return retval;

					}
					break;

				default:
					goto loop42;
				}
			}

			loop42:
				;

			} finally { DebugExitSubRule(42); }

			DebugLocation(132, 17);
			char_literal96=(IToken)Match(input,51,Follow._51_in_ifStatement919); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal96_tree = (object)adaptor.Create(char_literal96, retval);
			adaptor.AddChild(root_0, char_literal96_tree);
			}
			DebugLocation(132, 23);
			// JavaScript.g:132:23: ( LT !)*
			try { DebugEnterSubRule(43);
			while (true)
			{
				int alt43=2;
				try { DebugEnterDecision(43, false);
				int LA43_0 = input.LA(1);

				if ((LA43_0==LT))
				{
					alt43 = 1;
				}


				} finally { DebugExitDecision(43); }
				switch ( alt43 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g:132:23: LT !
					{
					DebugLocation(132, 23);
					LT97=(IToken)new XToken((IToken)Match(input,LT,Follow._LT_in_ifStatement921), "LT"); if (state.failed) return retval;

					}
					break;

				default:
					goto loop43;
				}
			}

			loop43:
				;

			} finally { DebugExitSubRule(43); }

			DebugLocation(132, 26);
			PushFollow(Follow._expression_in_ifStatement925);
			expression98=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, expression98.Tree, expression98, retval);
			DebugLocation(132, 39);
			// JavaScript.g:132:39: ( LT !)*
			try { DebugEnterSubRule(44);
			while (true)
			{
				int alt44=2;
				try { DebugEnterDecision(44, false);
				int LA44_0 = input.LA(1);

				if ((LA44_0==LT))
				{
					alt44 = 1;
				}


				} finally { DebugExitDecision(44); }
				switch ( alt44 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g:132:39: LT !
					{
					DebugLocation(132, 39);
					LT99=(IToken)new XToken((IToken)Match(input,LT,Follow._LT_in_ifStatement927), "LT"); if (state.failed) return retval;

					}
					break;

				default:
					goto loop44;
				}
			}

			loop44:
				;

			} finally { DebugExitSubRule(44); }

			DebugLocation(132, 42);
			RPAREN100=(IToken)new XToken((IToken)Match(input,RPAREN,Follow._RPAREN_in_ifStatement931), "RPAREN"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			RPAREN100_tree = (object)adaptor.Create(RPAREN100, retval);
			adaptor.AddChild(root_0, RPAREN100_tree);
			}
			DebugLocation(132, 51);
			// JavaScript.g:132:51: ( LT !)*
			try { DebugEnterSubRule(45);
			while (true)
			{
				int alt45=2;
				try { DebugEnterDecision(45, false);
				int LA45_0 = input.LA(1);

				if ((LA45_0==LT))
				{
					alt45 = 1;
				}


				} finally { DebugExitDecision(45); }
				switch ( alt45 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g:132:51: LT !
					{
					DebugLocation(132, 51);
					LT101=(IToken)new XToken((IToken)Match(input,LT,Follow._LT_in_ifStatement933), "LT"); if (state.failed) return retval;

					}
					break;

				default:
					goto loop45;
				}
			}

			loop45:
				;

			} finally { DebugExitSubRule(45); }

			DebugLocation(132, 54);
			PushFollow(Follow._statement_in_ifStatement937);
			statement102=statement();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, statement102.Tree, statement102, retval);
			DebugLocation(132, 64);
			// JavaScript.g:132:64: ( ( LT !)* 'else' ( LT !)* statement )?
			int alt48=2;
			try { DebugEnterSubRule(48);
			try { DebugEnterDecision(48, false);
			int LA48_0 = input.LA(1);

			if ((LA48_0==LT))
			{
				int LA48_1 = input.LA(2);

				if ((EvaluatePredicate(synpred64_JavaScript_fragment)))
				{
					alt48 = 1;
				}
			}
			else if ((LA48_0==90))
			{
				int LA48_2 = input.LA(2);

				if ((EvaluatePredicate(synpred64_JavaScript_fragment)))
				{
					alt48 = 1;
				}
			}
			} finally { DebugExitDecision(48); }
			switch (alt48)
			{
			case 1:
				DebugEnterAlt(1);
				// JavaScript.g:132:65: ( LT !)* 'else' ( LT !)* statement
				{
				DebugLocation(132, 67);
				// JavaScript.g:132:67: ( LT !)*
				try { DebugEnterSubRule(46);
				while (true)
				{
					int alt46=2;
					try { DebugEnterDecision(46, false);
					int LA46_0 = input.LA(1);

					if ((LA46_0==LT))
					{
						alt46 = 1;
					}


					} finally { DebugExitDecision(46); }
					switch ( alt46 )
					{
					case 1:
						DebugEnterAlt(1);
						// JavaScript.g:132:67: LT !
						{
						DebugLocation(132, 67);
						LT103=(IToken)new XToken((IToken)Match(input,LT,Follow._LT_in_ifStatement940), "LT"); if (state.failed) return retval;

						}
						break;

					default:
						goto loop46;
					}
				}

				loop46:
					;

				} finally { DebugExitSubRule(46); }

				DebugLocation(132, 70);
				string_literal104=(IToken)Match(input,90,Follow._90_in_ifStatement944); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal104_tree = (object)adaptor.Create(string_literal104, retval);
				adaptor.AddChild(root_0, string_literal104_tree);
				}
				DebugLocation(132, 79);
				// JavaScript.g:132:79: ( LT !)*
				try { DebugEnterSubRule(47);
				while (true)
				{
					int alt47=2;
					try { DebugEnterDecision(47, false);
					int LA47_0 = input.LA(1);

					if ((LA47_0==LT))
					{
						alt47 = 1;
					}


					} finally { DebugExitDecision(47); }
					switch ( alt47 )
					{
					case 1:
						DebugEnterAlt(1);
						// JavaScript.g:132:79: LT !
						{
						DebugLocation(132, 79);
						LT105=(IToken)new XToken((IToken)Match(input,LT,Follow._LT_in_ifStatement946), "LT"); if (state.failed) return retval;

						}
						break;

					default:
						goto loop47;
					}
				}

				loop47:
					;

				} finally { DebugExitSubRule(47); }

				DebugLocation(132, 82);
				PushFollow(Follow._statement_in_ifStatement950);
				statement106=statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, statement106.Tree, statement106, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(48); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("ifStatement", 21);
			LeaveRule("ifStatement", 21);
			LeaveRule_ifStatement();
			if (state.backtracking > 0) { Memoize(input, 21, ifStatement_StartIndex); }

		}
		DebugLocation(133, 4);
		} finally { DebugExitRule(GrammarFileName, "ifStatement"); }
		return retval;

	}
	// $ANTLR end "ifStatement"

	partial void EnterRule_iterationStatement();
	partial void LeaveRule_iterationStatement();

	// $ANTLR start "iterationStatement"
	// JavaScript.g:135:1: iterationStatement : ( doWhileStatement | whileStatement | forStatement | forInStatement );
	[GrammarRule("iterationStatement")]
	public XAstParserRuleReturnScope iterationStatement()
	{
		EnterRule_iterationStatement();
		EnterRule("iterationStatement", 22);
		var retval = new XAstParserRuleReturnScope("iterationStatement");
		retval.Start = (IToken)input.LT(1);
		int iterationStatement_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope doWhileStatement107 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope whileStatement108 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope forStatement109 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope forInStatement110 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "iterationStatement");
		DebugLocation(135, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 22)) { return retval; }

			// JavaScript.g:136:5: ( doWhileStatement | whileStatement | forStatement | forInStatement )
			int alt49=4;
			try { DebugEnterDecision(49, false);
			switch (input.LA(1))
			{
			case 89:
				{
				alt49 = 1;
				}
				break;
			case 105:
				{
				alt49 = 2;
				}
				break;
			case 92:
				{
				int LA49_3 = input.LA(2);

				if ((EvaluatePredicate(synpred67_JavaScript_fragment)))
				{
					alt49 = 3;
				}
				else if ((true))
				{
					alt49 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 49, 3, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 49, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(49); }
			switch (alt49)
			{
			case 1:
				DebugEnterAlt(1);
				// JavaScript.g:136:7: doWhileStatement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(136, 7);
				PushFollow(Follow._doWhileStatement_in_iterationStatement973);
				doWhileStatement107=doWhileStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, doWhileStatement107.Tree, doWhileStatement107, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// JavaScript.g:137:7: whileStatement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(137, 7);
				PushFollow(Follow._whileStatement_in_iterationStatement981);
				whileStatement108=whileStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, whileStatement108.Tree, whileStatement108, retval);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// JavaScript.g:138:7: forStatement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(138, 7);
				PushFollow(Follow._forStatement_in_iterationStatement989);
				forStatement109=forStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, forStatement109.Tree, forStatement109, retval);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// JavaScript.g:139:7: forInStatement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(139, 7);
				PushFollow(Follow._forInStatement_in_iterationStatement997);
				forInStatement110=forInStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, forInStatement110.Tree, forInStatement110, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("iterationStatement", 22);
			LeaveRule("iterationStatement", 22);
			LeaveRule_iterationStatement();
			if (state.backtracking > 0) { Memoize(input, 22, iterationStatement_StartIndex); }

		}
		DebugLocation(140, 4);
		} finally { DebugExitRule(GrammarFileName, "iterationStatement"); }
		return retval;

	}
	// $ANTLR end "iterationStatement"

	partial void EnterRule_doWhileStatement();
	partial void LeaveRule_doWhileStatement();

	// $ANTLR start "doWhileStatement"
	// JavaScript.g:142:1: doWhileStatement : 'do' ( LT !)* statement ( LT !)* 'while' ( LT !)* '(' expression RPAREN statementEnd ;
	[GrammarRule("doWhileStatement")]
	public XAstParserRuleReturnScope doWhileStatement()
	{
		EnterRule_doWhileStatement();
		EnterRule("doWhileStatement", 23);
		var retval = new XAstParserRuleReturnScope("doWhileStatement");
		retval.Start = (IToken)input.LT(1);
		int doWhileStatement_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal111 = default(IToken);
		IToken LT112 = default(IToken);
		IToken LT114 = default(IToken);
		IToken string_literal115 = default(IToken);
		IToken LT116 = default(IToken);
		IToken char_literal117 = default(IToken);
		IToken RPAREN119 = default(IToken);
		XAstParserRuleReturnScope statement113 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope expression118 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope statementEnd120 = default(XAstParserRuleReturnScope);

		object string_literal111_tree = default(object);
		object LT112_tree = default(object);
		object LT114_tree = default(object);
		object string_literal115_tree = default(object);
		object LT116_tree = default(object);
		object char_literal117_tree = default(object);
		object RPAREN119_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "doWhileStatement");
		DebugLocation(142, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 23)) { return retval; }

			// JavaScript.g:143:5: ( 'do' ( LT !)* statement ( LT !)* 'while' ( LT !)* '(' expression RPAREN statementEnd )
			DebugEnterAlt(1);
			// JavaScript.g:143:7: 'do' ( LT !)* statement ( LT !)* 'while' ( LT !)* '(' expression RPAREN statementEnd
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(143, 7);
			string_literal111=(IToken)Match(input,89,Follow._89_in_doWhileStatement1018); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal111_tree = (object)adaptor.Create(string_literal111, retval);
			adaptor.AddChild(root_0, string_literal111_tree);
			}
			DebugLocation(143, 14);
			// JavaScript.g:143:14: ( LT !)*
			try { DebugEnterSubRule(50);
			while (true)
			{
				int alt50=2;
				try { DebugEnterDecision(50, false);
				int LA50_0 = input.LA(1);

				if ((LA50_0==LT))
				{
					alt50 = 1;
				}


				} finally { DebugExitDecision(50); }
				switch ( alt50 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g:143:14: LT !
					{
					DebugLocation(143, 14);
					LT112=(IToken)new XToken((IToken)Match(input,LT,Follow._LT_in_doWhileStatement1020), "LT"); if (state.failed) return retval;

					}
					break;

				default:
					goto loop50;
				}
			}

			loop50:
				;

			} finally { DebugExitSubRule(50); }

			DebugLocation(143, 17);
			PushFollow(Follow._statement_in_doWhileStatement1024);
			statement113=statement();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, statement113.Tree, statement113, retval);
			DebugLocation(143, 29);
			// JavaScript.g:143:29: ( LT !)*
			try { DebugEnterSubRule(51);
			while (true)
			{
				int alt51=2;
				try { DebugEnterDecision(51, false);
				int LA51_0 = input.LA(1);

				if ((LA51_0==LT))
				{
					alt51 = 1;
				}


				} finally { DebugExitDecision(51); }
				switch ( alt51 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g:143:29: LT !
					{
					DebugLocation(143, 29);
					LT114=(IToken)new XToken((IToken)Match(input,LT,Follow._LT_in_doWhileStatement1026), "LT"); if (state.failed) return retval;

					}
					break;

				default:
					goto loop51;
				}
			}

			loop51:
				;

			} finally { DebugExitSubRule(51); }

			DebugLocation(143, 32);
			string_literal115=(IToken)Match(input,105,Follow._105_in_doWhileStatement1030); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal115_tree = (object)adaptor.Create(string_literal115, retval);
			adaptor.AddChild(root_0, string_literal115_tree);
			}
			DebugLocation(143, 42);
			// JavaScript.g:143:42: ( LT !)*
			try { DebugEnterSubRule(52);
			while (true)
			{
				int alt52=2;
				try { DebugEnterDecision(52, false);
				int LA52_0 = input.LA(1);

				if ((LA52_0==LT))
				{
					alt52 = 1;
				}


				} finally { DebugExitDecision(52); }
				switch ( alt52 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g:143:42: LT !
					{
					DebugLocation(143, 42);
					LT116=(IToken)new XToken((IToken)Match(input,LT,Follow._LT_in_doWhileStatement1032), "LT"); if (state.failed) return retval;

					}
					break;

				default:
					goto loop52;
				}
			}

			loop52:
				;

			} finally { DebugExitSubRule(52); }

			DebugLocation(143, 45);
			char_literal117=(IToken)Match(input,51,Follow._51_in_doWhileStatement1036); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal117_tree = (object)adaptor.Create(char_literal117, retval);
			adaptor.AddChild(root_0, char_literal117_tree);
			}
			DebugLocation(143, 49);
			PushFollow(Follow._expression_in_doWhileStatement1038);
			expression118=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, expression118.Tree, expression118, retval);
			DebugLocation(143, 60);
			RPAREN119=(IToken)new XToken((IToken)Match(input,RPAREN,Follow._RPAREN_in_doWhileStatement1040), "RPAREN"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			RPAREN119_tree = (object)adaptor.Create(RPAREN119, retval);
			adaptor.AddChild(root_0, RPAREN119_tree);
			}
			DebugLocation(143, 67);
			PushFollow(Follow._statementEnd_in_doWhileStatement1042);
			statementEnd120=statementEnd();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, statementEnd120.Tree, statementEnd120, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("doWhileStatement", 23);
			LeaveRule("doWhileStatement", 23);
			LeaveRule_doWhileStatement();
			if (state.backtracking > 0) { Memoize(input, 23, doWhileStatement_StartIndex); }

		}
		DebugLocation(144, 4);
		} finally { DebugExitRule(GrammarFileName, "doWhileStatement"); }
		return retval;

	}
	// $ANTLR end "doWhileStatement"

	partial void EnterRule_whileStatement();
	partial void LeaveRule_whileStatement();

	// $ANTLR start "whileStatement"
	// JavaScript.g:146:1: whileStatement : 'while' ( LT !)* '(' ( LT !)* expression ( LT !)* RPAREN ( LT !)* statement ;
	[GrammarRule("whileStatement")]
	public XAstParserRuleReturnScope whileStatement()
	{
		EnterRule_whileStatement();
		EnterRule("whileStatement", 24);
		var retval = new XAstParserRuleReturnScope("whileStatement");
		retval.Start = (IToken)input.LT(1);
		int whileStatement_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal121 = default(IToken);
		IToken LT122 = default(IToken);
		IToken char_literal123 = default(IToken);
		IToken LT124 = default(IToken);
		IToken LT126 = default(IToken);
		IToken RPAREN127 = default(IToken);
		IToken LT128 = default(IToken);
		XAstParserRuleReturnScope expression125 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope statement129 = default(XAstParserRuleReturnScope);

		object string_literal121_tree = default(object);
		object LT122_tree = default(object);
		object char_literal123_tree = default(object);
		object LT124_tree = default(object);
		object LT126_tree = default(object);
		object RPAREN127_tree = default(object);
		object LT128_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "whileStatement");
		DebugLocation(146, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 24)) { return retval; }

			// JavaScript.g:147:5: ( 'while' ( LT !)* '(' ( LT !)* expression ( LT !)* RPAREN ( LT !)* statement )
			DebugEnterAlt(1);
			// JavaScript.g:147:7: 'while' ( LT !)* '(' ( LT !)* expression ( LT !)* RPAREN ( LT !)* statement
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(147, 7);
			string_literal121=(IToken)Match(input,105,Follow._105_in_whileStatement1063); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal121_tree = (object)adaptor.Create(string_literal121, retval);
			adaptor.AddChild(root_0, string_literal121_tree);
			}
			DebugLocation(147, 17);
			// JavaScript.g:147:17: ( LT !)*
			try { DebugEnterSubRule(53);
			while (true)
			{
				int alt53=2;
				try { DebugEnterDecision(53, false);
				int LA53_0 = input.LA(1);

				if ((LA53_0==LT))
				{
					alt53 = 1;
				}


				} finally { DebugExitDecision(53); }
				switch ( alt53 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g:147:17: LT !
					{
					DebugLocation(147, 17);
					LT122=(IToken)new XToken((IToken)Match(input,LT,Follow._LT_in_whileStatement1065), "LT"); if (state.failed) return retval;

					}
					break;

				default:
					goto loop53;
				}
			}

			loop53:
				;

			} finally { DebugExitSubRule(53); }

			DebugLocation(147, 20);
			char_literal123=(IToken)Match(input,51,Follow._51_in_whileStatement1069); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal123_tree = (object)adaptor.Create(char_literal123, retval);
			adaptor.AddChild(root_0, char_literal123_tree);
			}
			DebugLocation(147, 26);
			// JavaScript.g:147:26: ( LT !)*
			try { DebugEnterSubRule(54);
			while (true)
			{
				int alt54=2;
				try { DebugEnterDecision(54, false);
				int LA54_0 = input.LA(1);

				if ((LA54_0==LT))
				{
					alt54 = 1;
				}


				} finally { DebugExitDecision(54); }
				switch ( alt54 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g:147:26: LT !
					{
					DebugLocation(147, 26);
					LT124=(IToken)new XToken((IToken)Match(input,LT,Follow._LT_in_whileStatement1071), "LT"); if (state.failed) return retval;

					}
					break;

				default:
					goto loop54;
				}
			}

			loop54:
				;

			} finally { DebugExitSubRule(54); }

			DebugLocation(147, 29);
			PushFollow(Follow._expression_in_whileStatement1075);
			expression125=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, expression125.Tree, expression125, retval);
			DebugLocation(147, 42);
			// JavaScript.g:147:42: ( LT !)*
			try { DebugEnterSubRule(55);
			while (true)
			{
				int alt55=2;
				try { DebugEnterDecision(55, false);
				int LA55_0 = input.LA(1);

				if ((LA55_0==LT))
				{
					alt55 = 1;
				}


				} finally { DebugExitDecision(55); }
				switch ( alt55 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g:147:42: LT !
					{
					DebugLocation(147, 42);
					LT126=(IToken)new XToken((IToken)Match(input,LT,Follow._LT_in_whileStatement1077), "LT"); if (state.failed) return retval;

					}
					break;

				default:
					goto loop55;
				}
			}

			loop55:
				;

			} finally { DebugExitSubRule(55); }

			DebugLocation(147, 45);
			RPAREN127=(IToken)new XToken((IToken)Match(input,RPAREN,Follow._RPAREN_in_whileStatement1081), "RPAREN"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			RPAREN127_tree = (object)adaptor.Create(RPAREN127, retval);
			adaptor.AddChild(root_0, RPAREN127_tree);
			}
			DebugLocation(147, 54);
			// JavaScript.g:147:54: ( LT !)*
			try { DebugEnterSubRule(56);
			while (true)
			{
				int alt56=2;
				try { DebugEnterDecision(56, false);
				int LA56_0 = input.LA(1);

				if ((LA56_0==LT))
				{
					alt56 = 1;
				}


				} finally { DebugExitDecision(56); }
				switch ( alt56 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g:147:54: LT !
					{
					DebugLocation(147, 54);
					LT128=(IToken)new XToken((IToken)Match(input,LT,Follow._LT_in_whileStatement1083), "LT"); if (state.failed) return retval;

					}
					break;

				default:
					goto loop56;
				}
			}

			loop56:
				;

			} finally { DebugExitSubRule(56); }

			DebugLocation(147, 57);
			PushFollow(Follow._statement_in_whileStatement1087);
			statement129=statement();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, statement129.Tree, statement129, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("whileStatement", 24);
			LeaveRule("whileStatement", 24);
			LeaveRule_whileStatement();
			if (state.backtracking > 0) { Memoize(input, 24, whileStatement_StartIndex); }

		}
		DebugLocation(148, 4);
		} finally { DebugExitRule(GrammarFileName, "whileStatement"); }
		return retval;

	}
	// $ANTLR end "whileStatement"

	partial void EnterRule_forStatement();
	partial void LeaveRule_forStatement();

	// $ANTLR start "forStatement"
	// JavaScript.g:150:1: forStatement : 'for' ( LT !)* '(' ( ( LT !)* forStatementInitialiserPart )? ( LT !)* ';' ( ( LT !)* expression )? ( LT !)* ';' ( ( LT !)* expression )? ( LT !)* RPAREN ( LT !)* statement ;
	[GrammarRule("forStatement")]
	public XAstParserRuleReturnScope forStatement()
	{
		EnterRule_forStatement();
		EnterRule("forStatement", 25);
		var retval = new XAstParserRuleReturnScope("forStatement");
		retval.Start = (IToken)input.LT(1);
		int forStatement_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal130 = default(IToken);
		IToken LT131 = default(IToken);
		IToken char_literal132 = default(IToken);
		IToken LT133 = default(IToken);
		IToken LT135 = default(IToken);
		IToken char_literal136 = default(IToken);
		IToken LT137 = default(IToken);
		IToken LT139 = default(IToken);
		IToken char_literal140 = default(IToken);
		IToken LT141 = default(IToken);
		IToken LT143 = default(IToken);
		IToken RPAREN144 = default(IToken);
		IToken LT145 = default(IToken);
		XAstParserRuleReturnScope forStatementInitialiserPart134 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope expression138 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope expression142 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope statement146 = default(XAstParserRuleReturnScope);

		object string_literal130_tree = default(object);
		object LT131_tree = default(object);
		object char_literal132_tree = default(object);
		object LT133_tree = default(object);
		object LT135_tree = default(object);
		object char_literal136_tree = default(object);
		object LT137_tree = default(object);
		object LT139_tree = default(object);
		object char_literal140_tree = default(object);
		object LT141_tree = default(object);
		object LT143_tree = default(object);
		object RPAREN144_tree = default(object);
		object LT145_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "forStatement");
		DebugLocation(150, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 25)) { return retval; }

			// JavaScript.g:151:5: ( 'for' ( LT !)* '(' ( ( LT !)* forStatementInitialiserPart )? ( LT !)* ';' ( ( LT !)* expression )? ( LT !)* ';' ( ( LT !)* expression )? ( LT !)* RPAREN ( LT !)* statement )
			DebugEnterAlt(1);
			// JavaScript.g:151:7: 'for' ( LT !)* '(' ( ( LT !)* forStatementInitialiserPart )? ( LT !)* ';' ( ( LT !)* expression )? ( LT !)* ';' ( ( LT !)* expression )? ( LT !)* RPAREN ( LT !)* statement
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(151, 7);
			string_literal130=(IToken)Match(input,92,Follow._92_in_forStatement1108); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal130_tree = (object)adaptor.Create(string_literal130, retval);
			adaptor.AddChild(root_0, string_literal130_tree);
			}
			DebugLocation(151, 15);
			// JavaScript.g:151:15: ( LT !)*
			try { DebugEnterSubRule(57);
			while (true)
			{
				int alt57=2;
				try { DebugEnterDecision(57, false);
				int LA57_0 = input.LA(1);

				if ((LA57_0==LT))
				{
					alt57 = 1;
				}


				} finally { DebugExitDecision(57); }
				switch ( alt57 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g:151:15: LT !
					{
					DebugLocation(151, 15);
					LT131=(IToken)new XToken((IToken)Match(input,LT,Follow._LT_in_forStatement1110), "LT"); if (state.failed) return retval;

					}
					break;

				default:
					goto loop57;
				}
			}

			loop57:
				;

			} finally { DebugExitSubRule(57); }

			DebugLocation(151, 18);
			char_literal132=(IToken)Match(input,51,Follow._51_in_forStatement1114); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal132_tree = (object)adaptor.Create(char_literal132, retval);
			adaptor.AddChild(root_0, char_literal132_tree);
			}
			DebugLocation(151, 22);
			// JavaScript.g:151:22: ( ( LT !)* forStatementInitialiserPart )?
			int alt59=2;
			try { DebugEnterSubRule(59);
			try { DebugEnterDecision(59, false);
			try
			{
				alt59 = dfa59.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(59); }
			switch (alt59)
			{
			case 1:
				DebugEnterAlt(1);
				// JavaScript.g:151:23: ( LT !)* forStatementInitialiserPart
				{
				DebugLocation(151, 25);
				// JavaScript.g:151:25: ( LT !)*
				try { DebugEnterSubRule(58);
				while (true)
				{
					int alt58=2;
					try { DebugEnterDecision(58, false);
					int LA58_0 = input.LA(1);

					if ((LA58_0==LT))
					{
						alt58 = 1;
					}


					} finally { DebugExitDecision(58); }
					switch ( alt58 )
					{
					case 1:
						DebugEnterAlt(1);
						// JavaScript.g:151:25: LT !
						{
						DebugLocation(151, 25);
						LT133=(IToken)new XToken((IToken)Match(input,LT,Follow._LT_in_forStatement1117), "LT"); if (state.failed) return retval;

						}
						break;

					default:
						goto loop58;
					}
				}

				loop58:
					;

				} finally { DebugExitSubRule(58); }

				DebugLocation(151, 28);
				PushFollow(Follow._forStatementInitialiserPart_in_forStatement1121);
				forStatementInitialiserPart134=forStatementInitialiserPart();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, forStatementInitialiserPart134.Tree, forStatementInitialiserPart134, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(59); }

			DebugLocation(151, 60);
			// JavaScript.g:151:60: ( LT !)*
			try { DebugEnterSubRule(60);
			while (true)
			{
				int alt60=2;
				try { DebugEnterDecision(60, false);
				int LA60_0 = input.LA(1);

				if ((LA60_0==LT))
				{
					alt60 = 1;
				}


				} finally { DebugExitDecision(60); }
				switch ( alt60 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g:151:60: LT !
					{
					DebugLocation(151, 60);
					LT135=(IToken)new XToken((IToken)Match(input,LT,Follow._LT_in_forStatement1125), "LT"); if (state.failed) return retval;

					}
					break;

				default:
					goto loop60;
				}
			}

			loop60:
				;

			} finally { DebugExitSubRule(60); }

			DebugLocation(151, 63);
			char_literal136=(IToken)Match(input,65,Follow._65_in_forStatement1129); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal136_tree = (object)adaptor.Create(char_literal136, retval);
			adaptor.AddChild(root_0, char_literal136_tree);
			}
			DebugLocation(151, 67);
			// JavaScript.g:151:67: ( ( LT !)* expression )?
			int alt62=2;
			try { DebugEnterSubRule(62);
			try { DebugEnterDecision(62, false);
			try
			{
				alt62 = dfa62.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(62); }
			switch (alt62)
			{
			case 1:
				DebugEnterAlt(1);
				// JavaScript.g:151:68: ( LT !)* expression
				{
				DebugLocation(151, 70);
				// JavaScript.g:151:70: ( LT !)*
				try { DebugEnterSubRule(61);
				while (true)
				{
					int alt61=2;
					try { DebugEnterDecision(61, false);
					int LA61_0 = input.LA(1);

					if ((LA61_0==LT))
					{
						alt61 = 1;
					}


					} finally { DebugExitDecision(61); }
					switch ( alt61 )
					{
					case 1:
						DebugEnterAlt(1);
						// JavaScript.g:151:70: LT !
						{
						DebugLocation(151, 70);
						LT137=(IToken)new XToken((IToken)Match(input,LT,Follow._LT_in_forStatement1132), "LT"); if (state.failed) return retval;

						}
						break;

					default:
						goto loop61;
					}
				}

				loop61:
					;

				} finally { DebugExitSubRule(61); }

				DebugLocation(151, 73);
				PushFollow(Follow._expression_in_forStatement1136);
				expression138=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression138.Tree, expression138, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(62); }

			DebugLocation(151, 88);
			// JavaScript.g:151:88: ( LT !)*
			try { DebugEnterSubRule(63);
			while (true)
			{
				int alt63=2;
				try { DebugEnterDecision(63, false);
				int LA63_0 = input.LA(1);

				if ((LA63_0==LT))
				{
					alt63 = 1;
				}


				} finally { DebugExitDecision(63); }
				switch ( alt63 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g:151:88: LT !
					{
					DebugLocation(151, 88);
					LT139=(IToken)new XToken((IToken)Match(input,LT,Follow._LT_in_forStatement1140), "LT"); if (state.failed) return retval;

					}
					break;

				default:
					goto loop63;
				}
			}

			loop63:
				;

			} finally { DebugExitSubRule(63); }

			DebugLocation(151, 91);
			char_literal140=(IToken)Match(input,65,Follow._65_in_forStatement1144); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal140_tree = (object)adaptor.Create(char_literal140, retval);
			adaptor.AddChild(root_0, char_literal140_tree);
			}
			DebugLocation(151, 95);
			// JavaScript.g:151:95: ( ( LT !)* expression )?
			int alt65=2;
			try { DebugEnterSubRule(65);
			try { DebugEnterDecision(65, false);
			try
			{
				alt65 = dfa65.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(65); }
			switch (alt65)
			{
			case 1:
				DebugEnterAlt(1);
				// JavaScript.g:151:96: ( LT !)* expression
				{
				DebugLocation(151, 98);
				// JavaScript.g:151:98: ( LT !)*
				try { DebugEnterSubRule(64);
				while (true)
				{
					int alt64=2;
					try { DebugEnterDecision(64, false);
					int LA64_0 = input.LA(1);

					if ((LA64_0==LT))
					{
						alt64 = 1;
					}


					} finally { DebugExitDecision(64); }
					switch ( alt64 )
					{
					case 1:
						DebugEnterAlt(1);
						// JavaScript.g:151:98: LT !
						{
						DebugLocation(151, 98);
						LT141=(IToken)new XToken((IToken)Match(input,LT,Follow._LT_in_forStatement1147), "LT"); if (state.failed) return retval;

						}
						break;

					default:
						goto loop64;
					}
				}

				loop64:
					;

				} finally { DebugExitSubRule(64); }

				DebugLocation(151, 101);
				PushFollow(Follow._expression_in_forStatement1151);
				expression142=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression142.Tree, expression142, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(65); }

			DebugLocation(151, 116);
			// JavaScript.g:151:116: ( LT !)*
			try { DebugEnterSubRule(66);
			while (true)
			{
				int alt66=2;
				try { DebugEnterDecision(66, false);
				int LA66_0 = input.LA(1);

				if ((LA66_0==LT))
				{
					alt66 = 1;
				}


				} finally { DebugExitDecision(66); }
				switch ( alt66 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g:151:116: LT !
					{
					DebugLocation(151, 116);
					LT143=(IToken)new XToken((IToken)Match(input,LT,Follow._LT_in_forStatement1155), "LT"); if (state.failed) return retval;

					}
					break;

				default:
					goto loop66;
				}
			}

			loop66:
				;

			} finally { DebugExitSubRule(66); }

			DebugLocation(151, 119);
			RPAREN144=(IToken)new XToken((IToken)Match(input,RPAREN,Follow._RPAREN_in_forStatement1159), "RPAREN"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			RPAREN144_tree = (object)adaptor.Create(RPAREN144, retval);
			adaptor.AddChild(root_0, RPAREN144_tree);
			}
			DebugLocation(151, 128);
			// JavaScript.g:151:128: ( LT !)*
			try { DebugEnterSubRule(67);
			while (true)
			{
				int alt67=2;
				try { DebugEnterDecision(67, false);
				int LA67_0 = input.LA(1);

				if ((LA67_0==LT))
				{
					alt67 = 1;
				}


				} finally { DebugExitDecision(67); }
				switch ( alt67 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g:151:128: LT !
					{
					DebugLocation(151, 128);
					LT145=(IToken)new XToken((IToken)Match(input,LT,Follow._LT_in_forStatement1161), "LT"); if (state.failed) return retval;

					}
					break;

				default:
					goto loop67;
				}
			}

			loop67:
				;

			} finally { DebugExitSubRule(67); }

			DebugLocation(151, 131);
			PushFollow(Follow._statement_in_forStatement1165);
			statement146=statement();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, statement146.Tree, statement146, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("forStatement", 25);
			LeaveRule("forStatement", 25);
			LeaveRule_forStatement();
			if (state.backtracking > 0) { Memoize(input, 25, forStatement_StartIndex); }

		}
		DebugLocation(152, 4);
		} finally { DebugExitRule(GrammarFileName, "forStatement"); }
		return retval;

	}
	// $ANTLR end "forStatement"

	partial void EnterRule_forStatementInitialiserPart();
	partial void LeaveRule_forStatementInitialiserPart();

	// $ANTLR start "forStatementInitialiserPart"
	// JavaScript.g:154:1: forStatementInitialiserPart : ( expressionNoIn | 'var' ( LT !)* variableDeclarationListNoIn );
	[GrammarRule("forStatementInitialiserPart")]
	public XAstParserRuleReturnScope forStatementInitialiserPart()
	{
		EnterRule_forStatementInitialiserPart();
		EnterRule("forStatementInitialiserPart", 26);
		var retval = new XAstParserRuleReturnScope("forStatementInitialiserPart");
		retval.Start = (IToken)input.LT(1);
		int forStatementInitialiserPart_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal148 = default(IToken);
		IToken LT149 = default(IToken);
		XAstParserRuleReturnScope expressionNoIn147 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope variableDeclarationListNoIn150 = default(XAstParserRuleReturnScope);

		object string_literal148_tree = default(object);
		object LT149_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "forStatementInitialiserPart");
		DebugLocation(154, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 26)) { return retval; }

			// JavaScript.g:155:5: ( expressionNoIn | 'var' ( LT !)* variableDeclarationListNoIn )
			int alt69=2;
			try { DebugEnterDecision(69, false);
			int LA69_0 = input.LA(1);

			if ((LA69_0==FALSE||LA69_0==Identifier||LA69_0==NULL||LA69_0==NumericLiteral||LA69_0==RegularExpressionLiteral||(LA69_0>=StringLiteral && LA69_0<=TRUE)||LA69_0==43||LA69_0==51||(LA69_0>=54 && LA69_0<=55)||(LA69_0>=58 && LA69_0<=59)||LA69_0==80||LA69_0==88||LA69_0==93||LA69_0==97||LA69_0==102||LA69_0==104||LA69_0==107||LA69_0==111))
			{
				alt69 = 1;
			}
			else if ((LA69_0==103))
			{
				alt69 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 69, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(69); }
			switch (alt69)
			{
			case 1:
				DebugEnterAlt(1);
				// JavaScript.g:155:7: expressionNoIn
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(155, 7);
				PushFollow(Follow._expressionNoIn_in_forStatementInitialiserPart1186);
				expressionNoIn147=expressionNoIn();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expressionNoIn147.Tree, expressionNoIn147, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// JavaScript.g:156:7: 'var' ( LT !)* variableDeclarationListNoIn
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(156, 7);
				string_literal148=(IToken)Match(input,103,Follow._103_in_forStatementInitialiserPart1194); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal148_tree = (object)adaptor.Create(string_literal148, retval);
				adaptor.AddChild(root_0, string_literal148_tree);
				}
				DebugLocation(156, 15);
				// JavaScript.g:156:15: ( LT !)*
				try { DebugEnterSubRule(68);
				while (true)
				{
					int alt68=2;
					try { DebugEnterDecision(68, false);
					int LA68_0 = input.LA(1);

					if ((LA68_0==LT))
					{
						alt68 = 1;
					}


					} finally { DebugExitDecision(68); }
					switch ( alt68 )
					{
					case 1:
						DebugEnterAlt(1);
						// JavaScript.g:156:15: LT !
						{
						DebugLocation(156, 15);
						LT149=(IToken)new XToken((IToken)Match(input,LT,Follow._LT_in_forStatementInitialiserPart1196), "LT"); if (state.failed) return retval;

						}
						break;

					default:
						goto loop68;
					}
				}

				loop68:
					;

				} finally { DebugExitSubRule(68); }

				DebugLocation(156, 18);
				PushFollow(Follow._variableDeclarationListNoIn_in_forStatementInitialiserPart1200);
				variableDeclarationListNoIn150=variableDeclarationListNoIn();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, variableDeclarationListNoIn150.Tree, variableDeclarationListNoIn150, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("forStatementInitialiserPart", 26);
			LeaveRule("forStatementInitialiserPart", 26);
			LeaveRule_forStatementInitialiserPart();
			if (state.backtracking > 0) { Memoize(input, 26, forStatementInitialiserPart_StartIndex); }

		}
		DebugLocation(157, 4);
		} finally { DebugExitRule(GrammarFileName, "forStatementInitialiserPart"); }
		return retval;

	}
	// $ANTLR end "forStatementInitialiserPart"

	partial void EnterRule_forInStatement();
	partial void LeaveRule_forInStatement();

	// $ANTLR start "forInStatement"
	// JavaScript.g:159:1: forInStatement : 'for' ( LT !)* '(' ( LT !)* forInStatementInitialiserPart ( LT !)* 'in' ( LT !)* expression ( LT !)* RPAREN ( LT !)* statement ;
	[GrammarRule("forInStatement")]
	public XAstParserRuleReturnScope forInStatement()
	{
		EnterRule_forInStatement();
		EnterRule("forInStatement", 27);
		var retval = new XAstParserRuleReturnScope("forInStatement");
		retval.Start = (IToken)input.LT(1);
		int forInStatement_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal151 = default(IToken);
		IToken LT152 = default(IToken);
		IToken char_literal153 = default(IToken);
		IToken LT154 = default(IToken);
		IToken LT156 = default(IToken);
		IToken string_literal157 = default(IToken);
		IToken LT158 = default(IToken);
		IToken LT160 = default(IToken);
		IToken RPAREN161 = default(IToken);
		IToken LT162 = default(IToken);
		XAstParserRuleReturnScope forInStatementInitialiserPart155 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope expression159 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope statement163 = default(XAstParserRuleReturnScope);

		object string_literal151_tree = default(object);
		object LT152_tree = default(object);
		object char_literal153_tree = default(object);
		object LT154_tree = default(object);
		object LT156_tree = default(object);
		object string_literal157_tree = default(object);
		object LT158_tree = default(object);
		object LT160_tree = default(object);
		object RPAREN161_tree = default(object);
		object LT162_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "forInStatement");
		DebugLocation(159, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 27)) { return retval; }

			// JavaScript.g:160:5: ( 'for' ( LT !)* '(' ( LT !)* forInStatementInitialiserPart ( LT !)* 'in' ( LT !)* expression ( LT !)* RPAREN ( LT !)* statement )
			DebugEnterAlt(1);
			// JavaScript.g:160:7: 'for' ( LT !)* '(' ( LT !)* forInStatementInitialiserPart ( LT !)* 'in' ( LT !)* expression ( LT !)* RPAREN ( LT !)* statement
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(160, 7);
			string_literal151=(IToken)Match(input,92,Follow._92_in_forInStatement1221); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal151_tree = (object)adaptor.Create(string_literal151, retval);
			adaptor.AddChild(root_0, string_literal151_tree);
			}
			DebugLocation(160, 15);
			// JavaScript.g:160:15: ( LT !)*
			try { DebugEnterSubRule(70);
			while (true)
			{
				int alt70=2;
				try { DebugEnterDecision(70, false);
				int LA70_0 = input.LA(1);

				if ((LA70_0==LT))
				{
					alt70 = 1;
				}


				} finally { DebugExitDecision(70); }
				switch ( alt70 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g:160:15: LT !
					{
					DebugLocation(160, 15);
					LT152=(IToken)new XToken((IToken)Match(input,LT,Follow._LT_in_forInStatement1223), "LT"); if (state.failed) return retval;

					}
					break;

				default:
					goto loop70;
				}
			}

			loop70:
				;

			} finally { DebugExitSubRule(70); }

			DebugLocation(160, 18);
			char_literal153=(IToken)Match(input,51,Follow._51_in_forInStatement1227); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal153_tree = (object)adaptor.Create(char_literal153, retval);
			adaptor.AddChild(root_0, char_literal153_tree);
			}
			DebugLocation(160, 24);
			// JavaScript.g:160:24: ( LT !)*
			try { DebugEnterSubRule(71);
			while (true)
			{
				int alt71=2;
				try { DebugEnterDecision(71, false);
				int LA71_0 = input.LA(1);

				if ((LA71_0==LT))
				{
					alt71 = 1;
				}


				} finally { DebugExitDecision(71); }
				switch ( alt71 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g:160:24: LT !
					{
					DebugLocation(160, 24);
					LT154=(IToken)new XToken((IToken)Match(input,LT,Follow._LT_in_forInStatement1229), "LT"); if (state.failed) return retval;

					}
					break;

				default:
					goto loop71;
				}
			}

			loop71:
				;

			} finally { DebugExitSubRule(71); }

			DebugLocation(160, 27);
			PushFollow(Follow._forInStatementInitialiserPart_in_forInStatement1233);
			forInStatementInitialiserPart155=forInStatementInitialiserPart();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, forInStatementInitialiserPart155.Tree, forInStatementInitialiserPart155, retval);
			DebugLocation(160, 59);
			// JavaScript.g:160:59: ( LT !)*
			try { DebugEnterSubRule(72);
			while (true)
			{
				int alt72=2;
				try { DebugEnterDecision(72, false);
				int LA72_0 = input.LA(1);

				if ((LA72_0==LT))
				{
					alt72 = 1;
				}


				} finally { DebugExitDecision(72); }
				switch ( alt72 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g:160:59: LT !
					{
					DebugLocation(160, 59);
					LT156=(IToken)new XToken((IToken)Match(input,LT,Follow._LT_in_forInStatement1235), "LT"); if (state.failed) return retval;

					}
					break;

				default:
					goto loop72;
				}
			}

			loop72:
				;

			} finally { DebugExitSubRule(72); }

			DebugLocation(160, 62);
			string_literal157=(IToken)Match(input,95,Follow._95_in_forInStatement1239); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal157_tree = (object)adaptor.Create(string_literal157, retval);
			adaptor.AddChild(root_0, string_literal157_tree);
			}
			DebugLocation(160, 69);
			// JavaScript.g:160:69: ( LT !)*
			try { DebugEnterSubRule(73);
			while (true)
			{
				int alt73=2;
				try { DebugEnterDecision(73, false);
				int LA73_0 = input.LA(1);

				if ((LA73_0==LT))
				{
					alt73 = 1;
				}


				} finally { DebugExitDecision(73); }
				switch ( alt73 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g:160:69: LT !
					{
					DebugLocation(160, 69);
					LT158=(IToken)new XToken((IToken)Match(input,LT,Follow._LT_in_forInStatement1241), "LT"); if (state.failed) return retval;

					}
					break;

				default:
					goto loop73;
				}
			}

			loop73:
				;

			} finally { DebugExitSubRule(73); }

			DebugLocation(160, 72);
			PushFollow(Follow._expression_in_forInStatement1245);
			expression159=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, expression159.Tree, expression159, retval);
			DebugLocation(160, 85);
			// JavaScript.g:160:85: ( LT !)*
			try { DebugEnterSubRule(74);
			while (true)
			{
				int alt74=2;
				try { DebugEnterDecision(74, false);
				int LA74_0 = input.LA(1);

				if ((LA74_0==LT))
				{
					alt74 = 1;
				}


				} finally { DebugExitDecision(74); }
				switch ( alt74 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g:160:85: LT !
					{
					DebugLocation(160, 85);
					LT160=(IToken)new XToken((IToken)Match(input,LT,Follow._LT_in_forInStatement1247), "LT"); if (state.failed) return retval;

					}
					break;

				default:
					goto loop74;
				}
			}

			loop74:
				;

			} finally { DebugExitSubRule(74); }

			DebugLocation(160, 88);
			RPAREN161=(IToken)new XToken((IToken)Match(input,RPAREN,Follow._RPAREN_in_forInStatement1251), "RPAREN"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			RPAREN161_tree = (object)adaptor.Create(RPAREN161, retval);
			adaptor.AddChild(root_0, RPAREN161_tree);
			}
			DebugLocation(160, 97);
			// JavaScript.g:160:97: ( LT !)*
			try { DebugEnterSubRule(75);
			while (true)
			{
				int alt75=2;
				try { DebugEnterDecision(75, false);
				int LA75_0 = input.LA(1);

				if ((LA75_0==LT))
				{
					alt75 = 1;
				}


				} finally { DebugExitDecision(75); }
				switch ( alt75 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g:160:97: LT !
					{
					DebugLocation(160, 97);
					LT162=(IToken)new XToken((IToken)Match(input,LT,Follow._LT_in_forInStatement1253), "LT"); if (state.failed) return retval;

					}
					break;

				default:
					goto loop75;
				}
			}

			loop75:
				;

			} finally { DebugExitSubRule(75); }

			DebugLocation(160, 100);
			PushFollow(Follow._statement_in_forInStatement1257);
			statement163=statement();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, statement163.Tree, statement163, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("forInStatement", 27);
			LeaveRule("forInStatement", 27);
			LeaveRule_forInStatement();
			if (state.backtracking > 0) { Memoize(input, 27, forInStatement_StartIndex); }

		}
		DebugLocation(161, 4);
		} finally { DebugExitRule(GrammarFileName, "forInStatement"); }
		return retval;

	}
	// $ANTLR end "forInStatement"

	partial void EnterRule_forInStatementInitialiserPart();
	partial void LeaveRule_forInStatementInitialiserPart();

	// $ANTLR start "forInStatementInitialiserPart"
	// JavaScript.g:163:1: forInStatementInitialiserPart : ( leftHandSideExpression | 'var' ( LT !)* variableDeclarationNoIn );
	[GrammarRule("forInStatementInitialiserPart")]
	public XAstParserRuleReturnScope forInStatementInitialiserPart()
	{
		EnterRule_forInStatementInitialiserPart();
		EnterRule("forInStatementInitialiserPart", 28);
		var retval = new XAstParserRuleReturnScope("forInStatementInitialiserPart");
		retval.Start = (IToken)input.LT(1);
		int forInStatementInitialiserPart_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal165 = default(IToken);
		IToken LT166 = default(IToken);
		XAstParserRuleReturnScope leftHandSideExpression164 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope variableDeclarationNoIn167 = default(XAstParserRuleReturnScope);

		object string_literal165_tree = default(object);
		object LT166_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "forInStatementInitialiserPart");
		DebugLocation(163, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 28)) { return retval; }

			// JavaScript.g:164:5: ( leftHandSideExpression | 'var' ( LT !)* variableDeclarationNoIn )
			int alt77=2;
			try { DebugEnterDecision(77, false);
			int LA77_0 = input.LA(1);

			if ((LA77_0==FALSE||LA77_0==Identifier||LA77_0==NULL||LA77_0==NumericLiteral||LA77_0==RegularExpressionLiteral||(LA77_0>=StringLiteral && LA77_0<=TRUE)||LA77_0==51||LA77_0==80||LA77_0==93||LA77_0==97||LA77_0==107))
			{
				alt77 = 1;
			}
			else if ((LA77_0==103))
			{
				alt77 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 77, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(77); }
			switch (alt77)
			{
			case 1:
				DebugEnterAlt(1);
				// JavaScript.g:164:7: leftHandSideExpression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(164, 7);
				PushFollow(Follow._leftHandSideExpression_in_forInStatementInitialiserPart1278);
				leftHandSideExpression164=leftHandSideExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, leftHandSideExpression164.Tree, leftHandSideExpression164, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// JavaScript.g:165:7: 'var' ( LT !)* variableDeclarationNoIn
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(165, 7);
				string_literal165=(IToken)Match(input,103,Follow._103_in_forInStatementInitialiserPart1286); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal165_tree = (object)adaptor.Create(string_literal165, retval);
				adaptor.AddChild(root_0, string_literal165_tree);
				}
				DebugLocation(165, 15);
				// JavaScript.g:165:15: ( LT !)*
				try { DebugEnterSubRule(76);
				while (true)
				{
					int alt76=2;
					try { DebugEnterDecision(76, false);
					int LA76_0 = input.LA(1);

					if ((LA76_0==LT))
					{
						alt76 = 1;
					}


					} finally { DebugExitDecision(76); }
					switch ( alt76 )
					{
					case 1:
						DebugEnterAlt(1);
						// JavaScript.g:165:15: LT !
						{
						DebugLocation(165, 15);
						LT166=(IToken)new XToken((IToken)Match(input,LT,Follow._LT_in_forInStatementInitialiserPart1288), "LT"); if (state.failed) return retval;

						}
						break;

					default:
						goto loop76;
					}
				}

				loop76:
					;

				} finally { DebugExitSubRule(76); }

				DebugLocation(165, 18);
				PushFollow(Follow._variableDeclarationNoIn_in_forInStatementInitialiserPart1292);
				variableDeclarationNoIn167=variableDeclarationNoIn();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, variableDeclarationNoIn167.Tree, variableDeclarationNoIn167, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("forInStatementInitialiserPart", 28);
			LeaveRule("forInStatementInitialiserPart", 28);
			LeaveRule_forInStatementInitialiserPart();
			if (state.backtracking > 0) { Memoize(input, 28, forInStatementInitialiserPart_StartIndex); }

		}
		DebugLocation(166, 4);
		} finally { DebugExitRule(GrammarFileName, "forInStatementInitialiserPart"); }
		return retval;

	}
	// $ANTLR end "forInStatementInitialiserPart"

	partial void EnterRule_continueStatement();
	partial void LeaveRule_continueStatement();

	// $ANTLR start "continueStatement"
	// JavaScript.g:168:1: continueStatement : 'continue' ( Identifier )? statementEnd ;
	[GrammarRule("continueStatement")]
	public XAstParserRuleReturnScope continueStatement()
	{
		EnterRule_continueStatement();
		EnterRule("continueStatement", 29);
		var retval = new XAstParserRuleReturnScope("continueStatement");
		retval.Start = (IToken)input.LT(1);
		int continueStatement_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal168 = default(IToken);
		IToken Identifier169 = default(IToken);
		XAstParserRuleReturnScope statementEnd170 = default(XAstParserRuleReturnScope);

		object string_literal168_tree = default(object);
		object Identifier169_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "continueStatement");
		DebugLocation(168, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 29)) { return retval; }

			// JavaScript.g:169:5: ( 'continue' ( Identifier )? statementEnd )
			DebugEnterAlt(1);
			// JavaScript.g:169:7: 'continue' ( Identifier )? statementEnd
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(169, 7);
			string_literal168=(IToken)Match(input,86,Follow._86_in_continueStatement1309); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal168_tree = (object)adaptor.Create(string_literal168, retval);
			adaptor.AddChild(root_0, string_literal168_tree);
			}
			DebugLocation(169, 18);
			// JavaScript.g:169:18: ( Identifier )?
			int alt78=2;
			try { DebugEnterSubRule(78);
			try { DebugEnterDecision(78, false);
			int LA78_0 = input.LA(1);

			if ((LA78_0==Identifier))
			{
				int LA78_1 = input.LA(2);

				if ((EvaluatePredicate(synpred96_JavaScript_fragment)))
				{
					alt78 = 1;
				}
			}
			} finally { DebugExitDecision(78); }
			switch (alt78)
			{
			case 1:
				DebugEnterAlt(1);
				// JavaScript.g:169:18: Identifier
				{
				DebugLocation(169, 18);
				Identifier169=(IToken)new XToken((IToken)Match(input,Identifier,Follow._Identifier_in_continueStatement1311), "Identifier"); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Identifier169_tree = (object)adaptor.Create(Identifier169, retval);
				adaptor.AddChild(root_0, Identifier169_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(78); }

			DebugLocation(169, 30);
			PushFollow(Follow._statementEnd_in_continueStatement1314);
			statementEnd170=statementEnd();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, statementEnd170.Tree, statementEnd170, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("continueStatement", 29);
			LeaveRule("continueStatement", 29);
			LeaveRule_continueStatement();
			if (state.backtracking > 0) { Memoize(input, 29, continueStatement_StartIndex); }

		}
		DebugLocation(170, 4);
		} finally { DebugExitRule(GrammarFileName, "continueStatement"); }
		return retval;

	}
	// $ANTLR end "continueStatement"

	partial void EnterRule_breakStatement();
	partial void LeaveRule_breakStatement();

	// $ANTLR start "breakStatement"
	// JavaScript.g:172:1: breakStatement : 'break' ( Identifier )? statementEnd ;
	[GrammarRule("breakStatement")]
	public XAstParserRuleReturnScope breakStatement()
	{
		EnterRule_breakStatement();
		EnterRule("breakStatement", 30);
		var retval = new XAstParserRuleReturnScope("breakStatement");
		retval.Start = (IToken)input.LT(1);
		int breakStatement_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal171 = default(IToken);
		IToken Identifier172 = default(IToken);
		XAstParserRuleReturnScope statementEnd173 = default(XAstParserRuleReturnScope);

		object string_literal171_tree = default(object);
		object Identifier172_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "breakStatement");
		DebugLocation(172, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 30)) { return retval; }

			// JavaScript.g:173:5: ( 'break' ( Identifier )? statementEnd )
			DebugEnterAlt(1);
			// JavaScript.g:173:7: 'break' ( Identifier )? statementEnd
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(173, 7);
			string_literal171=(IToken)Match(input,83,Follow._83_in_breakStatement1331); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal171_tree = (object)adaptor.Create(string_literal171, retval);
			adaptor.AddChild(root_0, string_literal171_tree);
			}
			DebugLocation(173, 15);
			// JavaScript.g:173:15: ( Identifier )?
			int alt79=2;
			try { DebugEnterSubRule(79);
			try { DebugEnterDecision(79, false);
			int LA79_0 = input.LA(1);

			if ((LA79_0==Identifier))
			{
				int LA79_1 = input.LA(2);

				if ((EvaluatePredicate(synpred97_JavaScript_fragment)))
				{
					alt79 = 1;
				}
			}
			} finally { DebugExitDecision(79); }
			switch (alt79)
			{
			case 1:
				DebugEnterAlt(1);
				// JavaScript.g:173:15: Identifier
				{
				DebugLocation(173, 15);
				Identifier172=(IToken)new XToken((IToken)Match(input,Identifier,Follow._Identifier_in_breakStatement1333), "Identifier"); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Identifier172_tree = (object)adaptor.Create(Identifier172, retval);
				adaptor.AddChild(root_0, Identifier172_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(79); }

			DebugLocation(173, 27);
			PushFollow(Follow._statementEnd_in_breakStatement1336);
			statementEnd173=statementEnd();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, statementEnd173.Tree, statementEnd173, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("breakStatement", 30);
			LeaveRule("breakStatement", 30);
			LeaveRule_breakStatement();
			if (state.backtracking > 0) { Memoize(input, 30, breakStatement_StartIndex); }

		}
		DebugLocation(174, 4);
		} finally { DebugExitRule(GrammarFileName, "breakStatement"); }
		return retval;

	}
	// $ANTLR end "breakStatement"

	partial void EnterRule_returnStatement();
	partial void LeaveRule_returnStatement();

	// $ANTLR start "returnStatement"
	// JavaScript.g:176:1: returnStatement : 'return' ( expression )? statementEnd ;
	[GrammarRule("returnStatement")]
	public XAstParserRuleReturnScope returnStatement()
	{
		EnterRule_returnStatement();
		EnterRule("returnStatement", 31);
		var retval = new XAstParserRuleReturnScope("returnStatement");
		retval.Start = (IToken)input.LT(1);
		int returnStatement_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal174 = default(IToken);
		XAstParserRuleReturnScope expression175 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope statementEnd176 = default(XAstParserRuleReturnScope);

		object string_literal174_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "returnStatement");
		DebugLocation(176, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 31)) { return retval; }

			// JavaScript.g:177:5: ( 'return' ( expression )? statementEnd )
			DebugEnterAlt(1);
			// JavaScript.g:177:7: 'return' ( expression )? statementEnd
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(177, 7);
			string_literal174=(IToken)Match(input,98,Follow._98_in_returnStatement1353); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal174_tree = (object)adaptor.Create(string_literal174, retval);
			adaptor.AddChild(root_0, string_literal174_tree);
			}
			DebugLocation(177, 16);
			// JavaScript.g:177:16: ( expression )?
			int alt80=2;
			try { DebugEnterSubRule(80);
			try { DebugEnterDecision(80, false);
			switch (input.LA(1))
			{
			case THIS:
				{
				int LA80_1 = input.LA(2);

				if ((EvaluatePredicate(synpred98_JavaScript_fragment)))
				{
					alt80 = 1;
				}
				}
				break;
			case Identifier:
				{
				int LA80_2 = input.LA(2);

				if ((EvaluatePredicate(synpred98_JavaScript_fragment)))
				{
					alt80 = 1;
				}
				}
				break;
			case NULL:
				{
				int LA80_3 = input.LA(2);

				if ((EvaluatePredicate(synpred98_JavaScript_fragment)))
				{
					alt80 = 1;
				}
				}
				break;
			case TRUE:
				{
				int LA80_4 = input.LA(2);

				if ((EvaluatePredicate(synpred98_JavaScript_fragment)))
				{
					alt80 = 1;
				}
				}
				break;
			case FALSE:
				{
				int LA80_5 = input.LA(2);

				if ((EvaluatePredicate(synpred98_JavaScript_fragment)))
				{
					alt80 = 1;
				}
				}
				break;
			case StringLiteral:
				{
				int LA80_6 = input.LA(2);

				if ((EvaluatePredicate(synpred98_JavaScript_fragment)))
				{
					alt80 = 1;
				}
				}
				break;
			case NumericLiteral:
				{
				int LA80_7 = input.LA(2);

				if ((EvaluatePredicate(synpred98_JavaScript_fragment)))
				{
					alt80 = 1;
				}
				}
				break;
			case RegularExpressionLiteral:
				{
				int LA80_8 = input.LA(2);

				if ((EvaluatePredicate(synpred98_JavaScript_fragment)))
				{
					alt80 = 1;
				}
				}
				break;
			case 80:
				{
				int LA80_9 = input.LA(2);

				if ((EvaluatePredicate(synpred98_JavaScript_fragment)))
				{
					alt80 = 1;
				}
				}
				break;
			case 107:
				{
				int LA80_10 = input.LA(2);

				if ((EvaluatePredicate(synpred98_JavaScript_fragment)))
				{
					alt80 = 1;
				}
				}
				break;
			case 51:
				{
				int LA80_11 = input.LA(2);

				if ((EvaluatePredicate(synpred98_JavaScript_fragment)))
				{
					alt80 = 1;
				}
				}
				break;
			case 93:
				{
				int LA80_12 = input.LA(2);

				if ((EvaluatePredicate(synpred98_JavaScript_fragment)))
				{
					alt80 = 1;
				}
				}
				break;
			case 97:
				{
				int LA80_13 = input.LA(2);

				if ((EvaluatePredicate(synpred98_JavaScript_fragment)))
				{
					alt80 = 1;
				}
				}
				break;
			case 43:
			case 54:
			case 55:
			case 58:
			case 59:
			case 88:
			case 102:
			case 104:
			case 111:
				{
				int LA80_14 = input.LA(2);

				if ((EvaluatePredicate(synpred98_JavaScript_fragment)))
				{
					alt80 = 1;
				}
				}
				break;
			}

			} finally { DebugExitDecision(80); }
			switch (alt80)
			{
			case 1:
				DebugEnterAlt(1);
				// JavaScript.g:177:16: expression
				{
				DebugLocation(177, 16);
				PushFollow(Follow._expression_in_returnStatement1355);
				expression175=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression175.Tree, expression175, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(80); }

			DebugLocation(177, 28);
			PushFollow(Follow._statementEnd_in_returnStatement1358);
			statementEnd176=statementEnd();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, statementEnd176.Tree, statementEnd176, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("returnStatement", 31);
			LeaveRule("returnStatement", 31);
			LeaveRule_returnStatement();
			if (state.backtracking > 0) { Memoize(input, 31, returnStatement_StartIndex); }

		}
		DebugLocation(178, 4);
		} finally { DebugExitRule(GrammarFileName, "returnStatement"); }
		return retval;

	}
	// $ANTLR end "returnStatement"

	partial void EnterRule_withStatement();
	partial void LeaveRule_withStatement();

	// $ANTLR start "withStatement"
	// JavaScript.g:180:1: withStatement : 'with' ( LT !)* '(' ( LT !)* expression ( LT !)* RPAREN ( LT !)* statement ;
	[GrammarRule("withStatement")]
	public XAstParserRuleReturnScope withStatement()
	{
		EnterRule_withStatement();
		EnterRule("withStatement", 32);
		var retval = new XAstParserRuleReturnScope("withStatement");
		retval.Start = (IToken)input.LT(1);
		int withStatement_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal177 = default(IToken);
		IToken LT178 = default(IToken);
		IToken char_literal179 = default(IToken);
		IToken LT180 = default(IToken);
		IToken LT182 = default(IToken);
		IToken RPAREN183 = default(IToken);
		IToken LT184 = default(IToken);
		XAstParserRuleReturnScope expression181 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope statement185 = default(XAstParserRuleReturnScope);

		object string_literal177_tree = default(object);
		object LT178_tree = default(object);
		object char_literal179_tree = default(object);
		object LT180_tree = default(object);
		object LT182_tree = default(object);
		object RPAREN183_tree = default(object);
		object LT184_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "withStatement");
		DebugLocation(180, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 32)) { return retval; }

			// JavaScript.g:181:5: ( 'with' ( LT !)* '(' ( LT !)* expression ( LT !)* RPAREN ( LT !)* statement )
			DebugEnterAlt(1);
			// JavaScript.g:181:7: 'with' ( LT !)* '(' ( LT !)* expression ( LT !)* RPAREN ( LT !)* statement
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(181, 7);
			string_literal177=(IToken)Match(input,106,Follow._106_in_withStatement1379); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal177_tree = (object)adaptor.Create(string_literal177, retval);
			adaptor.AddChild(root_0, string_literal177_tree);
			}
			DebugLocation(181, 16);
			// JavaScript.g:181:16: ( LT !)*
			try { DebugEnterSubRule(81);
			while (true)
			{
				int alt81=2;
				try { DebugEnterDecision(81, false);
				int LA81_0 = input.LA(1);

				if ((LA81_0==LT))
				{
					alt81 = 1;
				}


				} finally { DebugExitDecision(81); }
				switch ( alt81 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g:181:16: LT !
					{
					DebugLocation(181, 16);
					LT178=(IToken)new XToken((IToken)Match(input,LT,Follow._LT_in_withStatement1381), "LT"); if (state.failed) return retval;

					}
					break;

				default:
					goto loop81;
				}
			}

			loop81:
				;

			} finally { DebugExitSubRule(81); }

			DebugLocation(181, 19);
			char_literal179=(IToken)Match(input,51,Follow._51_in_withStatement1385); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal179_tree = (object)adaptor.Create(char_literal179, retval);
			adaptor.AddChild(root_0, char_literal179_tree);
			}
			DebugLocation(181, 25);
			// JavaScript.g:181:25: ( LT !)*
			try { DebugEnterSubRule(82);
			while (true)
			{
				int alt82=2;
				try { DebugEnterDecision(82, false);
				int LA82_0 = input.LA(1);

				if ((LA82_0==LT))
				{
					alt82 = 1;
				}


				} finally { DebugExitDecision(82); }
				switch ( alt82 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g:181:25: LT !
					{
					DebugLocation(181, 25);
					LT180=(IToken)new XToken((IToken)Match(input,LT,Follow._LT_in_withStatement1387), "LT"); if (state.failed) return retval;

					}
					break;

				default:
					goto loop82;
				}
			}

			loop82:
				;

			} finally { DebugExitSubRule(82); }

			DebugLocation(181, 28);
			PushFollow(Follow._expression_in_withStatement1391);
			expression181=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, expression181.Tree, expression181, retval);
			DebugLocation(181, 41);
			// JavaScript.g:181:41: ( LT !)*
			try { DebugEnterSubRule(83);
			while (true)
			{
				int alt83=2;
				try { DebugEnterDecision(83, false);
				int LA83_0 = input.LA(1);

				if ((LA83_0==LT))
				{
					alt83 = 1;
				}


				} finally { DebugExitDecision(83); }
				switch ( alt83 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g:181:41: LT !
					{
					DebugLocation(181, 41);
					LT182=(IToken)new XToken((IToken)Match(input,LT,Follow._LT_in_withStatement1393), "LT"); if (state.failed) return retval;

					}
					break;

				default:
					goto loop83;
				}
			}

			loop83:
				;

			} finally { DebugExitSubRule(83); }

			DebugLocation(181, 44);
			RPAREN183=(IToken)new XToken((IToken)Match(input,RPAREN,Follow._RPAREN_in_withStatement1397), "RPAREN"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			RPAREN183_tree = (object)adaptor.Create(RPAREN183, retval);
			adaptor.AddChild(root_0, RPAREN183_tree);
			}
			DebugLocation(181, 53);
			// JavaScript.g:181:53: ( LT !)*
			try { DebugEnterSubRule(84);
			while (true)
			{
				int alt84=2;
				try { DebugEnterDecision(84, false);
				int LA84_0 = input.LA(1);

				if ((LA84_0==LT))
				{
					alt84 = 1;
				}


				} finally { DebugExitDecision(84); }
				switch ( alt84 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g:181:53: LT !
					{
					DebugLocation(181, 53);
					LT184=(IToken)new XToken((IToken)Match(input,LT,Follow._LT_in_withStatement1399), "LT"); if (state.failed) return retval;

					}
					break;

				default:
					goto loop84;
				}
			}

			loop84:
				;

			} finally { DebugExitSubRule(84); }

			DebugLocation(181, 56);
			PushFollow(Follow._statement_in_withStatement1403);
			statement185=statement();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, statement185.Tree, statement185, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("withStatement", 32);
			LeaveRule("withStatement", 32);
			LeaveRule_withStatement();
			if (state.backtracking > 0) { Memoize(input, 32, withStatement_StartIndex); }

		}
		DebugLocation(182, 4);
		} finally { DebugExitRule(GrammarFileName, "withStatement"); }
		return retval;

	}
	// $ANTLR end "withStatement"

	partial void EnterRule_labelledStatement();
	partial void LeaveRule_labelledStatement();

	// $ANTLR start "labelledStatement"
	// JavaScript.g:184:1: labelledStatement : Identifier ( LT !)* ':' ( LT !)* statement ;
	[GrammarRule("labelledStatement")]
	public XAstParserRuleReturnScope labelledStatement()
	{
		EnterRule_labelledStatement();
		EnterRule("labelledStatement", 33);
		var retval = new XAstParserRuleReturnScope("labelledStatement");
		retval.Start = (IToken)input.LT(1);
		int labelledStatement_StartIndex = input.Index;

		object root_0 = default(object);

		IToken Identifier186 = default(IToken);
		IToken LT187 = default(IToken);
		IToken char_literal188 = default(IToken);
		IToken LT189 = default(IToken);
		XAstParserRuleReturnScope statement190 = default(XAstParserRuleReturnScope);

		object Identifier186_tree = default(object);
		object LT187_tree = default(object);
		object char_literal188_tree = default(object);
		object LT189_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "labelledStatement");
		DebugLocation(184, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 33)) { return retval; }

			// JavaScript.g:185:5: ( Identifier ( LT !)* ':' ( LT !)* statement )
			DebugEnterAlt(1);
			// JavaScript.g:185:7: Identifier ( LT !)* ':' ( LT !)* statement
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(185, 7);
			Identifier186=(IToken)new XToken((IToken)Match(input,Identifier,Follow._Identifier_in_labelledStatement1420), "Identifier"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			Identifier186_tree = (object)adaptor.Create(Identifier186, retval);
			adaptor.AddChild(root_0, Identifier186_tree);
			}
			DebugLocation(185, 20);
			// JavaScript.g:185:20: ( LT !)*
			try { DebugEnterSubRule(85);
			while (true)
			{
				int alt85=2;
				try { DebugEnterDecision(85, false);
				int LA85_0 = input.LA(1);

				if ((LA85_0==LT))
				{
					alt85 = 1;
				}


				} finally { DebugExitDecision(85); }
				switch ( alt85 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g:185:20: LT !
					{
					DebugLocation(185, 20);
					LT187=(IToken)new XToken((IToken)Match(input,LT,Follow._LT_in_labelledStatement1422), "LT"); if (state.failed) return retval;

					}
					break;

				default:
					goto loop85;
				}
			}

			loop85:
				;

			} finally { DebugExitSubRule(85); }

			DebugLocation(185, 23);
			char_literal188=(IToken)Match(input,64,Follow._64_in_labelledStatement1426); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal188_tree = (object)adaptor.Create(char_literal188, retval);
			adaptor.AddChild(root_0, char_literal188_tree);
			}
			DebugLocation(185, 29);
			// JavaScript.g:185:29: ( LT !)*
			try { DebugEnterSubRule(86);
			while (true)
			{
				int alt86=2;
				try { DebugEnterDecision(86, false);
				int LA86_0 = input.LA(1);

				if ((LA86_0==LT))
				{
					alt86 = 1;
				}


				} finally { DebugExitDecision(86); }
				switch ( alt86 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g:185:29: LT !
					{
					DebugLocation(185, 29);
					LT189=(IToken)new XToken((IToken)Match(input,LT,Follow._LT_in_labelledStatement1428), "LT"); if (state.failed) return retval;

					}
					break;

				default:
					goto loop86;
				}
			}

			loop86:
				;

			} finally { DebugExitSubRule(86); }

			DebugLocation(185, 32);
			PushFollow(Follow._statement_in_labelledStatement1432);
			statement190=statement();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, statement190.Tree, statement190, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("labelledStatement", 33);
			LeaveRule("labelledStatement", 33);
			LeaveRule_labelledStatement();
			if (state.backtracking > 0) { Memoize(input, 33, labelledStatement_StartIndex); }

		}
		DebugLocation(186, 4);
		} finally { DebugExitRule(GrammarFileName, "labelledStatement"); }
		return retval;

	}
	// $ANTLR end "labelledStatement"

	partial void EnterRule_switchStatement();
	partial void LeaveRule_switchStatement();

	// $ANTLR start "switchStatement"
	// JavaScript.g:188:1: switchStatement : 'switch' ( LT !)* '(' ( LT !)* expression ( LT !)* RPAREN ( LT !)* caseBlock ;
	[GrammarRule("switchStatement")]
	public XAstParserRuleReturnScope switchStatement()
	{
		EnterRule_switchStatement();
		EnterRule("switchStatement", 34);
		var retval = new XAstParserRuleReturnScope("switchStatement");
		retval.Start = (IToken)input.LT(1);
		int switchStatement_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal191 = default(IToken);
		IToken LT192 = default(IToken);
		IToken char_literal193 = default(IToken);
		IToken LT194 = default(IToken);
		IToken LT196 = default(IToken);
		IToken RPAREN197 = default(IToken);
		IToken LT198 = default(IToken);
		XAstParserRuleReturnScope expression195 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope caseBlock199 = default(XAstParserRuleReturnScope);

		object string_literal191_tree = default(object);
		object LT192_tree = default(object);
		object char_literal193_tree = default(object);
		object LT194_tree = default(object);
		object LT196_tree = default(object);
		object RPAREN197_tree = default(object);
		object LT198_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "switchStatement");
		DebugLocation(188, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 34)) { return retval; }

			// JavaScript.g:189:5: ( 'switch' ( LT !)* '(' ( LT !)* expression ( LT !)* RPAREN ( LT !)* caseBlock )
			DebugEnterAlt(1);
			// JavaScript.g:189:7: 'switch' ( LT !)* '(' ( LT !)* expression ( LT !)* RPAREN ( LT !)* caseBlock
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(189, 7);
			string_literal191=(IToken)Match(input,99,Follow._99_in_switchStatement1453); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal191_tree = (object)adaptor.Create(string_literal191, retval);
			adaptor.AddChild(root_0, string_literal191_tree);
			}
			DebugLocation(189, 18);
			// JavaScript.g:189:18: ( LT !)*
			try { DebugEnterSubRule(87);
			while (true)
			{
				int alt87=2;
				try { DebugEnterDecision(87, false);
				int LA87_0 = input.LA(1);

				if ((LA87_0==LT))
				{
					alt87 = 1;
				}


				} finally { DebugExitDecision(87); }
				switch ( alt87 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g:189:18: LT !
					{
					DebugLocation(189, 18);
					LT192=(IToken)new XToken((IToken)Match(input,LT,Follow._LT_in_switchStatement1455), "LT"); if (state.failed) return retval;

					}
					break;

				default:
					goto loop87;
				}
			}

			loop87:
				;

			} finally { DebugExitSubRule(87); }

			DebugLocation(189, 21);
			char_literal193=(IToken)Match(input,51,Follow._51_in_switchStatement1459); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal193_tree = (object)adaptor.Create(char_literal193, retval);
			adaptor.AddChild(root_0, char_literal193_tree);
			}
			DebugLocation(189, 27);
			// JavaScript.g:189:27: ( LT !)*
			try { DebugEnterSubRule(88);
			while (true)
			{
				int alt88=2;
				try { DebugEnterDecision(88, false);
				int LA88_0 = input.LA(1);

				if ((LA88_0==LT))
				{
					alt88 = 1;
				}


				} finally { DebugExitDecision(88); }
				switch ( alt88 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g:189:27: LT !
					{
					DebugLocation(189, 27);
					LT194=(IToken)new XToken((IToken)Match(input,LT,Follow._LT_in_switchStatement1461), "LT"); if (state.failed) return retval;

					}
					break;

				default:
					goto loop88;
				}
			}

			loop88:
				;

			} finally { DebugExitSubRule(88); }

			DebugLocation(189, 30);
			PushFollow(Follow._expression_in_switchStatement1465);
			expression195=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, expression195.Tree, expression195, retval);
			DebugLocation(189, 43);
			// JavaScript.g:189:43: ( LT !)*
			try { DebugEnterSubRule(89);
			while (true)
			{
				int alt89=2;
				try { DebugEnterDecision(89, false);
				int LA89_0 = input.LA(1);

				if ((LA89_0==LT))
				{
					alt89 = 1;
				}


				} finally { DebugExitDecision(89); }
				switch ( alt89 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g:189:43: LT !
					{
					DebugLocation(189, 43);
					LT196=(IToken)new XToken((IToken)Match(input,LT,Follow._LT_in_switchStatement1467), "LT"); if (state.failed) return retval;

					}
					break;

				default:
					goto loop89;
				}
			}

			loop89:
				;

			} finally { DebugExitSubRule(89); }

			DebugLocation(189, 46);
			RPAREN197=(IToken)new XToken((IToken)Match(input,RPAREN,Follow._RPAREN_in_switchStatement1471), "RPAREN"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			RPAREN197_tree = (object)adaptor.Create(RPAREN197, retval);
			adaptor.AddChild(root_0, RPAREN197_tree);
			}
			DebugLocation(189, 55);
			// JavaScript.g:189:55: ( LT !)*
			try { DebugEnterSubRule(90);
			while (true)
			{
				int alt90=2;
				try { DebugEnterDecision(90, false);
				int LA90_0 = input.LA(1);

				if ((LA90_0==LT))
				{
					alt90 = 1;
				}


				} finally { DebugExitDecision(90); }
				switch ( alt90 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g:189:55: LT !
					{
					DebugLocation(189, 55);
					LT198=(IToken)new XToken((IToken)Match(input,LT,Follow._LT_in_switchStatement1473), "LT"); if (state.failed) return retval;

					}
					break;

				default:
					goto loop90;
				}
			}

			loop90:
				;

			} finally { DebugExitSubRule(90); }

			DebugLocation(189, 58);
			PushFollow(Follow._caseBlock_in_switchStatement1477);
			caseBlock199=caseBlock();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, caseBlock199.Tree, caseBlock199, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("switchStatement", 34);
			LeaveRule("switchStatement", 34);
			LeaveRule_switchStatement();
			if (state.backtracking > 0) { Memoize(input, 34, switchStatement_StartIndex); }

		}
		DebugLocation(190, 4);
		} finally { DebugExitRule(GrammarFileName, "switchStatement"); }
		return retval;

	}
	// $ANTLR end "switchStatement"

	partial void EnterRule_caseBlock();
	partial void LeaveRule_caseBlock();

	// $ANTLR start "caseBlock"
	// JavaScript.g:192:1: caseBlock : '{' ( ( LT !)* caseClause )* ( ( LT !)* defaultClause ( ( LT !)* caseClause )* )? ( LT !)* RBRACE ;
	[GrammarRule("caseBlock")]
	public XAstParserRuleReturnScope caseBlock()
	{
		EnterRule_caseBlock();
		EnterRule("caseBlock", 35);
		var retval = new XAstParserRuleReturnScope("caseBlock");
		retval.Start = (IToken)input.LT(1);
		int caseBlock_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal200 = default(IToken);
		IToken LT201 = default(IToken);
		IToken LT203 = default(IToken);
		IToken LT205 = default(IToken);
		IToken LT207 = default(IToken);
		IToken RBRACE208 = default(IToken);
		XAstParserRuleReturnScope caseClause202 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope defaultClause204 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope caseClause206 = default(XAstParserRuleReturnScope);

		object char_literal200_tree = default(object);
		object LT201_tree = default(object);
		object LT203_tree = default(object);
		object LT205_tree = default(object);
		object LT207_tree = default(object);
		object RBRACE208_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "caseBlock");
		DebugLocation(192, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 35)) { return retval; }

			// JavaScript.g:193:5: ( '{' ( ( LT !)* caseClause )* ( ( LT !)* defaultClause ( ( LT !)* caseClause )* )? ( LT !)* RBRACE )
			DebugEnterAlt(1);
			// JavaScript.g:193:7: '{' ( ( LT !)* caseClause )* ( ( LT !)* defaultClause ( ( LT !)* caseClause )* )? ( LT !)* RBRACE
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(193, 7);
			char_literal200=(IToken)Match(input,107,Follow._107_in_caseBlock1498); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal200_tree = (object)adaptor.Create(char_literal200, retval);
			adaptor.AddChild(root_0, char_literal200_tree);
			}
			DebugLocation(193, 11);
			// JavaScript.g:193:11: ( ( LT !)* caseClause )*
			try { DebugEnterSubRule(92);
			while (true)
			{
				int alt92=2;
				try { DebugEnterDecision(92, false);
				try
				{
					alt92 = dfa92.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(92); }
				switch ( alt92 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g:193:12: ( LT !)* caseClause
					{
					DebugLocation(193, 14);
					// JavaScript.g:193:14: ( LT !)*
					try { DebugEnterSubRule(91);
					while (true)
					{
						int alt91=2;
						try { DebugEnterDecision(91, false);
						int LA91_0 = input.LA(1);

						if ((LA91_0==LT))
						{
							alt91 = 1;
						}


						} finally { DebugExitDecision(91); }
						switch ( alt91 )
						{
						case 1:
							DebugEnterAlt(1);
							// JavaScript.g:193:14: LT !
							{
							DebugLocation(193, 14);
							LT201=(IToken)new XToken((IToken)Match(input,LT,Follow._LT_in_caseBlock1501), "LT"); if (state.failed) return retval;

							}
							break;

						default:
							goto loop91;
						}
					}

					loop91:
						;

					} finally { DebugExitSubRule(91); }

					DebugLocation(193, 17);
					PushFollow(Follow._caseClause_in_caseBlock1505);
					caseClause202=caseClause();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, caseClause202.Tree, caseClause202, retval);

					}
					break;

				default:
					goto loop92;
				}
			}

			loop92:
				;

			} finally { DebugExitSubRule(92); }

			DebugLocation(193, 30);
			// JavaScript.g:193:30: ( ( LT !)* defaultClause ( ( LT !)* caseClause )* )?
			int alt96=2;
			try { DebugEnterSubRule(96);
			try { DebugEnterDecision(96, false);
			try
			{
				alt96 = dfa96.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(96); }
			switch (alt96)
			{
			case 1:
				DebugEnterAlt(1);
				// JavaScript.g:193:31: ( LT !)* defaultClause ( ( LT !)* caseClause )*
				{
				DebugLocation(193, 33);
				// JavaScript.g:193:33: ( LT !)*
				try { DebugEnterSubRule(93);
				while (true)
				{
					int alt93=2;
					try { DebugEnterDecision(93, false);
					int LA93_0 = input.LA(1);

					if ((LA93_0==LT))
					{
						alt93 = 1;
					}


					} finally { DebugExitDecision(93); }
					switch ( alt93 )
					{
					case 1:
						DebugEnterAlt(1);
						// JavaScript.g:193:33: LT !
						{
						DebugLocation(193, 33);
						LT203=(IToken)new XToken((IToken)Match(input,LT,Follow._LT_in_caseBlock1510), "LT"); if (state.failed) return retval;

						}
						break;

					default:
						goto loop93;
					}
				}

				loop93:
					;

				} finally { DebugExitSubRule(93); }

				DebugLocation(193, 36);
				PushFollow(Follow._defaultClause_in_caseBlock1514);
				defaultClause204=defaultClause();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, defaultClause204.Tree, defaultClause204, retval);
				DebugLocation(193, 50);
				// JavaScript.g:193:50: ( ( LT !)* caseClause )*
				try { DebugEnterSubRule(95);
				while (true)
				{
					int alt95=2;
					try { DebugEnterDecision(95, false);
					try
					{
						alt95 = dfa95.Predict(input);
					}
					catch (NoViableAltException nvae)
					{
						DebugRecognitionException(nvae);
						throw;
					}
					} finally { DebugExitDecision(95); }
					switch ( alt95 )
					{
					case 1:
						DebugEnterAlt(1);
						// JavaScript.g:193:51: ( LT !)* caseClause
						{
						DebugLocation(193, 53);
						// JavaScript.g:193:53: ( LT !)*
						try { DebugEnterSubRule(94);
						while (true)
						{
							int alt94=2;
							try { DebugEnterDecision(94, false);
							int LA94_0 = input.LA(1);

							if ((LA94_0==LT))
							{
								alt94 = 1;
							}


							} finally { DebugExitDecision(94); }
							switch ( alt94 )
							{
							case 1:
								DebugEnterAlt(1);
								// JavaScript.g:193:53: LT !
								{
								DebugLocation(193, 53);
								LT205=(IToken)new XToken((IToken)Match(input,LT,Follow._LT_in_caseBlock1517), "LT"); if (state.failed) return retval;

								}
								break;

							default:
								goto loop94;
							}
						}

						loop94:
							;

						} finally { DebugExitSubRule(94); }

						DebugLocation(193, 56);
						PushFollow(Follow._caseClause_in_caseBlock1521);
						caseClause206=caseClause();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, caseClause206.Tree, caseClause206, retval);

						}
						break;

					default:
						goto loop95;
					}
				}

				loop95:
					;

				} finally { DebugExitSubRule(95); }


				}
				break;

			}
			} finally { DebugExitSubRule(96); }

			DebugLocation(193, 73);
			// JavaScript.g:193:73: ( LT !)*
			try { DebugEnterSubRule(97);
			while (true)
			{
				int alt97=2;
				try { DebugEnterDecision(97, false);
				int LA97_0 = input.LA(1);

				if ((LA97_0==LT))
				{
					alt97 = 1;
				}


				} finally { DebugExitDecision(97); }
				switch ( alt97 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g:193:73: LT !
					{
					DebugLocation(193, 73);
					LT207=(IToken)new XToken((IToken)Match(input,LT,Follow._LT_in_caseBlock1527), "LT"); if (state.failed) return retval;

					}
					break;

				default:
					goto loop97;
				}
			}

			loop97:
				;

			} finally { DebugExitSubRule(97); }

			DebugLocation(193, 76);
			RBRACE208=(IToken)new XToken((IToken)Match(input,RBRACE,Follow._RBRACE_in_caseBlock1531), "RBRACE"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			RBRACE208_tree = (object)adaptor.Create(RBRACE208, retval);
			adaptor.AddChild(root_0, RBRACE208_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("caseBlock", 35);
			LeaveRule("caseBlock", 35);
			LeaveRule_caseBlock();
			if (state.backtracking > 0) { Memoize(input, 35, caseBlock_StartIndex); }

		}
		DebugLocation(194, 4);
		} finally { DebugExitRule(GrammarFileName, "caseBlock"); }
		return retval;

	}
	// $ANTLR end "caseBlock"

	partial void EnterRule_caseClause();
	partial void LeaveRule_caseClause();

	// $ANTLR start "caseClause"
	// JavaScript.g:196:1: caseClause : 'case' ( LT !)* expression ( LT !)* ':' ( LT !)* ( statementList )? ;
	[GrammarRule("caseClause")]
	public XAstParserRuleReturnScope caseClause()
	{
		EnterRule_caseClause();
		EnterRule("caseClause", 36);
		var retval = new XAstParserRuleReturnScope("caseClause");
		retval.Start = (IToken)input.LT(1);
		int caseClause_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal209 = default(IToken);
		IToken LT210 = default(IToken);
		IToken LT212 = default(IToken);
		IToken char_literal213 = default(IToken);
		IToken LT214 = default(IToken);
		XAstParserRuleReturnScope expression211 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope statementList215 = default(XAstParserRuleReturnScope);

		object string_literal209_tree = default(object);
		object LT210_tree = default(object);
		object LT212_tree = default(object);
		object char_literal213_tree = default(object);
		object LT214_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "caseClause");
		DebugLocation(196, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 36)) { return retval; }

			// JavaScript.g:197:5: ( 'case' ( LT !)* expression ( LT !)* ':' ( LT !)* ( statementList )? )
			DebugEnterAlt(1);
			// JavaScript.g:197:7: 'case' ( LT !)* expression ( LT !)* ':' ( LT !)* ( statementList )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(197, 7);
			string_literal209=(IToken)Match(input,84,Follow._84_in_caseClause1548); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal209_tree = (object)adaptor.Create(string_literal209, retval);
			adaptor.AddChild(root_0, string_literal209_tree);
			}
			DebugLocation(197, 16);
			// JavaScript.g:197:16: ( LT !)*
			try { DebugEnterSubRule(98);
			while (true)
			{
				int alt98=2;
				try { DebugEnterDecision(98, false);
				int LA98_0 = input.LA(1);

				if ((LA98_0==LT))
				{
					alt98 = 1;
				}


				} finally { DebugExitDecision(98); }
				switch ( alt98 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g:197:16: LT !
					{
					DebugLocation(197, 16);
					LT210=(IToken)new XToken((IToken)Match(input,LT,Follow._LT_in_caseClause1550), "LT"); if (state.failed) return retval;

					}
					break;

				default:
					goto loop98;
				}
			}

			loop98:
				;

			} finally { DebugExitSubRule(98); }

			DebugLocation(197, 19);
			PushFollow(Follow._expression_in_caseClause1554);
			expression211=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, expression211.Tree, expression211, retval);
			DebugLocation(197, 32);
			// JavaScript.g:197:32: ( LT !)*
			try { DebugEnterSubRule(99);
			while (true)
			{
				int alt99=2;
				try { DebugEnterDecision(99, false);
				int LA99_0 = input.LA(1);

				if ((LA99_0==LT))
				{
					alt99 = 1;
				}


				} finally { DebugExitDecision(99); }
				switch ( alt99 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g:197:32: LT !
					{
					DebugLocation(197, 32);
					LT212=(IToken)new XToken((IToken)Match(input,LT,Follow._LT_in_caseClause1556), "LT"); if (state.failed) return retval;

					}
					break;

				default:
					goto loop99;
				}
			}

			loop99:
				;

			} finally { DebugExitSubRule(99); }

			DebugLocation(197, 35);
			char_literal213=(IToken)Match(input,64,Follow._64_in_caseClause1560); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal213_tree = (object)adaptor.Create(char_literal213, retval);
			adaptor.AddChild(root_0, char_literal213_tree);
			}
			DebugLocation(197, 41);
			// JavaScript.g:197:41: ( LT !)*
			try { DebugEnterSubRule(100);
			while (true)
			{
				int alt100=2;
				try { DebugEnterDecision(100, false);
				int LA100_0 = input.LA(1);

				if ((LA100_0==LT))
				{
					int LA100_2 = input.LA(2);

					if ((EvaluatePredicate(synpred118_JavaScript_fragment)))
					{
						alt100 = 1;
					}


				}


				} finally { DebugExitDecision(100); }
				switch ( alt100 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g:197:41: LT !
					{
					DebugLocation(197, 41);
					LT214=(IToken)new XToken((IToken)Match(input,LT,Follow._LT_in_caseClause1562), "LT"); if (state.failed) return retval;

					}
					break;

				default:
					goto loop100;
				}
			}

			loop100:
				;

			} finally { DebugExitSubRule(100); }

			DebugLocation(197, 44);
			// JavaScript.g:197:44: ( statementList )?
			int alt101=2;
			try { DebugEnterSubRule(101);
			try { DebugEnterDecision(101, false);
			int LA101_0 = input.LA(1);

			if ((LA101_0==FALSE||LA101_0==Identifier||LA101_0==NULL||LA101_0==NumericLiteral||LA101_0==RegularExpressionLiteral||(LA101_0>=StringLiteral && LA101_0<=TRUE)||LA101_0==43||LA101_0==51||(LA101_0>=54 && LA101_0<=55)||(LA101_0>=58 && LA101_0<=59)||LA101_0==65||LA101_0==80||LA101_0==83||LA101_0==86||(LA101_0>=88 && LA101_0<=89)||(LA101_0>=92 && LA101_0<=94)||(LA101_0>=97 && LA101_0<=107)||LA101_0==111))
			{
				alt101 = 1;
			}
			} finally { DebugExitDecision(101); }
			switch (alt101)
			{
			case 1:
				DebugEnterAlt(1);
				// JavaScript.g:197:44: statementList
				{
				DebugLocation(197, 44);
				PushFollow(Follow._statementList_in_caseClause1566);
				statementList215=statementList();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, statementList215.Tree, statementList215, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(101); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("caseClause", 36);
			LeaveRule("caseClause", 36);
			LeaveRule_caseClause();
			if (state.backtracking > 0) { Memoize(input, 36, caseClause_StartIndex); }

		}
		DebugLocation(198, 4);
		} finally { DebugExitRule(GrammarFileName, "caseClause"); }
		return retval;

	}
	// $ANTLR end "caseClause"

	partial void EnterRule_defaultClause();
	partial void LeaveRule_defaultClause();

	// $ANTLR start "defaultClause"
	// JavaScript.g:200:1: defaultClause : 'default' ( LT !)* ':' ( LT !)* ( statementList )? ;
	[GrammarRule("defaultClause")]
	public XAstParserRuleReturnScope defaultClause()
	{
		EnterRule_defaultClause();
		EnterRule("defaultClause", 37);
		var retval = new XAstParserRuleReturnScope("defaultClause");
		retval.Start = (IToken)input.LT(1);
		int defaultClause_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal216 = default(IToken);
		IToken LT217 = default(IToken);
		IToken char_literal218 = default(IToken);
		IToken LT219 = default(IToken);
		XAstParserRuleReturnScope statementList220 = default(XAstParserRuleReturnScope);

		object string_literal216_tree = default(object);
		object LT217_tree = default(object);
		object char_literal218_tree = default(object);
		object LT219_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "defaultClause");
		DebugLocation(200, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 37)) { return retval; }

			// JavaScript.g:201:5: ( 'default' ( LT !)* ':' ( LT !)* ( statementList )? )
			DebugEnterAlt(1);
			// JavaScript.g:201:7: 'default' ( LT !)* ':' ( LT !)* ( statementList )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(201, 7);
			string_literal216=(IToken)Match(input,87,Follow._87_in_defaultClause1588); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal216_tree = (object)adaptor.Create(string_literal216, retval);
			adaptor.AddChild(root_0, string_literal216_tree);
			}
			DebugLocation(201, 19);
			// JavaScript.g:201:19: ( LT !)*
			try { DebugEnterSubRule(102);
			while (true)
			{
				int alt102=2;
				try { DebugEnterDecision(102, false);
				int LA102_0 = input.LA(1);

				if ((LA102_0==LT))
				{
					alt102 = 1;
				}


				} finally { DebugExitDecision(102); }
				switch ( alt102 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g:201:19: LT !
					{
					DebugLocation(201, 19);
					LT217=(IToken)new XToken((IToken)Match(input,LT,Follow._LT_in_defaultClause1590), "LT"); if (state.failed) return retval;

					}
					break;

				default:
					goto loop102;
				}
			}

			loop102:
				;

			} finally { DebugExitSubRule(102); }

			DebugLocation(201, 22);
			char_literal218=(IToken)Match(input,64,Follow._64_in_defaultClause1594); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal218_tree = (object)adaptor.Create(char_literal218, retval);
			adaptor.AddChild(root_0, char_literal218_tree);
			}
			DebugLocation(201, 28);
			// JavaScript.g:201:28: ( LT !)*
			try { DebugEnterSubRule(103);
			while (true)
			{
				int alt103=2;
				try { DebugEnterDecision(103, false);
				int LA103_0 = input.LA(1);

				if ((LA103_0==LT))
				{
					int LA103_2 = input.LA(2);

					if ((EvaluatePredicate(synpred121_JavaScript_fragment)))
					{
						alt103 = 1;
					}


				}


				} finally { DebugExitDecision(103); }
				switch ( alt103 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g:201:28: LT !
					{
					DebugLocation(201, 28);
					LT219=(IToken)new XToken((IToken)Match(input,LT,Follow._LT_in_defaultClause1596), "LT"); if (state.failed) return retval;

					}
					break;

				default:
					goto loop103;
				}
			}

			loop103:
				;

			} finally { DebugExitSubRule(103); }

			DebugLocation(201, 31);
			// JavaScript.g:201:31: ( statementList )?
			int alt104=2;
			try { DebugEnterSubRule(104);
			try { DebugEnterDecision(104, false);
			int LA104_0 = input.LA(1);

			if ((LA104_0==FALSE||LA104_0==Identifier||LA104_0==NULL||LA104_0==NumericLiteral||LA104_0==RegularExpressionLiteral||(LA104_0>=StringLiteral && LA104_0<=TRUE)||LA104_0==43||LA104_0==51||(LA104_0>=54 && LA104_0<=55)||(LA104_0>=58 && LA104_0<=59)||LA104_0==65||LA104_0==80||LA104_0==83||LA104_0==86||(LA104_0>=88 && LA104_0<=89)||(LA104_0>=92 && LA104_0<=94)||(LA104_0>=97 && LA104_0<=107)||LA104_0==111))
			{
				alt104 = 1;
			}
			} finally { DebugExitDecision(104); }
			switch (alt104)
			{
			case 1:
				DebugEnterAlt(1);
				// JavaScript.g:201:31: statementList
				{
				DebugLocation(201, 31);
				PushFollow(Follow._statementList_in_defaultClause1600);
				statementList220=statementList();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, statementList220.Tree, statementList220, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(104); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("defaultClause", 37);
			LeaveRule("defaultClause", 37);
			LeaveRule_defaultClause();
			if (state.backtracking > 0) { Memoize(input, 37, defaultClause_StartIndex); }

		}
		DebugLocation(202, 4);
		} finally { DebugExitRule(GrammarFileName, "defaultClause"); }
		return retval;

	}
	// $ANTLR end "defaultClause"

	partial void EnterRule_throwStatement();
	partial void LeaveRule_throwStatement();

	// $ANTLR start "throwStatement"
	// JavaScript.g:204:1: throwStatement : 'throw' expression statementEnd ;
	[GrammarRule("throwStatement")]
	public XAstParserRuleReturnScope throwStatement()
	{
		EnterRule_throwStatement();
		EnterRule("throwStatement", 38);
		var retval = new XAstParserRuleReturnScope("throwStatement");
		retval.Start = (IToken)input.LT(1);
		int throwStatement_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal221 = default(IToken);
		XAstParserRuleReturnScope expression222 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope statementEnd223 = default(XAstParserRuleReturnScope);

		object string_literal221_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "throwStatement");
		DebugLocation(204, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 38)) { return retval; }

			// JavaScript.g:205:5: ( 'throw' expression statementEnd )
			DebugEnterAlt(1);
			// JavaScript.g:205:7: 'throw' expression statementEnd
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(205, 7);
			string_literal221=(IToken)Match(input,100,Follow._100_in_throwStatement1622); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal221_tree = (object)adaptor.Create(string_literal221, retval);
			adaptor.AddChild(root_0, string_literal221_tree);
			}
			DebugLocation(205, 15);
			PushFollow(Follow._expression_in_throwStatement1624);
			expression222=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, expression222.Tree, expression222, retval);
			DebugLocation(205, 26);
			PushFollow(Follow._statementEnd_in_throwStatement1626);
			statementEnd223=statementEnd();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, statementEnd223.Tree, statementEnd223, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("throwStatement", 38);
			LeaveRule("throwStatement", 38);
			LeaveRule_throwStatement();
			if (state.backtracking > 0) { Memoize(input, 38, throwStatement_StartIndex); }

		}
		DebugLocation(206, 4);
		} finally { DebugExitRule(GrammarFileName, "throwStatement"); }
		return retval;

	}
	// $ANTLR end "throwStatement"

	partial void EnterRule_tryStatement();
	partial void LeaveRule_tryStatement();

	// $ANTLR start "tryStatement"
	// JavaScript.g:208:1: tryStatement : 'try' ( LT !)* statementBlock ( LT !)* ( finallyClause | catchClause ( ( LT !)* finallyClause )? ) ;
	[GrammarRule("tryStatement")]
	public XAstParserRuleReturnScope tryStatement()
	{
		EnterRule_tryStatement();
		EnterRule("tryStatement", 39);
		var retval = new XAstParserRuleReturnScope("tryStatement");
		retval.Start = (IToken)input.LT(1);
		int tryStatement_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal224 = default(IToken);
		IToken LT225 = default(IToken);
		IToken LT227 = default(IToken);
		IToken LT230 = default(IToken);
		XAstParserRuleReturnScope statementBlock226 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope finallyClause228 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope catchClause229 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope finallyClause231 = default(XAstParserRuleReturnScope);

		object string_literal224_tree = default(object);
		object LT225_tree = default(object);
		object LT227_tree = default(object);
		object LT230_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "tryStatement");
		DebugLocation(208, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 39)) { return retval; }

			// JavaScript.g:209:5: ( 'try' ( LT !)* statementBlock ( LT !)* ( finallyClause | catchClause ( ( LT !)* finallyClause )? ) )
			DebugEnterAlt(1);
			// JavaScript.g:209:7: 'try' ( LT !)* statementBlock ( LT !)* ( finallyClause | catchClause ( ( LT !)* finallyClause )? )
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(209, 7);
			string_literal224=(IToken)Match(input,101,Follow._101_in_tryStatement1643); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal224_tree = (object)adaptor.Create(string_literal224, retval);
			adaptor.AddChild(root_0, string_literal224_tree);
			}
			DebugLocation(209, 15);
			// JavaScript.g:209:15: ( LT !)*
			try { DebugEnterSubRule(105);
			while (true)
			{
				int alt105=2;
				try { DebugEnterDecision(105, false);
				int LA105_0 = input.LA(1);

				if ((LA105_0==LT))
				{
					alt105 = 1;
				}


				} finally { DebugExitDecision(105); }
				switch ( alt105 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g:209:15: LT !
					{
					DebugLocation(209, 15);
					LT225=(IToken)new XToken((IToken)Match(input,LT,Follow._LT_in_tryStatement1645), "LT"); if (state.failed) return retval;

					}
					break;

				default:
					goto loop105;
				}
			}

			loop105:
				;

			} finally { DebugExitSubRule(105); }

			DebugLocation(209, 18);
			PushFollow(Follow._statementBlock_in_tryStatement1649);
			statementBlock226=statementBlock();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, statementBlock226.Tree, statementBlock226, retval);
			DebugLocation(209, 35);
			// JavaScript.g:209:35: ( LT !)*
			try { DebugEnterSubRule(106);
			while (true)
			{
				int alt106=2;
				try { DebugEnterDecision(106, false);
				int LA106_0 = input.LA(1);

				if ((LA106_0==LT))
				{
					alt106 = 1;
				}


				} finally { DebugExitDecision(106); }
				switch ( alt106 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g:209:35: LT !
					{
					DebugLocation(209, 35);
					LT227=(IToken)new XToken((IToken)Match(input,LT,Follow._LT_in_tryStatement1651), "LT"); if (state.failed) return retval;

					}
					break;

				default:
					goto loop106;
				}
			}

			loop106:
				;

			} finally { DebugExitSubRule(106); }

			DebugLocation(209, 38);
			// JavaScript.g:209:38: ( finallyClause | catchClause ( ( LT !)* finallyClause )? )
			int alt109=2;
			try { DebugEnterSubRule(109);
			try { DebugEnterDecision(109, false);
			int LA109_0 = input.LA(1);

			if ((LA109_0==91))
			{
				alt109 = 1;
			}
			else if ((LA109_0==85))
			{
				alt109 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 109, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(109); }
			switch (alt109)
			{
			case 1:
				DebugEnterAlt(1);
				// JavaScript.g:209:39: finallyClause
				{
				DebugLocation(209, 39);
				PushFollow(Follow._finallyClause_in_tryStatement1656);
				finallyClause228=finallyClause();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, finallyClause228.Tree, finallyClause228, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// JavaScript.g:209:55: catchClause ( ( LT !)* finallyClause )?
				{
				DebugLocation(209, 55);
				PushFollow(Follow._catchClause_in_tryStatement1660);
				catchClause229=catchClause();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, catchClause229.Tree, catchClause229, retval);
				DebugLocation(209, 67);
				// JavaScript.g:209:67: ( ( LT !)* finallyClause )?
				int alt108=2;
				try { DebugEnterSubRule(108);
				try { DebugEnterDecision(108, false);
				try
				{
					alt108 = dfa108.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(108); }
				switch (alt108)
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g:209:68: ( LT !)* finallyClause
					{
					DebugLocation(209, 70);
					// JavaScript.g:209:70: ( LT !)*
					try { DebugEnterSubRule(107);
					while (true)
					{
						int alt107=2;
						try { DebugEnterDecision(107, false);
						int LA107_0 = input.LA(1);

						if ((LA107_0==LT))
						{
							alt107 = 1;
						}


						} finally { DebugExitDecision(107); }
						switch ( alt107 )
						{
						case 1:
							DebugEnterAlt(1);
							// JavaScript.g:209:70: LT !
							{
							DebugLocation(209, 70);
							LT230=(IToken)new XToken((IToken)Match(input,LT,Follow._LT_in_tryStatement1663), "LT"); if (state.failed) return retval;

							}
							break;

						default:
							goto loop107;
						}
					}

					loop107:
						;

					} finally { DebugExitSubRule(107); }

					DebugLocation(209, 73);
					PushFollow(Follow._finallyClause_in_tryStatement1667);
					finallyClause231=finallyClause();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, finallyClause231.Tree, finallyClause231, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(108); }


				}
				break;

			}
			} finally { DebugExitSubRule(109); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("tryStatement", 39);
			LeaveRule("tryStatement", 39);
			LeaveRule_tryStatement();
			if (state.backtracking > 0) { Memoize(input, 39, tryStatement_StartIndex); }

		}
		DebugLocation(210, 4);
		} finally { DebugExitRule(GrammarFileName, "tryStatement"); }
		return retval;

	}
	// $ANTLR end "tryStatement"

	partial void EnterRule_catchClause();
	partial void LeaveRule_catchClause();

	// $ANTLR start "catchClause"
	// JavaScript.g:212:1: catchClause : 'catch' ( LT !)* '(' ( LT !)* Identifier ( LT !)* RPAREN ( LT !)* statementBlock ;
	[GrammarRule("catchClause")]
	public XAstParserRuleReturnScope catchClause()
	{
		EnterRule_catchClause();
		EnterRule("catchClause", 40);
		var retval = new XAstParserRuleReturnScope("catchClause");
		retval.Start = (IToken)input.LT(1);
		int catchClause_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal232 = default(IToken);
		IToken LT233 = default(IToken);
		IToken char_literal234 = default(IToken);
		IToken LT235 = default(IToken);
		IToken Identifier236 = default(IToken);
		IToken LT237 = default(IToken);
		IToken RPAREN238 = default(IToken);
		IToken LT239 = default(IToken);
		XAstParserRuleReturnScope statementBlock240 = default(XAstParserRuleReturnScope);

		object string_literal232_tree = default(object);
		object LT233_tree = default(object);
		object char_literal234_tree = default(object);
		object LT235_tree = default(object);
		object Identifier236_tree = default(object);
		object LT237_tree = default(object);
		object RPAREN238_tree = default(object);
		object LT239_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "catchClause");
		DebugLocation(212, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 40)) { return retval; }

			// JavaScript.g:213:5: ( 'catch' ( LT !)* '(' ( LT !)* Identifier ( LT !)* RPAREN ( LT !)* statementBlock )
			DebugEnterAlt(1);
			// JavaScript.g:213:7: 'catch' ( LT !)* '(' ( LT !)* Identifier ( LT !)* RPAREN ( LT !)* statementBlock
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(213, 7);
			string_literal232=(IToken)Match(input,85,Follow._85_in_catchClause1694); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal232_tree = (object)adaptor.Create(string_literal232, retval);
			adaptor.AddChild(root_0, string_literal232_tree);
			}
			DebugLocation(213, 17);
			// JavaScript.g:213:17: ( LT !)*
			try { DebugEnterSubRule(110);
			while (true)
			{
				int alt110=2;
				try { DebugEnterDecision(110, false);
				int LA110_0 = input.LA(1);

				if ((LA110_0==LT))
				{
					alt110 = 1;
				}


				} finally { DebugExitDecision(110); }
				switch ( alt110 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g:213:17: LT !
					{
					DebugLocation(213, 17);
					LT233=(IToken)new XToken((IToken)Match(input,LT,Follow._LT_in_catchClause1696), "LT"); if (state.failed) return retval;

					}
					break;

				default:
					goto loop110;
				}
			}

			loop110:
				;

			} finally { DebugExitSubRule(110); }

			DebugLocation(213, 20);
			char_literal234=(IToken)Match(input,51,Follow._51_in_catchClause1700); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal234_tree = (object)adaptor.Create(char_literal234, retval);
			adaptor.AddChild(root_0, char_literal234_tree);
			}
			DebugLocation(213, 26);
			// JavaScript.g:213:26: ( LT !)*
			try { DebugEnterSubRule(111);
			while (true)
			{
				int alt111=2;
				try { DebugEnterDecision(111, false);
				int LA111_0 = input.LA(1);

				if ((LA111_0==LT))
				{
					alt111 = 1;
				}


				} finally { DebugExitDecision(111); }
				switch ( alt111 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g:213:26: LT !
					{
					DebugLocation(213, 26);
					LT235=(IToken)new XToken((IToken)Match(input,LT,Follow._LT_in_catchClause1702), "LT"); if (state.failed) return retval;

					}
					break;

				default:
					goto loop111;
				}
			}

			loop111:
				;

			} finally { DebugExitSubRule(111); }

			DebugLocation(213, 29);
			Identifier236=(IToken)new XToken((IToken)Match(input,Identifier,Follow._Identifier_in_catchClause1706), "Identifier"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			Identifier236_tree = (object)adaptor.Create(Identifier236, retval);
			adaptor.AddChild(root_0, Identifier236_tree);
			}
			DebugLocation(213, 42);
			// JavaScript.g:213:42: ( LT !)*
			try { DebugEnterSubRule(112);
			while (true)
			{
				int alt112=2;
				try { DebugEnterDecision(112, false);
				int LA112_0 = input.LA(1);

				if ((LA112_0==LT))
				{
					alt112 = 1;
				}


				} finally { DebugExitDecision(112); }
				switch ( alt112 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g:213:42: LT !
					{
					DebugLocation(213, 42);
					LT237=(IToken)new XToken((IToken)Match(input,LT,Follow._LT_in_catchClause1708), "LT"); if (state.failed) return retval;

					}
					break;

				default:
					goto loop112;
				}
			}

			loop112:
				;

			} finally { DebugExitSubRule(112); }

			DebugLocation(213, 45);
			RPAREN238=(IToken)new XToken((IToken)Match(input,RPAREN,Follow._RPAREN_in_catchClause1712), "RPAREN"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			RPAREN238_tree = (object)adaptor.Create(RPAREN238, retval);
			adaptor.AddChild(root_0, RPAREN238_tree);
			}
			DebugLocation(213, 54);
			// JavaScript.g:213:54: ( LT !)*
			try { DebugEnterSubRule(113);
			while (true)
			{
				int alt113=2;
				try { DebugEnterDecision(113, false);
				int LA113_0 = input.LA(1);

				if ((LA113_0==LT))
				{
					alt113 = 1;
				}


				} finally { DebugExitDecision(113); }
				switch ( alt113 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g:213:54: LT !
					{
					DebugLocation(213, 54);
					LT239=(IToken)new XToken((IToken)Match(input,LT,Follow._LT_in_catchClause1714), "LT"); if (state.failed) return retval;

					}
					break;

				default:
					goto loop113;
				}
			}

			loop113:
				;

			} finally { DebugExitSubRule(113); }

			DebugLocation(213, 57);
			PushFollow(Follow._statementBlock_in_catchClause1718);
			statementBlock240=statementBlock();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, statementBlock240.Tree, statementBlock240, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("catchClause", 40);
			LeaveRule("catchClause", 40);
			LeaveRule_catchClause();
			if (state.backtracking > 0) { Memoize(input, 40, catchClause_StartIndex); }

		}
		DebugLocation(214, 4);
		} finally { DebugExitRule(GrammarFileName, "catchClause"); }
		return retval;

	}
	// $ANTLR end "catchClause"

	partial void EnterRule_finallyClause();
	partial void LeaveRule_finallyClause();

	// $ANTLR start "finallyClause"
	// JavaScript.g:216:1: finallyClause : 'finally' ( LT !)* statementBlock ;
	[GrammarRule("finallyClause")]
	public XAstParserRuleReturnScope finallyClause()
	{
		EnterRule_finallyClause();
		EnterRule("finallyClause", 41);
		var retval = new XAstParserRuleReturnScope("finallyClause");
		retval.Start = (IToken)input.LT(1);
		int finallyClause_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal241 = default(IToken);
		IToken LT242 = default(IToken);
		XAstParserRuleReturnScope statementBlock243 = default(XAstParserRuleReturnScope);

		object string_literal241_tree = default(object);
		object LT242_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "finallyClause");
		DebugLocation(216, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 41)) { return retval; }

			// JavaScript.g:217:5: ( 'finally' ( LT !)* statementBlock )
			DebugEnterAlt(1);
			// JavaScript.g:217:7: 'finally' ( LT !)* statementBlock
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(217, 7);
			string_literal241=(IToken)Match(input,91,Follow._91_in_finallyClause1739); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal241_tree = (object)adaptor.Create(string_literal241, retval);
			adaptor.AddChild(root_0, string_literal241_tree);
			}
			DebugLocation(217, 19);
			// JavaScript.g:217:19: ( LT !)*
			try { DebugEnterSubRule(114);
			while (true)
			{
				int alt114=2;
				try { DebugEnterDecision(114, false);
				int LA114_0 = input.LA(1);

				if ((LA114_0==LT))
				{
					alt114 = 1;
				}


				} finally { DebugExitDecision(114); }
				switch ( alt114 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g:217:19: LT !
					{
					DebugLocation(217, 19);
					LT242=(IToken)new XToken((IToken)Match(input,LT,Follow._LT_in_finallyClause1741), "LT"); if (state.failed) return retval;

					}
					break;

				default:
					goto loop114;
				}
			}

			loop114:
				;

			} finally { DebugExitSubRule(114); }

			DebugLocation(217, 22);
			PushFollow(Follow._statementBlock_in_finallyClause1745);
			statementBlock243=statementBlock();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, statementBlock243.Tree, statementBlock243, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("finallyClause", 41);
			LeaveRule("finallyClause", 41);
			LeaveRule_finallyClause();
			if (state.backtracking > 0) { Memoize(input, 41, finallyClause_StartIndex); }

		}
		DebugLocation(218, 4);
		} finally { DebugExitRule(GrammarFileName, "finallyClause"); }
		return retval;

	}
	// $ANTLR end "finallyClause"

	partial void EnterRule_expression();
	partial void LeaveRule_expression();

	// $ANTLR start "expression"
	// JavaScript.g:221:1: expression : assignmentExpression ( ( LT !)* ',' ( LT !)* assignmentExpression )* ;
	[GrammarRule("expression")]
	public XAstParserRuleReturnScope expression()
	{
		EnterRule_expression();
		EnterRule("expression", 42);
		var retval = new XAstParserRuleReturnScope("expression");
		retval.Start = (IToken)input.LT(1);
		int expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken LT245 = default(IToken);
		IToken char_literal246 = default(IToken);
		IToken LT247 = default(IToken);
		XAstParserRuleReturnScope assignmentExpression244 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope assignmentExpression248 = default(XAstParserRuleReturnScope);

		object LT245_tree = default(object);
		object char_literal246_tree = default(object);
		object LT247_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "expression");
		DebugLocation(221, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 42)) { return retval; }

			// JavaScript.g:222:5: ( assignmentExpression ( ( LT !)* ',' ( LT !)* assignmentExpression )* )
			DebugEnterAlt(1);
			// JavaScript.g:222:7: assignmentExpression ( ( LT !)* ',' ( LT !)* assignmentExpression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(222, 7);
			PushFollow(Follow._assignmentExpression_in_expression1763);
			assignmentExpression244=assignmentExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, assignmentExpression244.Tree, assignmentExpression244, retval);
			DebugLocation(222, 28);
			// JavaScript.g:222:28: ( ( LT !)* ',' ( LT !)* assignmentExpression )*
			try { DebugEnterSubRule(117);
			while (true)
			{
				int alt117=2;
				try { DebugEnterDecision(117, false);
				try
				{
					alt117 = dfa117.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(117); }
				switch ( alt117 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g:222:29: ( LT !)* ',' ( LT !)* assignmentExpression
					{
					DebugLocation(222, 31);
					// JavaScript.g:222:31: ( LT !)*
					try { DebugEnterSubRule(115);
					while (true)
					{
						int alt115=2;
						try { DebugEnterDecision(115, false);
						int LA115_0 = input.LA(1);

						if ((LA115_0==LT))
						{
							alt115 = 1;
						}


						} finally { DebugExitDecision(115); }
						switch ( alt115 )
						{
						case 1:
							DebugEnterAlt(1);
							// JavaScript.g:222:31: LT !
							{
							DebugLocation(222, 31);
							LT245=(IToken)new XToken((IToken)Match(input,LT,Follow._LT_in_expression1766), "LT"); if (state.failed) return retval;

							}
							break;

						default:
							goto loop115;
						}
					}

					loop115:
						;

					} finally { DebugExitSubRule(115); }

					DebugLocation(222, 34);
					char_literal246=(IToken)Match(input,57,Follow._57_in_expression1770); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal246_tree = (object)adaptor.Create(char_literal246, retval);
					adaptor.AddChild(root_0, char_literal246_tree);
					}
					DebugLocation(222, 40);
					// JavaScript.g:222:40: ( LT !)*
					try { DebugEnterSubRule(116);
					while (true)
					{
						int alt116=2;
						try { DebugEnterDecision(116, false);
						int LA116_0 = input.LA(1);

						if ((LA116_0==LT))
						{
							alt116 = 1;
						}


						} finally { DebugExitDecision(116); }
						switch ( alt116 )
						{
						case 1:
							DebugEnterAlt(1);
							// JavaScript.g:222:40: LT !
							{
							DebugLocation(222, 40);
							LT247=(IToken)new XToken((IToken)Match(input,LT,Follow._LT_in_expression1772), "LT"); if (state.failed) return retval;

							}
							break;

						default:
							goto loop116;
						}
					}

					loop116:
						;

					} finally { DebugExitSubRule(116); }

					DebugLocation(222, 43);
					PushFollow(Follow._assignmentExpression_in_expression1776);
					assignmentExpression248=assignmentExpression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, assignmentExpression248.Tree, assignmentExpression248, retval);

					}
					break;

				default:
					goto loop117;
				}
			}

			loop117:
				;

			} finally { DebugExitSubRule(117); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression", 42);
			LeaveRule("expression", 42);
			LeaveRule_expression();
			if (state.backtracking > 0) { Memoize(input, 42, expression_StartIndex); }

		}
		DebugLocation(223, 4);
		} finally { DebugExitRule(GrammarFileName, "expression"); }
		return retval;

	}
	// $ANTLR end "expression"

	partial void EnterRule_expressionNoIn();
	partial void LeaveRule_expressionNoIn();

	// $ANTLR start "expressionNoIn"
	// JavaScript.g:225:1: expressionNoIn : assignmentExpressionNoIn ( ( LT !)* ',' ( LT !)* assignmentExpressionNoIn )* ;
	[GrammarRule("expressionNoIn")]
	public XAstParserRuleReturnScope expressionNoIn()
	{
		EnterRule_expressionNoIn();
		EnterRule("expressionNoIn", 43);
		var retval = new XAstParserRuleReturnScope("expressionNoIn");
		retval.Start = (IToken)input.LT(1);
		int expressionNoIn_StartIndex = input.Index;

		object root_0 = default(object);

		IToken LT250 = default(IToken);
		IToken char_literal251 = default(IToken);
		IToken LT252 = default(IToken);
		XAstParserRuleReturnScope assignmentExpressionNoIn249 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope assignmentExpressionNoIn253 = default(XAstParserRuleReturnScope);

		object LT250_tree = default(object);
		object char_literal251_tree = default(object);
		object LT252_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "expressionNoIn");
		DebugLocation(225, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 43)) { return retval; }

			// JavaScript.g:226:5: ( assignmentExpressionNoIn ( ( LT !)* ',' ( LT !)* assignmentExpressionNoIn )* )
			DebugEnterAlt(1);
			// JavaScript.g:226:7: assignmentExpressionNoIn ( ( LT !)* ',' ( LT !)* assignmentExpressionNoIn )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(226, 7);
			PushFollow(Follow._assignmentExpressionNoIn_in_expressionNoIn1799);
			assignmentExpressionNoIn249=assignmentExpressionNoIn();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, assignmentExpressionNoIn249.Tree, assignmentExpressionNoIn249, retval);
			DebugLocation(226, 32);
			// JavaScript.g:226:32: ( ( LT !)* ',' ( LT !)* assignmentExpressionNoIn )*
			try { DebugEnterSubRule(120);
			while (true)
			{
				int alt120=2;
				try { DebugEnterDecision(120, false);
				try
				{
					alt120 = dfa120.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(120); }
				switch ( alt120 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g:226:33: ( LT !)* ',' ( LT !)* assignmentExpressionNoIn
					{
					DebugLocation(226, 35);
					// JavaScript.g:226:35: ( LT !)*
					try { DebugEnterSubRule(118);
					while (true)
					{
						int alt118=2;
						try { DebugEnterDecision(118, false);
						int LA118_0 = input.LA(1);

						if ((LA118_0==LT))
						{
							alt118 = 1;
						}


						} finally { DebugExitDecision(118); }
						switch ( alt118 )
						{
						case 1:
							DebugEnterAlt(1);
							// JavaScript.g:226:35: LT !
							{
							DebugLocation(226, 35);
							LT250=(IToken)new XToken((IToken)Match(input,LT,Follow._LT_in_expressionNoIn1802), "LT"); if (state.failed) return retval;

							}
							break;

						default:
							goto loop118;
						}
					}

					loop118:
						;

					} finally { DebugExitSubRule(118); }

					DebugLocation(226, 38);
					char_literal251=(IToken)Match(input,57,Follow._57_in_expressionNoIn1806); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal251_tree = (object)adaptor.Create(char_literal251, retval);
					adaptor.AddChild(root_0, char_literal251_tree);
					}
					DebugLocation(226, 44);
					// JavaScript.g:226:44: ( LT !)*
					try { DebugEnterSubRule(119);
					while (true)
					{
						int alt119=2;
						try { DebugEnterDecision(119, false);
						int LA119_0 = input.LA(1);

						if ((LA119_0==LT))
						{
							alt119 = 1;
						}


						} finally { DebugExitDecision(119); }
						switch ( alt119 )
						{
						case 1:
							DebugEnterAlt(1);
							// JavaScript.g:226:44: LT !
							{
							DebugLocation(226, 44);
							LT252=(IToken)new XToken((IToken)Match(input,LT,Follow._LT_in_expressionNoIn1808), "LT"); if (state.failed) return retval;

							}
							break;

						default:
							goto loop119;
						}
					}

					loop119:
						;

					} finally { DebugExitSubRule(119); }

					DebugLocation(226, 47);
					PushFollow(Follow._assignmentExpressionNoIn_in_expressionNoIn1812);
					assignmentExpressionNoIn253=assignmentExpressionNoIn();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, assignmentExpressionNoIn253.Tree, assignmentExpressionNoIn253, retval);

					}
					break;

				default:
					goto loop120;
				}
			}

			loop120:
				;

			} finally { DebugExitSubRule(120); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expressionNoIn", 43);
			LeaveRule("expressionNoIn", 43);
			LeaveRule_expressionNoIn();
			if (state.backtracking > 0) { Memoize(input, 43, expressionNoIn_StartIndex); }

		}
		DebugLocation(227, 4);
		} finally { DebugExitRule(GrammarFileName, "expressionNoIn"); }
		return retval;

	}
	// $ANTLR end "expressionNoIn"

	partial void EnterRule_assignmentExpression();
	partial void LeaveRule_assignmentExpression();

	// $ANTLR start "assignmentExpression"
	// JavaScript.g:229:1: assignmentExpression : ( conditionalExpression | leftHandSideExpression ( LT !)* assignmentOperator ( LT !)* assignmentExpression );
	[GrammarRule("assignmentExpression")]
	public XAstParserRuleReturnScope assignmentExpression()
	{
		EnterRule_assignmentExpression();
		EnterRule("assignmentExpression", 44);
		var retval = new XAstParserRuleReturnScope("assignmentExpression");
		retval.Start = (IToken)input.LT(1);
		int assignmentExpression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken LT256 = default(IToken);
		IToken LT258 = default(IToken);
		XAstParserRuleReturnScope conditionalExpression254 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope leftHandSideExpression255 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope assignmentOperator257 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope assignmentExpression259 = default(XAstParserRuleReturnScope);

		object LT256_tree = default(object);
		object LT258_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "assignmentExpression");
		DebugLocation(229, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 44)) { return retval; }

			// JavaScript.g:230:5: ( conditionalExpression | leftHandSideExpression ( LT !)* assignmentOperator ( LT !)* assignmentExpression )
			int alt123=2;
			try { DebugEnterDecision(123, false);
			switch (input.LA(1))
			{
			case THIS:
				{
				int LA123_1 = input.LA(2);

				if ((EvaluatePredicate(synpred139_JavaScript_fragment)))
				{
					alt123 = 1;
				}
				else if ((true))
				{
					alt123 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 123, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Identifier:
				{
				int LA123_2 = input.LA(2);

				if ((EvaluatePredicate(synpred139_JavaScript_fragment)))
				{
					alt123 = 1;
				}
				else if ((true))
				{
					alt123 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 123, 2, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case NULL:
				{
				int LA123_3 = input.LA(2);

				if ((EvaluatePredicate(synpred139_JavaScript_fragment)))
				{
					alt123 = 1;
				}
				else if ((true))
				{
					alt123 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 123, 3, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case TRUE:
				{
				int LA123_4 = input.LA(2);

				if ((EvaluatePredicate(synpred139_JavaScript_fragment)))
				{
					alt123 = 1;
				}
				else if ((true))
				{
					alt123 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 123, 4, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case FALSE:
				{
				int LA123_5 = input.LA(2);

				if ((EvaluatePredicate(synpred139_JavaScript_fragment)))
				{
					alt123 = 1;
				}
				else if ((true))
				{
					alt123 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 123, 5, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case StringLiteral:
				{
				int LA123_6 = input.LA(2);

				if ((EvaluatePredicate(synpred139_JavaScript_fragment)))
				{
					alt123 = 1;
				}
				else if ((true))
				{
					alt123 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 123, 6, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case NumericLiteral:
				{
				int LA123_7 = input.LA(2);

				if ((EvaluatePredicate(synpred139_JavaScript_fragment)))
				{
					alt123 = 1;
				}
				else if ((true))
				{
					alt123 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 123, 7, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case RegularExpressionLiteral:
				{
				int LA123_8 = input.LA(2);

				if ((EvaluatePredicate(synpred139_JavaScript_fragment)))
				{
					alt123 = 1;
				}
				else if ((true))
				{
					alt123 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 123, 8, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 80:
				{
				int LA123_9 = input.LA(2);

				if ((EvaluatePredicate(synpred139_JavaScript_fragment)))
				{
					alt123 = 1;
				}
				else if ((true))
				{
					alt123 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 123, 9, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 107:
				{
				int LA123_10 = input.LA(2);

				if ((EvaluatePredicate(synpred139_JavaScript_fragment)))
				{
					alt123 = 1;
				}
				else if ((true))
				{
					alt123 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 123, 10, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 51:
				{
				int LA123_11 = input.LA(2);

				if ((EvaluatePredicate(synpred139_JavaScript_fragment)))
				{
					alt123 = 1;
				}
				else if ((true))
				{
					alt123 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 123, 11, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 93:
				{
				int LA123_12 = input.LA(2);

				if ((EvaluatePredicate(synpred139_JavaScript_fragment)))
				{
					alt123 = 1;
				}
				else if ((true))
				{
					alt123 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 123, 12, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 97:
				{
				int LA123_13 = input.LA(2);

				if ((EvaluatePredicate(synpred139_JavaScript_fragment)))
				{
					alt123 = 1;
				}
				else if ((true))
				{
					alt123 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 123, 13, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 43:
			case 54:
			case 55:
			case 58:
			case 59:
			case 88:
			case 102:
			case 104:
			case 111:
				{
				alt123 = 1;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 123, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(123); }
			switch (alt123)
			{
			case 1:
				DebugEnterAlt(1);
				// JavaScript.g:230:7: conditionalExpression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(230, 7);
				PushFollow(Follow._conditionalExpression_in_assignmentExpression1835);
				conditionalExpression254=conditionalExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, conditionalExpression254.Tree, conditionalExpression254, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// JavaScript.g:231:7: leftHandSideExpression ( LT !)* assignmentOperator ( LT !)* assignmentExpression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(231, 7);
				PushFollow(Follow._leftHandSideExpression_in_assignmentExpression1843);
				leftHandSideExpression255=leftHandSideExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, leftHandSideExpression255.Tree, leftHandSideExpression255, retval);
				DebugLocation(231, 32);
				// JavaScript.g:231:32: ( LT !)*
				try { DebugEnterSubRule(121);
				while (true)
				{
					int alt121=2;
					try { DebugEnterDecision(121, false);
					int LA121_0 = input.LA(1);

					if ((LA121_0==LT))
					{
						alt121 = 1;
					}


					} finally { DebugExitDecision(121); }
					switch ( alt121 )
					{
					case 1:
						DebugEnterAlt(1);
						// JavaScript.g:231:32: LT !
						{
						DebugLocation(231, 32);
						LT256=(IToken)new XToken((IToken)Match(input,LT,Follow._LT_in_assignmentExpression1845), "LT"); if (state.failed) return retval;

						}
						break;

					default:
						goto loop121;
					}
				}

				loop121:
					;

				} finally { DebugExitSubRule(121); }

				DebugLocation(231, 35);
				PushFollow(Follow._assignmentOperator_in_assignmentExpression1849);
				assignmentOperator257=assignmentOperator();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, assignmentOperator257.Tree, assignmentOperator257, retval);
				DebugLocation(231, 56);
				// JavaScript.g:231:56: ( LT !)*
				try { DebugEnterSubRule(122);
				while (true)
				{
					int alt122=2;
					try { DebugEnterDecision(122, false);
					int LA122_0 = input.LA(1);

					if ((LA122_0==LT))
					{
						alt122 = 1;
					}


					} finally { DebugExitDecision(122); }
					switch ( alt122 )
					{
					case 1:
						DebugEnterAlt(1);
						// JavaScript.g:231:56: LT !
						{
						DebugLocation(231, 56);
						LT258=(IToken)new XToken((IToken)Match(input,LT,Follow._LT_in_assignmentExpression1851), "LT"); if (state.failed) return retval;

						}
						break;

					default:
						goto loop122;
					}
				}

				loop122:
					;

				} finally { DebugExitSubRule(122); }

				DebugLocation(231, 59);
				PushFollow(Follow._assignmentExpression_in_assignmentExpression1855);
				assignmentExpression259=assignmentExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, assignmentExpression259.Tree, assignmentExpression259, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("assignmentExpression", 44);
			LeaveRule("assignmentExpression", 44);
			LeaveRule_assignmentExpression();
			if (state.backtracking > 0) { Memoize(input, 44, assignmentExpression_StartIndex); }

		}
		DebugLocation(232, 4);
		} finally { DebugExitRule(GrammarFileName, "assignmentExpression"); }
		return retval;

	}
	// $ANTLR end "assignmentExpression"

	partial void EnterRule_assignmentExpressionNoIn();
	partial void LeaveRule_assignmentExpressionNoIn();

	// $ANTLR start "assignmentExpressionNoIn"
	// JavaScript.g:234:1: assignmentExpressionNoIn : ( conditionalExpressionNoIn | leftHandSideExpression ( LT !)* assignmentOperator ( LT !)* assignmentExpressionNoIn );
	[GrammarRule("assignmentExpressionNoIn")]
	public XAstParserRuleReturnScope assignmentExpressionNoIn()
	{
		EnterRule_assignmentExpressionNoIn();
		EnterRule("assignmentExpressionNoIn", 45);
		var retval = new XAstParserRuleReturnScope("assignmentExpressionNoIn");
		retval.Start = (IToken)input.LT(1);
		int assignmentExpressionNoIn_StartIndex = input.Index;

		object root_0 = default(object);

		IToken LT262 = default(IToken);
		IToken LT264 = default(IToken);
		XAstParserRuleReturnScope conditionalExpressionNoIn260 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope leftHandSideExpression261 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope assignmentOperator263 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope assignmentExpressionNoIn265 = default(XAstParserRuleReturnScope);

		object LT262_tree = default(object);
		object LT264_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "assignmentExpressionNoIn");
		DebugLocation(234, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 45)) { return retval; }

			// JavaScript.g:235:5: ( conditionalExpressionNoIn | leftHandSideExpression ( LT !)* assignmentOperator ( LT !)* assignmentExpressionNoIn )
			int alt126=2;
			try { DebugEnterDecision(126, false);
			switch (input.LA(1))
			{
			case THIS:
				{
				int LA126_1 = input.LA(2);

				if ((EvaluatePredicate(synpred142_JavaScript_fragment)))
				{
					alt126 = 1;
				}
				else if ((true))
				{
					alt126 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 126, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Identifier:
				{
				int LA126_2 = input.LA(2);

				if ((EvaluatePredicate(synpred142_JavaScript_fragment)))
				{
					alt126 = 1;
				}
				else if ((true))
				{
					alt126 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 126, 2, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case NULL:
				{
				int LA126_3 = input.LA(2);

				if ((EvaluatePredicate(synpred142_JavaScript_fragment)))
				{
					alt126 = 1;
				}
				else if ((true))
				{
					alt126 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 126, 3, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case TRUE:
				{
				int LA126_4 = input.LA(2);

				if ((EvaluatePredicate(synpred142_JavaScript_fragment)))
				{
					alt126 = 1;
				}
				else if ((true))
				{
					alt126 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 126, 4, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case FALSE:
				{
				int LA126_5 = input.LA(2);

				if ((EvaluatePredicate(synpred142_JavaScript_fragment)))
				{
					alt126 = 1;
				}
				else if ((true))
				{
					alt126 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 126, 5, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case StringLiteral:
				{
				int LA126_6 = input.LA(2);

				if ((EvaluatePredicate(synpred142_JavaScript_fragment)))
				{
					alt126 = 1;
				}
				else if ((true))
				{
					alt126 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 126, 6, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case NumericLiteral:
				{
				int LA126_7 = input.LA(2);

				if ((EvaluatePredicate(synpred142_JavaScript_fragment)))
				{
					alt126 = 1;
				}
				else if ((true))
				{
					alt126 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 126, 7, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case RegularExpressionLiteral:
				{
				int LA126_8 = input.LA(2);

				if ((EvaluatePredicate(synpred142_JavaScript_fragment)))
				{
					alt126 = 1;
				}
				else if ((true))
				{
					alt126 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 126, 8, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 80:
				{
				int LA126_9 = input.LA(2);

				if ((EvaluatePredicate(synpred142_JavaScript_fragment)))
				{
					alt126 = 1;
				}
				else if ((true))
				{
					alt126 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 126, 9, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 107:
				{
				int LA126_10 = input.LA(2);

				if ((EvaluatePredicate(synpred142_JavaScript_fragment)))
				{
					alt126 = 1;
				}
				else if ((true))
				{
					alt126 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 126, 10, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 51:
				{
				int LA126_11 = input.LA(2);

				if ((EvaluatePredicate(synpred142_JavaScript_fragment)))
				{
					alt126 = 1;
				}
				else if ((true))
				{
					alt126 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 126, 11, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 93:
				{
				int LA126_12 = input.LA(2);

				if ((EvaluatePredicate(synpred142_JavaScript_fragment)))
				{
					alt126 = 1;
				}
				else if ((true))
				{
					alt126 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 126, 12, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 97:
				{
				int LA126_13 = input.LA(2);

				if ((EvaluatePredicate(synpred142_JavaScript_fragment)))
				{
					alt126 = 1;
				}
				else if ((true))
				{
					alt126 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 126, 13, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 43:
			case 54:
			case 55:
			case 58:
			case 59:
			case 88:
			case 102:
			case 104:
			case 111:
				{
				alt126 = 1;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 126, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(126); }
			switch (alt126)
			{
			case 1:
				DebugEnterAlt(1);
				// JavaScript.g:235:7: conditionalExpressionNoIn
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(235, 7);
				PushFollow(Follow._conditionalExpressionNoIn_in_assignmentExpressionNoIn1876);
				conditionalExpressionNoIn260=conditionalExpressionNoIn();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, conditionalExpressionNoIn260.Tree, conditionalExpressionNoIn260, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// JavaScript.g:236:7: leftHandSideExpression ( LT !)* assignmentOperator ( LT !)* assignmentExpressionNoIn
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(236, 7);
				PushFollow(Follow._leftHandSideExpression_in_assignmentExpressionNoIn1884);
				leftHandSideExpression261=leftHandSideExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, leftHandSideExpression261.Tree, leftHandSideExpression261, retval);
				DebugLocation(236, 32);
				// JavaScript.g:236:32: ( LT !)*
				try { DebugEnterSubRule(124);
				while (true)
				{
					int alt124=2;
					try { DebugEnterDecision(124, false);
					int LA124_0 = input.LA(1);

					if ((LA124_0==LT))
					{
						alt124 = 1;
					}


					} finally { DebugExitDecision(124); }
					switch ( alt124 )
					{
					case 1:
						DebugEnterAlt(1);
						// JavaScript.g:236:32: LT !
						{
						DebugLocation(236, 32);
						LT262=(IToken)new XToken((IToken)Match(input,LT,Follow._LT_in_assignmentExpressionNoIn1886), "LT"); if (state.failed) return retval;

						}
						break;

					default:
						goto loop124;
					}
				}

				loop124:
					;

				} finally { DebugExitSubRule(124); }

				DebugLocation(236, 35);
				PushFollow(Follow._assignmentOperator_in_assignmentExpressionNoIn1890);
				assignmentOperator263=assignmentOperator();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, assignmentOperator263.Tree, assignmentOperator263, retval);
				DebugLocation(236, 56);
				// JavaScript.g:236:56: ( LT !)*
				try { DebugEnterSubRule(125);
				while (true)
				{
					int alt125=2;
					try { DebugEnterDecision(125, false);
					int LA125_0 = input.LA(1);

					if ((LA125_0==LT))
					{
						alt125 = 1;
					}


					} finally { DebugExitDecision(125); }
					switch ( alt125 )
					{
					case 1:
						DebugEnterAlt(1);
						// JavaScript.g:236:56: LT !
						{
						DebugLocation(236, 56);
						LT264=(IToken)new XToken((IToken)Match(input,LT,Follow._LT_in_assignmentExpressionNoIn1892), "LT"); if (state.failed) return retval;

						}
						break;

					default:
						goto loop125;
					}
				}

				loop125:
					;

				} finally { DebugExitSubRule(125); }

				DebugLocation(236, 59);
				PushFollow(Follow._assignmentExpressionNoIn_in_assignmentExpressionNoIn1896);
				assignmentExpressionNoIn265=assignmentExpressionNoIn();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, assignmentExpressionNoIn265.Tree, assignmentExpressionNoIn265, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("assignmentExpressionNoIn", 45);
			LeaveRule("assignmentExpressionNoIn", 45);
			LeaveRule_assignmentExpressionNoIn();
			if (state.backtracking > 0) { Memoize(input, 45, assignmentExpressionNoIn_StartIndex); }

		}
		DebugLocation(237, 4);
		} finally { DebugExitRule(GrammarFileName, "assignmentExpressionNoIn"); }
		return retval;

	}
	// $ANTLR end "assignmentExpressionNoIn"

	partial void EnterRule_leftHandSideExpression();
	partial void LeaveRule_leftHandSideExpression();

	// $ANTLR start "leftHandSideExpression"
	// JavaScript.g:239:1: leftHandSideExpression : ( callExpression | newExpression );
	[GrammarRule("leftHandSideExpression")]
	public XAstParserRuleReturnScope leftHandSideExpression()
	{
		EnterRule_leftHandSideExpression();
		EnterRule("leftHandSideExpression", 46);
		var retval = new XAstParserRuleReturnScope("leftHandSideExpression");
		retval.Start = (IToken)input.LT(1);
		int leftHandSideExpression_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope callExpression266 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope newExpression267 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "leftHandSideExpression");
		DebugLocation(239, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 46)) { return retval; }

			// JavaScript.g:240:5: ( callExpression | newExpression )
			int alt127=2;
			try { DebugEnterDecision(127, false);
			switch (input.LA(1))
			{
			case THIS:
				{
				int LA127_1 = input.LA(2);

				if ((EvaluatePredicate(synpred145_JavaScript_fragment)))
				{
					alt127 = 1;
				}
				else if ((true))
				{
					alt127 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 127, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Identifier:
				{
				int LA127_2 = input.LA(2);

				if ((EvaluatePredicate(synpred145_JavaScript_fragment)))
				{
					alt127 = 1;
				}
				else if ((true))
				{
					alt127 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 127, 2, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case NULL:
				{
				int LA127_3 = input.LA(2);

				if ((EvaluatePredicate(synpred145_JavaScript_fragment)))
				{
					alt127 = 1;
				}
				else if ((true))
				{
					alt127 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 127, 3, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case TRUE:
				{
				int LA127_4 = input.LA(2);

				if ((EvaluatePredicate(synpred145_JavaScript_fragment)))
				{
					alt127 = 1;
				}
				else if ((true))
				{
					alt127 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 127, 4, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case FALSE:
				{
				int LA127_5 = input.LA(2);

				if ((EvaluatePredicate(synpred145_JavaScript_fragment)))
				{
					alt127 = 1;
				}
				else if ((true))
				{
					alt127 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 127, 5, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case StringLiteral:
				{
				int LA127_6 = input.LA(2);

				if ((EvaluatePredicate(synpred145_JavaScript_fragment)))
				{
					alt127 = 1;
				}
				else if ((true))
				{
					alt127 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 127, 6, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case NumericLiteral:
				{
				int LA127_7 = input.LA(2);

				if ((EvaluatePredicate(synpred145_JavaScript_fragment)))
				{
					alt127 = 1;
				}
				else if ((true))
				{
					alt127 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 127, 7, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case RegularExpressionLiteral:
				{
				int LA127_8 = input.LA(2);

				if ((EvaluatePredicate(synpred145_JavaScript_fragment)))
				{
					alt127 = 1;
				}
				else if ((true))
				{
					alt127 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 127, 8, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 80:
				{
				int LA127_9 = input.LA(2);

				if ((EvaluatePredicate(synpred145_JavaScript_fragment)))
				{
					alt127 = 1;
				}
				else if ((true))
				{
					alt127 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 127, 9, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 107:
				{
				int LA127_10 = input.LA(2);

				if ((EvaluatePredicate(synpred145_JavaScript_fragment)))
				{
					alt127 = 1;
				}
				else if ((true))
				{
					alt127 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 127, 10, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 51:
				{
				int LA127_11 = input.LA(2);

				if ((EvaluatePredicate(synpred145_JavaScript_fragment)))
				{
					alt127 = 1;
				}
				else if ((true))
				{
					alt127 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 127, 11, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 93:
				{
				int LA127_12 = input.LA(2);

				if ((EvaluatePredicate(synpred145_JavaScript_fragment)))
				{
					alt127 = 1;
				}
				else if ((true))
				{
					alt127 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 127, 12, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 97:
				{
				int LA127_13 = input.LA(2);

				if ((EvaluatePredicate(synpred145_JavaScript_fragment)))
				{
					alt127 = 1;
				}
				else if ((true))
				{
					alt127 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 127, 13, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 127, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(127); }
			switch (alt127)
			{
			case 1:
				DebugEnterAlt(1);
				// JavaScript.g:240:7: callExpression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(240, 7);
				PushFollow(Follow._callExpression_in_leftHandSideExpression1917);
				callExpression266=callExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, callExpression266.Tree, callExpression266, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// JavaScript.g:241:7: newExpression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(241, 7);
				PushFollow(Follow._newExpression_in_leftHandSideExpression1925);
				newExpression267=newExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, newExpression267.Tree, newExpression267, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("leftHandSideExpression", 46);
			LeaveRule("leftHandSideExpression", 46);
			LeaveRule_leftHandSideExpression();
			if (state.backtracking > 0) { Memoize(input, 46, leftHandSideExpression_StartIndex); }

		}
		DebugLocation(242, 4);
		} finally { DebugExitRule(GrammarFileName, "leftHandSideExpression"); }
		return retval;

	}
	// $ANTLR end "leftHandSideExpression"

	partial void EnterRule_newExpression();
	partial void LeaveRule_newExpression();

	// $ANTLR start "newExpression"
	// JavaScript.g:244:1: newExpression : ( memberExpression | 'new' ( LT !)* newExpression );
	[GrammarRule("newExpression")]
	public XAstParserRuleReturnScope newExpression()
	{
		EnterRule_newExpression();
		EnterRule("newExpression", 47);
		var retval = new XAstParserRuleReturnScope("newExpression");
		retval.Start = (IToken)input.LT(1);
		int newExpression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal269 = default(IToken);
		IToken LT270 = default(IToken);
		XAstParserRuleReturnScope memberExpression268 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope newExpression271 = default(XAstParserRuleReturnScope);

		object string_literal269_tree = default(object);
		object LT270_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "newExpression");
		DebugLocation(244, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 47)) { return retval; }

			// JavaScript.g:245:5: ( memberExpression | 'new' ( LT !)* newExpression )
			int alt129=2;
			try { DebugEnterDecision(129, false);
			int LA129_0 = input.LA(1);

			if ((LA129_0==FALSE||LA129_0==Identifier||LA129_0==NULL||LA129_0==NumericLiteral||LA129_0==RegularExpressionLiteral||(LA129_0>=StringLiteral && LA129_0<=TRUE)||LA129_0==51||LA129_0==80||LA129_0==93||LA129_0==107))
			{
				alt129 = 1;
			}
			else if ((LA129_0==97))
			{
				int LA129_13 = input.LA(2);

				if ((EvaluatePredicate(synpred146_JavaScript_fragment)))
				{
					alt129 = 1;
				}
				else if ((true))
				{
					alt129 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 129, 13, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 129, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(129); }
			switch (alt129)
			{
			case 1:
				DebugEnterAlt(1);
				// JavaScript.g:245:7: memberExpression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(245, 7);
				PushFollow(Follow._memberExpression_in_newExpression1946);
				memberExpression268=memberExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, memberExpression268.Tree, memberExpression268, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// JavaScript.g:246:7: 'new' ( LT !)* newExpression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(246, 7);
				string_literal269=(IToken)Match(input,97,Follow._97_in_newExpression1954); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal269_tree = (object)adaptor.Create(string_literal269, retval);
				adaptor.AddChild(root_0, string_literal269_tree);
				}
				DebugLocation(246, 15);
				// JavaScript.g:246:15: ( LT !)*
				try { DebugEnterSubRule(128);
				while (true)
				{
					int alt128=2;
					try { DebugEnterDecision(128, false);
					int LA128_0 = input.LA(1);

					if ((LA128_0==LT))
					{
						alt128 = 1;
					}


					} finally { DebugExitDecision(128); }
					switch ( alt128 )
					{
					case 1:
						DebugEnterAlt(1);
						// JavaScript.g:246:15: LT !
						{
						DebugLocation(246, 15);
						LT270=(IToken)new XToken((IToken)Match(input,LT,Follow._LT_in_newExpression1956), "LT"); if (state.failed) return retval;

						}
						break;

					default:
						goto loop128;
					}
				}

				loop128:
					;

				} finally { DebugExitSubRule(128); }

				DebugLocation(246, 18);
				PushFollow(Follow._newExpression_in_newExpression1960);
				newExpression271=newExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, newExpression271.Tree, newExpression271, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("newExpression", 47);
			LeaveRule("newExpression", 47);
			LeaveRule_newExpression();
			if (state.backtracking > 0) { Memoize(input, 47, newExpression_StartIndex); }

		}
		DebugLocation(247, 4);
		} finally { DebugExitRule(GrammarFileName, "newExpression"); }
		return retval;

	}
	// $ANTLR end "newExpression"

	partial void EnterRule_memberExpression();
	partial void LeaveRule_memberExpression();

	// $ANTLR start "memberExpression"
	// JavaScript.g:249:1: memberExpression : ( primaryExpression | functionExpression | 'new' ( LT !)* memberExpression ( LT !)* arguments ) ( ( LT !)* memberExpressionSuffix )* ;
	[GrammarRule("memberExpression")]
	public XAstParserRuleReturnScope memberExpression()
	{
		EnterRule_memberExpression();
		EnterRule("memberExpression", 48);
		var retval = new XAstParserRuleReturnScope("memberExpression");
		retval.Start = (IToken)input.LT(1);
		int memberExpression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal274 = default(IToken);
		IToken LT275 = default(IToken);
		IToken LT277 = default(IToken);
		IToken LT279 = default(IToken);
		XAstParserRuleReturnScope primaryExpression272 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope functionExpression273 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope memberExpression276 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope arguments278 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope memberExpressionSuffix280 = default(XAstParserRuleReturnScope);

		object string_literal274_tree = default(object);
		object LT275_tree = default(object);
		object LT277_tree = default(object);
		object LT279_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "memberExpression");
		DebugLocation(249, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 48)) { return retval; }

			// JavaScript.g:250:5: ( ( primaryExpression | functionExpression | 'new' ( LT !)* memberExpression ( LT !)* arguments ) ( ( LT !)* memberExpressionSuffix )* )
			DebugEnterAlt(1);
			// JavaScript.g:250:7: ( primaryExpression | functionExpression | 'new' ( LT !)* memberExpression ( LT !)* arguments ) ( ( LT !)* memberExpressionSuffix )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(250, 7);
			// JavaScript.g:250:7: ( primaryExpression | functionExpression | 'new' ( LT !)* memberExpression ( LT !)* arguments )
			int alt132=3;
			try { DebugEnterSubRule(132);
			try { DebugEnterDecision(132, false);
			switch (input.LA(1))
			{
			case FALSE:
			case Identifier:
			case NULL:
			case NumericLiteral:
			case RegularExpressionLiteral:
			case StringLiteral:
			case THIS:
			case TRUE:
			case 51:
			case 80:
			case 107:
				{
				alt132 = 1;
				}
				break;
			case 93:
				{
				alt132 = 2;
				}
				break;
			case 97:
				{
				alt132 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 132, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(132); }
			switch (alt132)
			{
			case 1:
				DebugEnterAlt(1);
				// JavaScript.g:250:8: primaryExpression
				{
				DebugLocation(250, 8);
				PushFollow(Follow._primaryExpression_in_memberExpression1982);
				primaryExpression272=primaryExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, primaryExpression272.Tree, primaryExpression272, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// JavaScript.g:250:28: functionExpression
				{
				DebugLocation(250, 28);
				PushFollow(Follow._functionExpression_in_memberExpression1986);
				functionExpression273=functionExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, functionExpression273.Tree, functionExpression273, retval);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// JavaScript.g:250:49: 'new' ( LT !)* memberExpression ( LT !)* arguments
				{
				DebugLocation(250, 49);
				string_literal274=(IToken)Match(input,97,Follow._97_in_memberExpression1990); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal274_tree = (object)adaptor.Create(string_literal274, retval);
				adaptor.AddChild(root_0, string_literal274_tree);
				}
				DebugLocation(250, 57);
				// JavaScript.g:250:57: ( LT !)*
				try { DebugEnterSubRule(130);
				while (true)
				{
					int alt130=2;
					try { DebugEnterDecision(130, false);
					int LA130_0 = input.LA(1);

					if ((LA130_0==LT))
					{
						alt130 = 1;
					}


					} finally { DebugExitDecision(130); }
					switch ( alt130 )
					{
					case 1:
						DebugEnterAlt(1);
						// JavaScript.g:250:57: LT !
						{
						DebugLocation(250, 57);
						LT275=(IToken)new XToken((IToken)Match(input,LT,Follow._LT_in_memberExpression1992), "LT"); if (state.failed) return retval;

						}
						break;

					default:
						goto loop130;
					}
				}

				loop130:
					;

				} finally { DebugExitSubRule(130); }

				DebugLocation(250, 60);
				PushFollow(Follow._memberExpression_in_memberExpression1996);
				memberExpression276=memberExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, memberExpression276.Tree, memberExpression276, retval);
				DebugLocation(250, 79);
				// JavaScript.g:250:79: ( LT !)*
				try { DebugEnterSubRule(131);
				while (true)
				{
					int alt131=2;
					try { DebugEnterDecision(131, false);
					int LA131_0 = input.LA(1);

					if ((LA131_0==LT))
					{
						alt131 = 1;
					}


					} finally { DebugExitDecision(131); }
					switch ( alt131 )
					{
					case 1:
						DebugEnterAlt(1);
						// JavaScript.g:250:79: LT !
						{
						DebugLocation(250, 79);
						LT277=(IToken)new XToken((IToken)Match(input,LT,Follow._LT_in_memberExpression1998), "LT"); if (state.failed) return retval;

						}
						break;

					default:
						goto loop131;
					}
				}

				loop131:
					;

				} finally { DebugExitSubRule(131); }

				DebugLocation(250, 82);
				PushFollow(Follow._arguments_in_memberExpression2002);
				arguments278=arguments();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, arguments278.Tree, arguments278, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(132); }

			DebugLocation(250, 93);
			// JavaScript.g:250:93: ( ( LT !)* memberExpressionSuffix )*
			try { DebugEnterSubRule(134);
			while (true)
			{
				int alt134=2;
				try { DebugEnterDecision(134, false);
				switch (input.LA(1))
				{
				case LT:
					{
					int LA134_1 = input.LA(2);

					if ((EvaluatePredicate(synpred153_JavaScript_fragment)))
					{
						alt134 = 1;
					}


					}
					break;
				case 80:
					{
					int LA134_32 = input.LA(2);

					if ((EvaluatePredicate(synpred153_JavaScript_fragment)))
					{
						alt134 = 1;
					}


					}
					break;
				case 61:
					{
					alt134 = 1;
					}
					break;
				}

				} finally { DebugExitDecision(134); }
				switch ( alt134 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g:250:94: ( LT !)* memberExpressionSuffix
					{
					DebugLocation(250, 96);
					// JavaScript.g:250:96: ( LT !)*
					try { DebugEnterSubRule(133);
					while (true)
					{
						int alt133=2;
						try { DebugEnterDecision(133, false);
						int LA133_0 = input.LA(1);

						if ((LA133_0==LT))
						{
							alt133 = 1;
						}


						} finally { DebugExitDecision(133); }
						switch ( alt133 )
						{
						case 1:
							DebugEnterAlt(1);
							// JavaScript.g:250:96: LT !
							{
							DebugLocation(250, 96);
							LT279=(IToken)new XToken((IToken)Match(input,LT,Follow._LT_in_memberExpression2006), "LT"); if (state.failed) return retval;

							}
							break;

						default:
							goto loop133;
						}
					}

					loop133:
						;

					} finally { DebugExitSubRule(133); }

					DebugLocation(250, 99);
					PushFollow(Follow._memberExpressionSuffix_in_memberExpression2010);
					memberExpressionSuffix280=memberExpressionSuffix();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, memberExpressionSuffix280.Tree, memberExpressionSuffix280, retval);

					}
					break;

				default:
					goto loop134;
				}
			}

			loop134:
				;

			} finally { DebugExitSubRule(134); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("memberExpression", 48);
			LeaveRule("memberExpression", 48);
			LeaveRule_memberExpression();
			if (state.backtracking > 0) { Memoize(input, 48, memberExpression_StartIndex); }

		}
		DebugLocation(251, 4);
		} finally { DebugExitRule(GrammarFileName, "memberExpression"); }
		return retval;

	}
	// $ANTLR end "memberExpression"

	partial void EnterRule_memberExpressionSuffix();
	partial void LeaveRule_memberExpressionSuffix();

	// $ANTLR start "memberExpressionSuffix"
	// JavaScript.g:253:1: memberExpressionSuffix : ( indexSuffix | propertyReferenceSuffix );
	[GrammarRule("memberExpressionSuffix")]
	public XAstParserRuleReturnScope memberExpressionSuffix()
	{
		EnterRule_memberExpressionSuffix();
		EnterRule("memberExpressionSuffix", 49);
		var retval = new XAstParserRuleReturnScope("memberExpressionSuffix");
		retval.Start = (IToken)input.LT(1);
		int memberExpressionSuffix_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope indexSuffix281 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope propertyReferenceSuffix282 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "memberExpressionSuffix");
		DebugLocation(253, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 49)) { return retval; }

			// JavaScript.g:254:5: ( indexSuffix | propertyReferenceSuffix )
			int alt135=2;
			try { DebugEnterDecision(135, false);
			int LA135_0 = input.LA(1);

			if ((LA135_0==80))
			{
				alt135 = 1;
			}
			else if ((LA135_0==61))
			{
				alt135 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 135, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(135); }
			switch (alt135)
			{
			case 1:
				DebugEnterAlt(1);
				// JavaScript.g:254:7: indexSuffix
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(254, 7);
				PushFollow(Follow._indexSuffix_in_memberExpressionSuffix2033);
				indexSuffix281=indexSuffix();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, indexSuffix281.Tree, indexSuffix281, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// JavaScript.g:255:7: propertyReferenceSuffix
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(255, 7);
				PushFollow(Follow._propertyReferenceSuffix_in_memberExpressionSuffix2041);
				propertyReferenceSuffix282=propertyReferenceSuffix();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, propertyReferenceSuffix282.Tree, propertyReferenceSuffix282, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("memberExpressionSuffix", 49);
			LeaveRule("memberExpressionSuffix", 49);
			LeaveRule_memberExpressionSuffix();
			if (state.backtracking > 0) { Memoize(input, 49, memberExpressionSuffix_StartIndex); }

		}
		DebugLocation(256, 4);
		} finally { DebugExitRule(GrammarFileName, "memberExpressionSuffix"); }
		return retval;

	}
	// $ANTLR end "memberExpressionSuffix"

	partial void EnterRule_callExpression();
	partial void LeaveRule_callExpression();

	// $ANTLR start "callExpression"
	// JavaScript.g:258:1: callExpression : memberExpression ( LT !)* arguments ( ( LT !)* callExpressionSuffix )* ;
	[GrammarRule("callExpression")]
	public XAstParserRuleReturnScope callExpression()
	{
		EnterRule_callExpression();
		EnterRule("callExpression", 50);
		var retval = new XAstParserRuleReturnScope("callExpression");
		retval.Start = (IToken)input.LT(1);
		int callExpression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken LT284 = default(IToken);
		IToken LT286 = default(IToken);
		XAstParserRuleReturnScope memberExpression283 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope arguments285 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope callExpressionSuffix287 = default(XAstParserRuleReturnScope);

		object LT284_tree = default(object);
		object LT286_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "callExpression");
		DebugLocation(258, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 50)) { return retval; }

			// JavaScript.g:259:5: ( memberExpression ( LT !)* arguments ( ( LT !)* callExpressionSuffix )* )
			DebugEnterAlt(1);
			// JavaScript.g:259:7: memberExpression ( LT !)* arguments ( ( LT !)* callExpressionSuffix )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(259, 7);
			PushFollow(Follow._memberExpression_in_callExpression2058);
			memberExpression283=memberExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, memberExpression283.Tree, memberExpression283, retval);
			DebugLocation(259, 26);
			// JavaScript.g:259:26: ( LT !)*
			try { DebugEnterSubRule(136);
			while (true)
			{
				int alt136=2;
				try { DebugEnterDecision(136, false);
				int LA136_0 = input.LA(1);

				if ((LA136_0==LT))
				{
					alt136 = 1;
				}


				} finally { DebugExitDecision(136); }
				switch ( alt136 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g:259:26: LT !
					{
					DebugLocation(259, 26);
					LT284=(IToken)new XToken((IToken)Match(input,LT,Follow._LT_in_callExpression2060), "LT"); if (state.failed) return retval;

					}
					break;

				default:
					goto loop136;
				}
			}

			loop136:
				;

			} finally { DebugExitSubRule(136); }

			DebugLocation(259, 29);
			PushFollow(Follow._arguments_in_callExpression2064);
			arguments285=arguments();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, arguments285.Tree, arguments285, retval);
			DebugLocation(259, 39);
			// JavaScript.g:259:39: ( ( LT !)* callExpressionSuffix )*
			try { DebugEnterSubRule(138);
			while (true)
			{
				int alt138=2;
				try { DebugEnterDecision(138, false);
				switch (input.LA(1))
				{
				case LT:
					{
					int LA138_1 = input.LA(2);

					if ((EvaluatePredicate(synpred157_JavaScript_fragment)))
					{
						alt138 = 1;
					}


					}
					break;
				case 80:
					{
					int LA138_32 = input.LA(2);

					if ((EvaluatePredicate(synpred157_JavaScript_fragment)))
					{
						alt138 = 1;
					}


					}
					break;
				case 51:
					{
					int LA138_33 = input.LA(2);

					if ((EvaluatePredicate(synpred157_JavaScript_fragment)))
					{
						alt138 = 1;
					}


					}
					break;
				case 61:
					{
					alt138 = 1;
					}
					break;
				}

				} finally { DebugExitDecision(138); }
				switch ( alt138 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g:259:40: ( LT !)* callExpressionSuffix
					{
					DebugLocation(259, 42);
					// JavaScript.g:259:42: ( LT !)*
					try { DebugEnterSubRule(137);
					while (true)
					{
						int alt137=2;
						try { DebugEnterDecision(137, false);
						int LA137_0 = input.LA(1);

						if ((LA137_0==LT))
						{
							alt137 = 1;
						}


						} finally { DebugExitDecision(137); }
						switch ( alt137 )
						{
						case 1:
							DebugEnterAlt(1);
							// JavaScript.g:259:42: LT !
							{
							DebugLocation(259, 42);
							LT286=(IToken)new XToken((IToken)Match(input,LT,Follow._LT_in_callExpression2067), "LT"); if (state.failed) return retval;

							}
							break;

						default:
							goto loop137;
						}
					}

					loop137:
						;

					} finally { DebugExitSubRule(137); }

					DebugLocation(259, 45);
					PushFollow(Follow._callExpressionSuffix_in_callExpression2071);
					callExpressionSuffix287=callExpressionSuffix();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, callExpressionSuffix287.Tree, callExpressionSuffix287, retval);

					}
					break;

				default:
					goto loop138;
				}
			}

			loop138:
				;

			} finally { DebugExitSubRule(138); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("callExpression", 50);
			LeaveRule("callExpression", 50);
			LeaveRule_callExpression();
			if (state.backtracking > 0) { Memoize(input, 50, callExpression_StartIndex); }

		}
		DebugLocation(260, 4);
		} finally { DebugExitRule(GrammarFileName, "callExpression"); }
		return retval;

	}
	// $ANTLR end "callExpression"

	partial void EnterRule_callExpressionSuffix();
	partial void LeaveRule_callExpressionSuffix();

	// $ANTLR start "callExpressionSuffix"
	// JavaScript.g:262:1: callExpressionSuffix : ( arguments | indexSuffix | propertyReferenceSuffix );
	[GrammarRule("callExpressionSuffix")]
	public XAstParserRuleReturnScope callExpressionSuffix()
	{
		EnterRule_callExpressionSuffix();
		EnterRule("callExpressionSuffix", 51);
		var retval = new XAstParserRuleReturnScope("callExpressionSuffix");
		retval.Start = (IToken)input.LT(1);
		int callExpressionSuffix_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope arguments288 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope indexSuffix289 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope propertyReferenceSuffix290 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "callExpressionSuffix");
		DebugLocation(262, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 51)) { return retval; }

			// JavaScript.g:263:5: ( arguments | indexSuffix | propertyReferenceSuffix )
			int alt139=3;
			try { DebugEnterDecision(139, false);
			switch (input.LA(1))
			{
			case 51:
				{
				alt139 = 1;
				}
				break;
			case 80:
				{
				alt139 = 2;
				}
				break;
			case 61:
				{
				alt139 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 139, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(139); }
			switch (alt139)
			{
			case 1:
				DebugEnterAlt(1);
				// JavaScript.g:263:7: arguments
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(263, 7);
				PushFollow(Follow._arguments_in_callExpressionSuffix2094);
				arguments288=arguments();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, arguments288.Tree, arguments288, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// JavaScript.g:264:7: indexSuffix
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(264, 7);
				PushFollow(Follow._indexSuffix_in_callExpressionSuffix2102);
				indexSuffix289=indexSuffix();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, indexSuffix289.Tree, indexSuffix289, retval);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// JavaScript.g:265:7: propertyReferenceSuffix
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(265, 7);
				PushFollow(Follow._propertyReferenceSuffix_in_callExpressionSuffix2110);
				propertyReferenceSuffix290=propertyReferenceSuffix();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, propertyReferenceSuffix290.Tree, propertyReferenceSuffix290, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("callExpressionSuffix", 51);
			LeaveRule("callExpressionSuffix", 51);
			LeaveRule_callExpressionSuffix();
			if (state.backtracking > 0) { Memoize(input, 51, callExpressionSuffix_StartIndex); }

		}
		DebugLocation(266, 4);
		} finally { DebugExitRule(GrammarFileName, "callExpressionSuffix"); }
		return retval;

	}
	// $ANTLR end "callExpressionSuffix"

	partial void EnterRule_arguments();
	partial void LeaveRule_arguments();

	// $ANTLR start "arguments"
	// JavaScript.g:268:1: arguments : '(' ( ( LT !)* assignmentExpression ( ( LT !)* ',' ( LT !)* assignmentExpression )* )? ( LT !)* RPAREN ;
	[GrammarRule("arguments")]
	public XAstParserRuleReturnScope arguments()
	{
		EnterRule_arguments();
		EnterRule("arguments", 52);
		var retval = new XAstParserRuleReturnScope("arguments");
		retval.Start = (IToken)input.LT(1);
		int arguments_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal291 = default(IToken);
		IToken LT292 = default(IToken);
		IToken LT294 = default(IToken);
		IToken char_literal295 = default(IToken);
		IToken LT296 = default(IToken);
		IToken LT298 = default(IToken);
		IToken RPAREN299 = default(IToken);
		XAstParserRuleReturnScope assignmentExpression293 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope assignmentExpression297 = default(XAstParserRuleReturnScope);

		object char_literal291_tree = default(object);
		object LT292_tree = default(object);
		object LT294_tree = default(object);
		object char_literal295_tree = default(object);
		object LT296_tree = default(object);
		object LT298_tree = default(object);
		object RPAREN299_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "arguments");
		DebugLocation(268, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 52)) { return retval; }

			// JavaScript.g:269:5: ( '(' ( ( LT !)* assignmentExpression ( ( LT !)* ',' ( LT !)* assignmentExpression )* )? ( LT !)* RPAREN )
			DebugEnterAlt(1);
			// JavaScript.g:269:7: '(' ( ( LT !)* assignmentExpression ( ( LT !)* ',' ( LT !)* assignmentExpression )* )? ( LT !)* RPAREN
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(269, 7);
			char_literal291=(IToken)Match(input,51,Follow._51_in_arguments2127); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal291_tree = (object)adaptor.Create(char_literal291, retval);
			adaptor.AddChild(root_0, char_literal291_tree);
			}
			DebugLocation(269, 11);
			// JavaScript.g:269:11: ( ( LT !)* assignmentExpression ( ( LT !)* ',' ( LT !)* assignmentExpression )* )?
			int alt144=2;
			try { DebugEnterSubRule(144);
			try { DebugEnterDecision(144, false);
			try
			{
				alt144 = dfa144.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(144); }
			switch (alt144)
			{
			case 1:
				DebugEnterAlt(1);
				// JavaScript.g:269:12: ( LT !)* assignmentExpression ( ( LT !)* ',' ( LT !)* assignmentExpression )*
				{
				DebugLocation(269, 14);
				// JavaScript.g:269:14: ( LT !)*
				try { DebugEnterSubRule(140);
				while (true)
				{
					int alt140=2;
					try { DebugEnterDecision(140, false);
					int LA140_0 = input.LA(1);

					if ((LA140_0==LT))
					{
						alt140 = 1;
					}


					} finally { DebugExitDecision(140); }
					switch ( alt140 )
					{
					case 1:
						DebugEnterAlt(1);
						// JavaScript.g:269:14: LT !
						{
						DebugLocation(269, 14);
						LT292=(IToken)new XToken((IToken)Match(input,LT,Follow._LT_in_arguments2130), "LT"); if (state.failed) return retval;

						}
						break;

					default:
						goto loop140;
					}
				}

				loop140:
					;

				} finally { DebugExitSubRule(140); }

				DebugLocation(269, 17);
				PushFollow(Follow._assignmentExpression_in_arguments2134);
				assignmentExpression293=assignmentExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, assignmentExpression293.Tree, assignmentExpression293, retval);
				DebugLocation(269, 38);
				// JavaScript.g:269:38: ( ( LT !)* ',' ( LT !)* assignmentExpression )*
				try { DebugEnterSubRule(143);
				while (true)
				{
					int alt143=2;
					try { DebugEnterDecision(143, false);
					try
					{
						alt143 = dfa143.Predict(input);
					}
					catch (NoViableAltException nvae)
					{
						DebugRecognitionException(nvae);
						throw;
					}
					} finally { DebugExitDecision(143); }
					switch ( alt143 )
					{
					case 1:
						DebugEnterAlt(1);
						// JavaScript.g:269:39: ( LT !)* ',' ( LT !)* assignmentExpression
						{
						DebugLocation(269, 41);
						// JavaScript.g:269:41: ( LT !)*
						try { DebugEnterSubRule(141);
						while (true)
						{
							int alt141=2;
							try { DebugEnterDecision(141, false);
							int LA141_0 = input.LA(1);

							if ((LA141_0==LT))
							{
								alt141 = 1;
							}


							} finally { DebugExitDecision(141); }
							switch ( alt141 )
							{
							case 1:
								DebugEnterAlt(1);
								// JavaScript.g:269:41: LT !
								{
								DebugLocation(269, 41);
								LT294=(IToken)new XToken((IToken)Match(input,LT,Follow._LT_in_arguments2137), "LT"); if (state.failed) return retval;

								}
								break;

							default:
								goto loop141;
							}
						}

						loop141:
							;

						} finally { DebugExitSubRule(141); }

						DebugLocation(269, 44);
						char_literal295=(IToken)Match(input,57,Follow._57_in_arguments2141); if (state.failed) return retval;
						if (state.backtracking == 0) {
						char_literal295_tree = (object)adaptor.Create(char_literal295, retval);
						adaptor.AddChild(root_0, char_literal295_tree);
						}
						DebugLocation(269, 50);
						// JavaScript.g:269:50: ( LT !)*
						try { DebugEnterSubRule(142);
						while (true)
						{
							int alt142=2;
							try { DebugEnterDecision(142, false);
							int LA142_0 = input.LA(1);

							if ((LA142_0==LT))
							{
								alt142 = 1;
							}


							} finally { DebugExitDecision(142); }
							switch ( alt142 )
							{
							case 1:
								DebugEnterAlt(1);
								// JavaScript.g:269:50: LT !
								{
								DebugLocation(269, 50);
								LT296=(IToken)new XToken((IToken)Match(input,LT,Follow._LT_in_arguments2143), "LT"); if (state.failed) return retval;

								}
								break;

							default:
								goto loop142;
							}
						}

						loop142:
							;

						} finally { DebugExitSubRule(142); }

						DebugLocation(269, 53);
						PushFollow(Follow._assignmentExpression_in_arguments2147);
						assignmentExpression297=assignmentExpression();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, assignmentExpression297.Tree, assignmentExpression297, retval);

						}
						break;

					default:
						goto loop143;
					}
				}

				loop143:
					;

				} finally { DebugExitSubRule(143); }


				}
				break;

			}
			} finally { DebugExitSubRule(144); }

			DebugLocation(269, 80);
			// JavaScript.g:269:80: ( LT !)*
			try { DebugEnterSubRule(145);
			while (true)
			{
				int alt145=2;
				try { DebugEnterDecision(145, false);
				int LA145_0 = input.LA(1);

				if ((LA145_0==LT))
				{
					alt145 = 1;
				}


				} finally { DebugExitDecision(145); }
				switch ( alt145 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g:269:80: LT !
					{
					DebugLocation(269, 80);
					LT298=(IToken)new XToken((IToken)Match(input,LT,Follow._LT_in_arguments2153), "LT"); if (state.failed) return retval;

					}
					break;

				default:
					goto loop145;
				}
			}

			loop145:
				;

			} finally { DebugExitSubRule(145); }

			DebugLocation(269, 83);
			RPAREN299=(IToken)new XToken((IToken)Match(input,RPAREN,Follow._RPAREN_in_arguments2157), "RPAREN"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			RPAREN299_tree = (object)adaptor.Create(RPAREN299, retval);
			adaptor.AddChild(root_0, RPAREN299_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("arguments", 52);
			LeaveRule("arguments", 52);
			LeaveRule_arguments();
			if (state.backtracking > 0) { Memoize(input, 52, arguments_StartIndex); }

		}
		DebugLocation(270, 4);
		} finally { DebugExitRule(GrammarFileName, "arguments"); }
		return retval;

	}
	// $ANTLR end "arguments"

	partial void EnterRule_indexSuffix();
	partial void LeaveRule_indexSuffix();

	// $ANTLR start "indexSuffix"
	// JavaScript.g:272:1: indexSuffix : '[' ( LT !)* expression ( LT !)* RBRACK ;
	[GrammarRule("indexSuffix")]
	public XAstParserRuleReturnScope indexSuffix()
	{
		EnterRule_indexSuffix();
		EnterRule("indexSuffix", 53);
		var retval = new XAstParserRuleReturnScope("indexSuffix");
		retval.Start = (IToken)input.LT(1);
		int indexSuffix_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal300 = default(IToken);
		IToken LT301 = default(IToken);
		IToken LT303 = default(IToken);
		IToken RBRACK304 = default(IToken);
		XAstParserRuleReturnScope expression302 = default(XAstParserRuleReturnScope);

		object char_literal300_tree = default(object);
		object LT301_tree = default(object);
		object LT303_tree = default(object);
		object RBRACK304_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "indexSuffix");
		DebugLocation(272, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 53)) { return retval; }

			// JavaScript.g:273:5: ( '[' ( LT !)* expression ( LT !)* RBRACK )
			DebugEnterAlt(1);
			// JavaScript.g:273:7: '[' ( LT !)* expression ( LT !)* RBRACK
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(273, 7);
			char_literal300=(IToken)Match(input,80,Follow._80_in_indexSuffix2178); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal300_tree = (object)adaptor.Create(char_literal300, retval);
			adaptor.AddChild(root_0, char_literal300_tree);
			}
			DebugLocation(273, 13);
			// JavaScript.g:273:13: ( LT !)*
			try { DebugEnterSubRule(146);
			while (true)
			{
				int alt146=2;
				try { DebugEnterDecision(146, false);
				int LA146_0 = input.LA(1);

				if ((LA146_0==LT))
				{
					alt146 = 1;
				}


				} finally { DebugExitDecision(146); }
				switch ( alt146 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g:273:13: LT !
					{
					DebugLocation(273, 13);
					LT301=(IToken)new XToken((IToken)Match(input,LT,Follow._LT_in_indexSuffix2180), "LT"); if (state.failed) return retval;

					}
					break;

				default:
					goto loop146;
				}
			}

			loop146:
				;

			} finally { DebugExitSubRule(146); }

			DebugLocation(273, 16);
			PushFollow(Follow._expression_in_indexSuffix2184);
			expression302=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, expression302.Tree, expression302, retval);
			DebugLocation(273, 29);
			// JavaScript.g:273:29: ( LT !)*
			try { DebugEnterSubRule(147);
			while (true)
			{
				int alt147=2;
				try { DebugEnterDecision(147, false);
				int LA147_0 = input.LA(1);

				if ((LA147_0==LT))
				{
					alt147 = 1;
				}


				} finally { DebugExitDecision(147); }
				switch ( alt147 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g:273:29: LT !
					{
					DebugLocation(273, 29);
					LT303=(IToken)new XToken((IToken)Match(input,LT,Follow._LT_in_indexSuffix2186), "LT"); if (state.failed) return retval;

					}
					break;

				default:
					goto loop147;
				}
			}

			loop147:
				;

			} finally { DebugExitSubRule(147); }

			DebugLocation(273, 32);
			RBRACK304=(IToken)new XToken((IToken)Match(input,RBRACK,Follow._RBRACK_in_indexSuffix2190), "RBRACK"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			RBRACK304_tree = (object)adaptor.Create(RBRACK304, retval);
			adaptor.AddChild(root_0, RBRACK304_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("indexSuffix", 53);
			LeaveRule("indexSuffix", 53);
			LeaveRule_indexSuffix();
			if (state.backtracking > 0) { Memoize(input, 53, indexSuffix_StartIndex); }

		}
		DebugLocation(274, 4);
		} finally { DebugExitRule(GrammarFileName, "indexSuffix"); }
		return retval;

	}
	// $ANTLR end "indexSuffix"

	partial void EnterRule_propertyReferenceSuffix();
	partial void LeaveRule_propertyReferenceSuffix();

	// $ANTLR start "propertyReferenceSuffix"
	// JavaScript.g:276:1: propertyReferenceSuffix : '.' ( LT !)* Identifier ;
	[GrammarRule("propertyReferenceSuffix")]
	public XAstParserRuleReturnScope propertyReferenceSuffix()
	{
		EnterRule_propertyReferenceSuffix();
		EnterRule("propertyReferenceSuffix", 54);
		var retval = new XAstParserRuleReturnScope("propertyReferenceSuffix");
		retval.Start = (IToken)input.LT(1);
		int propertyReferenceSuffix_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal305 = default(IToken);
		IToken LT306 = default(IToken);
		IToken Identifier307 = default(IToken);

		object char_literal305_tree = default(object);
		object LT306_tree = default(object);
		object Identifier307_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "propertyReferenceSuffix");
		DebugLocation(276, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 54)) { return retval; }

			// JavaScript.g:277:5: ( '.' ( LT !)* Identifier )
			DebugEnterAlt(1);
			// JavaScript.g:277:7: '.' ( LT !)* Identifier
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(277, 7);
			char_literal305=(IToken)Match(input,61,Follow._61_in_propertyReferenceSuffix2212); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal305_tree = (object)adaptor.Create(char_literal305, retval);
			adaptor.AddChild(root_0, char_literal305_tree);
			}
			DebugLocation(277, 13);
			// JavaScript.g:277:13: ( LT !)*
			try { DebugEnterSubRule(148);
			while (true)
			{
				int alt148=2;
				try { DebugEnterDecision(148, false);
				int LA148_0 = input.LA(1);

				if ((LA148_0==LT))
				{
					alt148 = 1;
				}


				} finally { DebugExitDecision(148); }
				switch ( alt148 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g:277:13: LT !
					{
					DebugLocation(277, 13);
					LT306=(IToken)new XToken((IToken)Match(input,LT,Follow._LT_in_propertyReferenceSuffix2214), "LT"); if (state.failed) return retval;

					}
					break;

				default:
					goto loop148;
				}
			}

			loop148:
				;

			} finally { DebugExitSubRule(148); }

			DebugLocation(277, 16);
			Identifier307=(IToken)new XToken((IToken)Match(input,Identifier,Follow._Identifier_in_propertyReferenceSuffix2218), "Identifier"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			Identifier307_tree = (object)adaptor.Create(Identifier307, retval);
			adaptor.AddChild(root_0, Identifier307_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("propertyReferenceSuffix", 54);
			LeaveRule("propertyReferenceSuffix", 54);
			LeaveRule_propertyReferenceSuffix();
			if (state.backtracking > 0) { Memoize(input, 54, propertyReferenceSuffix_StartIndex); }

		}
		DebugLocation(278, 4);
		} finally { DebugExitRule(GrammarFileName, "propertyReferenceSuffix"); }
		return retval;

	}
	// $ANTLR end "propertyReferenceSuffix"

	partial void EnterRule_assignmentOperator();
	partial void LeaveRule_assignmentOperator();

	// $ANTLR start "assignmentOperator"
	// JavaScript.g:280:1: assignmentOperator : ( '=' | '*=' | '/=' | '%=' | '+=' | '-=' | '<<=' | '>>=' | '>>>=' | '&=' | '^=' | '|=' );
	[GrammarRule("assignmentOperator")]
	public XAstParserRuleReturnScope assignmentOperator()
	{
		EnterRule_assignmentOperator();
		EnterRule("assignmentOperator", 55);
		var retval = new XAstParserRuleReturnScope("assignmentOperator");
		retval.Start = (IToken)input.LT(1);
		int assignmentOperator_StartIndex = input.Index;

		object root_0 = default(object);

		IToken set308 = default(IToken);

		object set308_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "assignmentOperator");
		DebugLocation(280, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 55)) { return retval; }

			// JavaScript.g:281:5: ( '=' | '*=' | '/=' | '%=' | '+=' | '-=' | '<<=' | '>>=' | '>>>=' | '&=' | '^=' | '|=' )
			DebugEnterAlt(1);
			// JavaScript.g:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(281, 5);

			set308=(IToken)input.LT(1);
			if (input.LA(1)==47||input.LA(1)==50||input.LA(1)==53||input.LA(1)==56||input.LA(1)==60||input.LA(1)==63||input.LA(1)==68||input.LA(1)==70||input.LA(1)==76||input.LA(1)==78||input.LA(1)==82||input.LA(1)==109)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set308, retval));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("assignmentOperator", 55);
			LeaveRule("assignmentOperator", 55);
			LeaveRule_assignmentOperator();
			if (state.backtracking > 0) { Memoize(input, 55, assignmentOperator_StartIndex); }

		}
		DebugLocation(282, 4);
		} finally { DebugExitRule(GrammarFileName, "assignmentOperator"); }
		return retval;

	}
	// $ANTLR end "assignmentOperator"

	partial void EnterRule_conditionalExpression();
	partial void LeaveRule_conditionalExpression();

	// $ANTLR start "conditionalExpression"
	// JavaScript.g:284:1: conditionalExpression : logicalORExpression ( ( LT !)* '?' ( LT !)* assignmentExpression ( LT !)* ':' ( LT !)* assignmentExpression )? ;
	[GrammarRule("conditionalExpression")]
	public XAstParserRuleReturnScope conditionalExpression()
	{
		EnterRule_conditionalExpression();
		EnterRule("conditionalExpression", 56);
		var retval = new XAstParserRuleReturnScope("conditionalExpression");
		retval.Start = (IToken)input.LT(1);
		int conditionalExpression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken LT310 = default(IToken);
		IToken char_literal311 = default(IToken);
		IToken LT312 = default(IToken);
		IToken LT314 = default(IToken);
		IToken char_literal315 = default(IToken);
		IToken LT316 = default(IToken);
		XAstParserRuleReturnScope logicalORExpression309 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope assignmentExpression313 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope assignmentExpression317 = default(XAstParserRuleReturnScope);

		object LT310_tree = default(object);
		object char_literal311_tree = default(object);
		object LT312_tree = default(object);
		object LT314_tree = default(object);
		object char_literal315_tree = default(object);
		object LT316_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "conditionalExpression");
		DebugLocation(284, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 56)) { return retval; }

			// JavaScript.g:285:5: ( logicalORExpression ( ( LT !)* '?' ( LT !)* assignmentExpression ( LT !)* ':' ( LT !)* assignmentExpression )? )
			DebugEnterAlt(1);
			// JavaScript.g:285:7: logicalORExpression ( ( LT !)* '?' ( LT !)* assignmentExpression ( LT !)* ':' ( LT !)* assignmentExpression )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(285, 7);
			PushFollow(Follow._logicalORExpression_in_conditionalExpression2300);
			logicalORExpression309=logicalORExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, logicalORExpression309.Tree, logicalORExpression309, retval);
			DebugLocation(285, 27);
			// JavaScript.g:285:27: ( ( LT !)* '?' ( LT !)* assignmentExpression ( LT !)* ':' ( LT !)* assignmentExpression )?
			int alt153=2;
			try { DebugEnterSubRule(153);
			try { DebugEnterDecision(153, false);
			try
			{
				alt153 = dfa153.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(153); }
			switch (alt153)
			{
			case 1:
				DebugEnterAlt(1);
				// JavaScript.g:285:28: ( LT !)* '?' ( LT !)* assignmentExpression ( LT !)* ':' ( LT !)* assignmentExpression
				{
				DebugLocation(285, 30);
				// JavaScript.g:285:30: ( LT !)*
				try { DebugEnterSubRule(149);
				while (true)
				{
					int alt149=2;
					try { DebugEnterDecision(149, false);
					int LA149_0 = input.LA(1);

					if ((LA149_0==LT))
					{
						alt149 = 1;
					}


					} finally { DebugExitDecision(149); }
					switch ( alt149 )
					{
					case 1:
						DebugEnterAlt(1);
						// JavaScript.g:285:30: LT !
						{
						DebugLocation(285, 30);
						LT310=(IToken)new XToken((IToken)Match(input,LT,Follow._LT_in_conditionalExpression2303), "LT"); if (state.failed) return retval;

						}
						break;

					default:
						goto loop149;
					}
				}

				loop149:
					;

				} finally { DebugExitSubRule(149); }

				DebugLocation(285, 33);
				char_literal311=(IToken)Match(input,79,Follow._79_in_conditionalExpression2307); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal311_tree = (object)adaptor.Create(char_literal311, retval);
				adaptor.AddChild(root_0, char_literal311_tree);
				}
				DebugLocation(285, 39);
				// JavaScript.g:285:39: ( LT !)*
				try { DebugEnterSubRule(150);
				while (true)
				{
					int alt150=2;
					try { DebugEnterDecision(150, false);
					int LA150_0 = input.LA(1);

					if ((LA150_0==LT))
					{
						alt150 = 1;
					}


					} finally { DebugExitDecision(150); }
					switch ( alt150 )
					{
					case 1:
						DebugEnterAlt(1);
						// JavaScript.g:285:39: LT !
						{
						DebugLocation(285, 39);
						LT312=(IToken)new XToken((IToken)Match(input,LT,Follow._LT_in_conditionalExpression2309), "LT"); if (state.failed) return retval;

						}
						break;

					default:
						goto loop150;
					}
				}

				loop150:
					;

				} finally { DebugExitSubRule(150); }

				DebugLocation(285, 42);
				PushFollow(Follow._assignmentExpression_in_conditionalExpression2313);
				assignmentExpression313=assignmentExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, assignmentExpression313.Tree, assignmentExpression313, retval);
				DebugLocation(285, 65);
				// JavaScript.g:285:65: ( LT !)*
				try { DebugEnterSubRule(151);
				while (true)
				{
					int alt151=2;
					try { DebugEnterDecision(151, false);
					int LA151_0 = input.LA(1);

					if ((LA151_0==LT))
					{
						alt151 = 1;
					}


					} finally { DebugExitDecision(151); }
					switch ( alt151 )
					{
					case 1:
						DebugEnterAlt(1);
						// JavaScript.g:285:65: LT !
						{
						DebugLocation(285, 65);
						LT314=(IToken)new XToken((IToken)Match(input,LT,Follow._LT_in_conditionalExpression2315), "LT"); if (state.failed) return retval;

						}
						break;

					default:
						goto loop151;
					}
				}

				loop151:
					;

				} finally { DebugExitSubRule(151); }

				DebugLocation(285, 68);
				char_literal315=(IToken)Match(input,64,Follow._64_in_conditionalExpression2319); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal315_tree = (object)adaptor.Create(char_literal315, retval);
				adaptor.AddChild(root_0, char_literal315_tree);
				}
				DebugLocation(285, 74);
				// JavaScript.g:285:74: ( LT !)*
				try { DebugEnterSubRule(152);
				while (true)
				{
					int alt152=2;
					try { DebugEnterDecision(152, false);
					int LA152_0 = input.LA(1);

					if ((LA152_0==LT))
					{
						alt152 = 1;
					}


					} finally { DebugExitDecision(152); }
					switch ( alt152 )
					{
					case 1:
						DebugEnterAlt(1);
						// JavaScript.g:285:74: LT !
						{
						DebugLocation(285, 74);
						LT316=(IToken)new XToken((IToken)Match(input,LT,Follow._LT_in_conditionalExpression2321), "LT"); if (state.failed) return retval;

						}
						break;

					default:
						goto loop152;
					}
				}

				loop152:
					;

				} finally { DebugExitSubRule(152); }

				DebugLocation(285, 77);
				PushFollow(Follow._assignmentExpression_in_conditionalExpression2325);
				assignmentExpression317=assignmentExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, assignmentExpression317.Tree, assignmentExpression317, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(153); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("conditionalExpression", 56);
			LeaveRule("conditionalExpression", 56);
			LeaveRule_conditionalExpression();
			if (state.backtracking > 0) { Memoize(input, 56, conditionalExpression_StartIndex); }

		}
		DebugLocation(286, 4);
		} finally { DebugExitRule(GrammarFileName, "conditionalExpression"); }
		return retval;

	}
	// $ANTLR end "conditionalExpression"

	partial void EnterRule_conditionalExpressionNoIn();
	partial void LeaveRule_conditionalExpressionNoIn();

	// $ANTLR start "conditionalExpressionNoIn"
	// JavaScript.g:288:1: conditionalExpressionNoIn : logicalORExpressionNoIn ( ( LT !)* '?' ( LT !)* assignmentExpressionNoIn ( LT !)* ':' ( LT !)* assignmentExpressionNoIn )? ;
	[GrammarRule("conditionalExpressionNoIn")]
	public XAstParserRuleReturnScope conditionalExpressionNoIn()
	{
		EnterRule_conditionalExpressionNoIn();
		EnterRule("conditionalExpressionNoIn", 57);
		var retval = new XAstParserRuleReturnScope("conditionalExpressionNoIn");
		retval.Start = (IToken)input.LT(1);
		int conditionalExpressionNoIn_StartIndex = input.Index;

		object root_0 = default(object);

		IToken LT319 = default(IToken);
		IToken char_literal320 = default(IToken);
		IToken LT321 = default(IToken);
		IToken LT323 = default(IToken);
		IToken char_literal324 = default(IToken);
		IToken LT325 = default(IToken);
		XAstParserRuleReturnScope logicalORExpressionNoIn318 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope assignmentExpressionNoIn322 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope assignmentExpressionNoIn326 = default(XAstParserRuleReturnScope);

		object LT319_tree = default(object);
		object char_literal320_tree = default(object);
		object LT321_tree = default(object);
		object LT323_tree = default(object);
		object char_literal324_tree = default(object);
		object LT325_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "conditionalExpressionNoIn");
		DebugLocation(288, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 57)) { return retval; }

			// JavaScript.g:289:5: ( logicalORExpressionNoIn ( ( LT !)* '?' ( LT !)* assignmentExpressionNoIn ( LT !)* ':' ( LT !)* assignmentExpressionNoIn )? )
			DebugEnterAlt(1);
			// JavaScript.g:289:7: logicalORExpressionNoIn ( ( LT !)* '?' ( LT !)* assignmentExpressionNoIn ( LT !)* ':' ( LT !)* assignmentExpressionNoIn )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(289, 7);
			PushFollow(Follow._logicalORExpressionNoIn_in_conditionalExpressionNoIn2344);
			logicalORExpressionNoIn318=logicalORExpressionNoIn();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, logicalORExpressionNoIn318.Tree, logicalORExpressionNoIn318, retval);
			DebugLocation(289, 31);
			// JavaScript.g:289:31: ( ( LT !)* '?' ( LT !)* assignmentExpressionNoIn ( LT !)* ':' ( LT !)* assignmentExpressionNoIn )?
			int alt158=2;
			try { DebugEnterSubRule(158);
			try { DebugEnterDecision(158, false);
			try
			{
				alt158 = dfa158.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(158); }
			switch (alt158)
			{
			case 1:
				DebugEnterAlt(1);
				// JavaScript.g:289:32: ( LT !)* '?' ( LT !)* assignmentExpressionNoIn ( LT !)* ':' ( LT !)* assignmentExpressionNoIn
				{
				DebugLocation(289, 34);
				// JavaScript.g:289:34: ( LT !)*
				try { DebugEnterSubRule(154);
				while (true)
				{
					int alt154=2;
					try { DebugEnterDecision(154, false);
					int LA154_0 = input.LA(1);

					if ((LA154_0==LT))
					{
						alt154 = 1;
					}


					} finally { DebugExitDecision(154); }
					switch ( alt154 )
					{
					case 1:
						DebugEnterAlt(1);
						// JavaScript.g:289:34: LT !
						{
						DebugLocation(289, 34);
						LT319=(IToken)new XToken((IToken)Match(input,LT,Follow._LT_in_conditionalExpressionNoIn2347), "LT"); if (state.failed) return retval;

						}
						break;

					default:
						goto loop154;
					}
				}

				loop154:
					;

				} finally { DebugExitSubRule(154); }

				DebugLocation(289, 37);
				char_literal320=(IToken)Match(input,79,Follow._79_in_conditionalExpressionNoIn2351); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal320_tree = (object)adaptor.Create(char_literal320, retval);
				adaptor.AddChild(root_0, char_literal320_tree);
				}
				DebugLocation(289, 43);
				// JavaScript.g:289:43: ( LT !)*
				try { DebugEnterSubRule(155);
				while (true)
				{
					int alt155=2;
					try { DebugEnterDecision(155, false);
					int LA155_0 = input.LA(1);

					if ((LA155_0==LT))
					{
						alt155 = 1;
					}


					} finally { DebugExitDecision(155); }
					switch ( alt155 )
					{
					case 1:
						DebugEnterAlt(1);
						// JavaScript.g:289:43: LT !
						{
						DebugLocation(289, 43);
						LT321=(IToken)new XToken((IToken)Match(input,LT,Follow._LT_in_conditionalExpressionNoIn2353), "LT"); if (state.failed) return retval;

						}
						break;

					default:
						goto loop155;
					}
				}

				loop155:
					;

				} finally { DebugExitSubRule(155); }

				DebugLocation(289, 46);
				PushFollow(Follow._assignmentExpressionNoIn_in_conditionalExpressionNoIn2357);
				assignmentExpressionNoIn322=assignmentExpressionNoIn();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, assignmentExpressionNoIn322.Tree, assignmentExpressionNoIn322, retval);
				DebugLocation(289, 73);
				// JavaScript.g:289:73: ( LT !)*
				try { DebugEnterSubRule(156);
				while (true)
				{
					int alt156=2;
					try { DebugEnterDecision(156, false);
					int LA156_0 = input.LA(1);

					if ((LA156_0==LT))
					{
						alt156 = 1;
					}


					} finally { DebugExitDecision(156); }
					switch ( alt156 )
					{
					case 1:
						DebugEnterAlt(1);
						// JavaScript.g:289:73: LT !
						{
						DebugLocation(289, 73);
						LT323=(IToken)new XToken((IToken)Match(input,LT,Follow._LT_in_conditionalExpressionNoIn2359), "LT"); if (state.failed) return retval;

						}
						break;

					default:
						goto loop156;
					}
				}

				loop156:
					;

				} finally { DebugExitSubRule(156); }

				DebugLocation(289, 76);
				char_literal324=(IToken)Match(input,64,Follow._64_in_conditionalExpressionNoIn2363); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal324_tree = (object)adaptor.Create(char_literal324, retval);
				adaptor.AddChild(root_0, char_literal324_tree);
				}
				DebugLocation(289, 82);
				// JavaScript.g:289:82: ( LT !)*
				try { DebugEnterSubRule(157);
				while (true)
				{
					int alt157=2;
					try { DebugEnterDecision(157, false);
					int LA157_0 = input.LA(1);

					if ((LA157_0==LT))
					{
						alt157 = 1;
					}


					} finally { DebugExitDecision(157); }
					switch ( alt157 )
					{
					case 1:
						DebugEnterAlt(1);
						// JavaScript.g:289:82: LT !
						{
						DebugLocation(289, 82);
						LT325=(IToken)new XToken((IToken)Match(input,LT,Follow._LT_in_conditionalExpressionNoIn2365), "LT"); if (state.failed) return retval;

						}
						break;

					default:
						goto loop157;
					}
				}

				loop157:
					;

				} finally { DebugExitSubRule(157); }

				DebugLocation(289, 85);
				PushFollow(Follow._assignmentExpressionNoIn_in_conditionalExpressionNoIn2369);
				assignmentExpressionNoIn326=assignmentExpressionNoIn();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, assignmentExpressionNoIn326.Tree, assignmentExpressionNoIn326, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(158); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("conditionalExpressionNoIn", 57);
			LeaveRule("conditionalExpressionNoIn", 57);
			LeaveRule_conditionalExpressionNoIn();
			if (state.backtracking > 0) { Memoize(input, 57, conditionalExpressionNoIn_StartIndex); }

		}
		DebugLocation(290, 4);
		} finally { DebugExitRule(GrammarFileName, "conditionalExpressionNoIn"); }
		return retval;

	}
	// $ANTLR end "conditionalExpressionNoIn"

	partial void EnterRule_logicalORExpression();
	partial void LeaveRule_logicalORExpression();

	// $ANTLR start "logicalORExpression"
	// JavaScript.g:292:1: logicalORExpression : logicalANDExpression ( ( LT !)* '||' ( LT !)* logicalANDExpression )* ;
	[GrammarRule("logicalORExpression")]
	public XAstParserRuleReturnScope logicalORExpression()
	{
		EnterRule_logicalORExpression();
		EnterRule("logicalORExpression", 58);
		var retval = new XAstParserRuleReturnScope("logicalORExpression");
		retval.Start = (IToken)input.LT(1);
		int logicalORExpression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken LT328 = default(IToken);
		IToken string_literal329 = default(IToken);
		IToken LT330 = default(IToken);
		XAstParserRuleReturnScope logicalANDExpression327 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope logicalANDExpression331 = default(XAstParserRuleReturnScope);

		object LT328_tree = default(object);
		object string_literal329_tree = default(object);
		object LT330_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "logicalORExpression");
		DebugLocation(292, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 58)) { return retval; }

			// JavaScript.g:293:5: ( logicalANDExpression ( ( LT !)* '||' ( LT !)* logicalANDExpression )* )
			DebugEnterAlt(1);
			// JavaScript.g:293:7: logicalANDExpression ( ( LT !)* '||' ( LT !)* logicalANDExpression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(293, 7);
			PushFollow(Follow._logicalANDExpression_in_logicalORExpression2388);
			logicalANDExpression327=logicalANDExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, logicalANDExpression327.Tree, logicalANDExpression327, retval);
			DebugLocation(293, 28);
			// JavaScript.g:293:28: ( ( LT !)* '||' ( LT !)* logicalANDExpression )*
			try { DebugEnterSubRule(161);
			while (true)
			{
				int alt161=2;
				try { DebugEnterDecision(161, false);
				try
				{
					alt161 = dfa161.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(161); }
				switch ( alt161 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g:293:29: ( LT !)* '||' ( LT !)* logicalANDExpression
					{
					DebugLocation(293, 31);
					// JavaScript.g:293:31: ( LT !)*
					try { DebugEnterSubRule(159);
					while (true)
					{
						int alt159=2;
						try { DebugEnterDecision(159, false);
						int LA159_0 = input.LA(1);

						if ((LA159_0==LT))
						{
							alt159 = 1;
						}


						} finally { DebugExitDecision(159); }
						switch ( alt159 )
						{
						case 1:
							DebugEnterAlt(1);
							// JavaScript.g:293:31: LT !
							{
							DebugLocation(293, 31);
							LT328=(IToken)new XToken((IToken)Match(input,LT,Follow._LT_in_logicalORExpression2391), "LT"); if (state.failed) return retval;

							}
							break;

						default:
							goto loop159;
						}
					}

					loop159:
						;

					} finally { DebugExitSubRule(159); }

					DebugLocation(293, 34);
					string_literal329=(IToken)Match(input,110,Follow._110_in_logicalORExpression2395); if (state.failed) return retval;
					if (state.backtracking == 0) {
					string_literal329_tree = (object)adaptor.Create(string_literal329, retval);
					adaptor.AddChild(root_0, string_literal329_tree);
					}
					DebugLocation(293, 41);
					// JavaScript.g:293:41: ( LT !)*
					try { DebugEnterSubRule(160);
					while (true)
					{
						int alt160=2;
						try { DebugEnterDecision(160, false);
						int LA160_0 = input.LA(1);

						if ((LA160_0==LT))
						{
							alt160 = 1;
						}


						} finally { DebugExitDecision(160); }
						switch ( alt160 )
						{
						case 1:
							DebugEnterAlt(1);
							// JavaScript.g:293:41: LT !
							{
							DebugLocation(293, 41);
							LT330=(IToken)new XToken((IToken)Match(input,LT,Follow._LT_in_logicalORExpression2397), "LT"); if (state.failed) return retval;

							}
							break;

						default:
							goto loop160;
						}
					}

					loop160:
						;

					} finally { DebugExitSubRule(160); }

					DebugLocation(293, 44);
					PushFollow(Follow._logicalANDExpression_in_logicalORExpression2401);
					logicalANDExpression331=logicalANDExpression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, logicalANDExpression331.Tree, logicalANDExpression331, retval);

					}
					break;

				default:
					goto loop161;
				}
			}

			loop161:
				;

			} finally { DebugExitSubRule(161); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("logicalORExpression", 58);
			LeaveRule("logicalORExpression", 58);
			LeaveRule_logicalORExpression();
			if (state.backtracking > 0) { Memoize(input, 58, logicalORExpression_StartIndex); }

		}
		DebugLocation(294, 4);
		} finally { DebugExitRule(GrammarFileName, "logicalORExpression"); }
		return retval;

	}
	// $ANTLR end "logicalORExpression"

	partial void EnterRule_logicalORExpressionNoIn();
	partial void LeaveRule_logicalORExpressionNoIn();

	// $ANTLR start "logicalORExpressionNoIn"
	// JavaScript.g:296:1: logicalORExpressionNoIn : logicalANDExpressionNoIn ( ( LT !)* '||' ( LT !)* logicalANDExpressionNoIn )* ;
	[GrammarRule("logicalORExpressionNoIn")]
	public XAstParserRuleReturnScope logicalORExpressionNoIn()
	{
		EnterRule_logicalORExpressionNoIn();
		EnterRule("logicalORExpressionNoIn", 59);
		var retval = new XAstParserRuleReturnScope("logicalORExpressionNoIn");
		retval.Start = (IToken)input.LT(1);
		int logicalORExpressionNoIn_StartIndex = input.Index;

		object root_0 = default(object);

		IToken LT333 = default(IToken);
		IToken string_literal334 = default(IToken);
		IToken LT335 = default(IToken);
		XAstParserRuleReturnScope logicalANDExpressionNoIn332 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope logicalANDExpressionNoIn336 = default(XAstParserRuleReturnScope);

		object LT333_tree = default(object);
		object string_literal334_tree = default(object);
		object LT335_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "logicalORExpressionNoIn");
		DebugLocation(296, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 59)) { return retval; }

			// JavaScript.g:297:5: ( logicalANDExpressionNoIn ( ( LT !)* '||' ( LT !)* logicalANDExpressionNoIn )* )
			DebugEnterAlt(1);
			// JavaScript.g:297:7: logicalANDExpressionNoIn ( ( LT !)* '||' ( LT !)* logicalANDExpressionNoIn )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(297, 7);
			PushFollow(Follow._logicalANDExpressionNoIn_in_logicalORExpressionNoIn2424);
			logicalANDExpressionNoIn332=logicalANDExpressionNoIn();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, logicalANDExpressionNoIn332.Tree, logicalANDExpressionNoIn332, retval);
			DebugLocation(297, 32);
			// JavaScript.g:297:32: ( ( LT !)* '||' ( LT !)* logicalANDExpressionNoIn )*
			try { DebugEnterSubRule(164);
			while (true)
			{
				int alt164=2;
				try { DebugEnterDecision(164, false);
				try
				{
					alt164 = dfa164.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(164); }
				switch ( alt164 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g:297:33: ( LT !)* '||' ( LT !)* logicalANDExpressionNoIn
					{
					DebugLocation(297, 35);
					// JavaScript.g:297:35: ( LT !)*
					try { DebugEnterSubRule(162);
					while (true)
					{
						int alt162=2;
						try { DebugEnterDecision(162, false);
						int LA162_0 = input.LA(1);

						if ((LA162_0==LT))
						{
							alt162 = 1;
						}


						} finally { DebugExitDecision(162); }
						switch ( alt162 )
						{
						case 1:
							DebugEnterAlt(1);
							// JavaScript.g:297:35: LT !
							{
							DebugLocation(297, 35);
							LT333=(IToken)new XToken((IToken)Match(input,LT,Follow._LT_in_logicalORExpressionNoIn2427), "LT"); if (state.failed) return retval;

							}
							break;

						default:
							goto loop162;
						}
					}

					loop162:
						;

					} finally { DebugExitSubRule(162); }

					DebugLocation(297, 38);
					string_literal334=(IToken)Match(input,110,Follow._110_in_logicalORExpressionNoIn2431); if (state.failed) return retval;
					if (state.backtracking == 0) {
					string_literal334_tree = (object)adaptor.Create(string_literal334, retval);
					adaptor.AddChild(root_0, string_literal334_tree);
					}
					DebugLocation(297, 45);
					// JavaScript.g:297:45: ( LT !)*
					try { DebugEnterSubRule(163);
					while (true)
					{
						int alt163=2;
						try { DebugEnterDecision(163, false);
						int LA163_0 = input.LA(1);

						if ((LA163_0==LT))
						{
							alt163 = 1;
						}


						} finally { DebugExitDecision(163); }
						switch ( alt163 )
						{
						case 1:
							DebugEnterAlt(1);
							// JavaScript.g:297:45: LT !
							{
							DebugLocation(297, 45);
							LT335=(IToken)new XToken((IToken)Match(input,LT,Follow._LT_in_logicalORExpressionNoIn2433), "LT"); if (state.failed) return retval;

							}
							break;

						default:
							goto loop163;
						}
					}

					loop163:
						;

					} finally { DebugExitSubRule(163); }

					DebugLocation(297, 48);
					PushFollow(Follow._logicalANDExpressionNoIn_in_logicalORExpressionNoIn2437);
					logicalANDExpressionNoIn336=logicalANDExpressionNoIn();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, logicalANDExpressionNoIn336.Tree, logicalANDExpressionNoIn336, retval);

					}
					break;

				default:
					goto loop164;
				}
			}

			loop164:
				;

			} finally { DebugExitSubRule(164); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("logicalORExpressionNoIn", 59);
			LeaveRule("logicalORExpressionNoIn", 59);
			LeaveRule_logicalORExpressionNoIn();
			if (state.backtracking > 0) { Memoize(input, 59, logicalORExpressionNoIn_StartIndex); }

		}
		DebugLocation(298, 4);
		} finally { DebugExitRule(GrammarFileName, "logicalORExpressionNoIn"); }
		return retval;

	}
	// $ANTLR end "logicalORExpressionNoIn"

	partial void EnterRule_logicalANDExpression();
	partial void LeaveRule_logicalANDExpression();

	// $ANTLR start "logicalANDExpression"
	// JavaScript.g:300:1: logicalANDExpression : bitwiseORExpression ( ( LT !)* '&&' ( LT !)* bitwiseORExpression )* ;
	[GrammarRule("logicalANDExpression")]
	public XAstParserRuleReturnScope logicalANDExpression()
	{
		EnterRule_logicalANDExpression();
		EnterRule("logicalANDExpression", 60);
		var retval = new XAstParserRuleReturnScope("logicalANDExpression");
		retval.Start = (IToken)input.LT(1);
		int logicalANDExpression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken LT338 = default(IToken);
		IToken string_literal339 = default(IToken);
		IToken LT340 = default(IToken);
		XAstParserRuleReturnScope bitwiseORExpression337 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope bitwiseORExpression341 = default(XAstParserRuleReturnScope);

		object LT338_tree = default(object);
		object string_literal339_tree = default(object);
		object LT340_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "logicalANDExpression");
		DebugLocation(300, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 60)) { return retval; }

			// JavaScript.g:301:5: ( bitwiseORExpression ( ( LT !)* '&&' ( LT !)* bitwiseORExpression )* )
			DebugEnterAlt(1);
			// JavaScript.g:301:7: bitwiseORExpression ( ( LT !)* '&&' ( LT !)* bitwiseORExpression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(301, 7);
			PushFollow(Follow._bitwiseORExpression_in_logicalANDExpression2460);
			bitwiseORExpression337=bitwiseORExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, bitwiseORExpression337.Tree, bitwiseORExpression337, retval);
			DebugLocation(301, 27);
			// JavaScript.g:301:27: ( ( LT !)* '&&' ( LT !)* bitwiseORExpression )*
			try { DebugEnterSubRule(167);
			while (true)
			{
				int alt167=2;
				try { DebugEnterDecision(167, false);
				try
				{
					alt167 = dfa167.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(167); }
				switch ( alt167 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g:301:28: ( LT !)* '&&' ( LT !)* bitwiseORExpression
					{
					DebugLocation(301, 30);
					// JavaScript.g:301:30: ( LT !)*
					try { DebugEnterSubRule(165);
					while (true)
					{
						int alt165=2;
						try { DebugEnterDecision(165, false);
						int LA165_0 = input.LA(1);

						if ((LA165_0==LT))
						{
							alt165 = 1;
						}


						} finally { DebugExitDecision(165); }
						switch ( alt165 )
						{
						case 1:
							DebugEnterAlt(1);
							// JavaScript.g:301:30: LT !
							{
							DebugLocation(301, 30);
							LT338=(IToken)new XToken((IToken)Match(input,LT,Follow._LT_in_logicalANDExpression2463), "LT"); if (state.failed) return retval;

							}
							break;

						default:
							goto loop165;
						}
					}

					loop165:
						;

					} finally { DebugExitSubRule(165); }

					DebugLocation(301, 33);
					string_literal339=(IToken)Match(input,48,Follow._48_in_logicalANDExpression2467); if (state.failed) return retval;
					if (state.backtracking == 0) {
					string_literal339_tree = (object)adaptor.Create(string_literal339, retval);
					adaptor.AddChild(root_0, string_literal339_tree);
					}
					DebugLocation(301, 40);
					// JavaScript.g:301:40: ( LT !)*
					try { DebugEnterSubRule(166);
					while (true)
					{
						int alt166=2;
						try { DebugEnterDecision(166, false);
						int LA166_0 = input.LA(1);

						if ((LA166_0==LT))
						{
							alt166 = 1;
						}


						} finally { DebugExitDecision(166); }
						switch ( alt166 )
						{
						case 1:
							DebugEnterAlt(1);
							// JavaScript.g:301:40: LT !
							{
							DebugLocation(301, 40);
							LT340=(IToken)new XToken((IToken)Match(input,LT,Follow._LT_in_logicalANDExpression2469), "LT"); if (state.failed) return retval;

							}
							break;

						default:
							goto loop166;
						}
					}

					loop166:
						;

					} finally { DebugExitSubRule(166); }

					DebugLocation(301, 43);
					PushFollow(Follow._bitwiseORExpression_in_logicalANDExpression2473);
					bitwiseORExpression341=bitwiseORExpression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, bitwiseORExpression341.Tree, bitwiseORExpression341, retval);

					}
					break;

				default:
					goto loop167;
				}
			}

			loop167:
				;

			} finally { DebugExitSubRule(167); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("logicalANDExpression", 60);
			LeaveRule("logicalANDExpression", 60);
			LeaveRule_logicalANDExpression();
			if (state.backtracking > 0) { Memoize(input, 60, logicalANDExpression_StartIndex); }

		}
		DebugLocation(302, 4);
		} finally { DebugExitRule(GrammarFileName, "logicalANDExpression"); }
		return retval;

	}
	// $ANTLR end "logicalANDExpression"

	partial void EnterRule_logicalANDExpressionNoIn();
	partial void LeaveRule_logicalANDExpressionNoIn();

	// $ANTLR start "logicalANDExpressionNoIn"
	// JavaScript.g:304:1: logicalANDExpressionNoIn : bitwiseORExpressionNoIn ( ( LT !)* '&&' ( LT !)* bitwiseORExpressionNoIn )* ;
	[GrammarRule("logicalANDExpressionNoIn")]
	public XAstParserRuleReturnScope logicalANDExpressionNoIn()
	{
		EnterRule_logicalANDExpressionNoIn();
		EnterRule("logicalANDExpressionNoIn", 61);
		var retval = new XAstParserRuleReturnScope("logicalANDExpressionNoIn");
		retval.Start = (IToken)input.LT(1);
		int logicalANDExpressionNoIn_StartIndex = input.Index;

		object root_0 = default(object);

		IToken LT343 = default(IToken);
		IToken string_literal344 = default(IToken);
		IToken LT345 = default(IToken);
		XAstParserRuleReturnScope bitwiseORExpressionNoIn342 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope bitwiseORExpressionNoIn346 = default(XAstParserRuleReturnScope);

		object LT343_tree = default(object);
		object string_literal344_tree = default(object);
		object LT345_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "logicalANDExpressionNoIn");
		DebugLocation(304, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 61)) { return retval; }

			// JavaScript.g:305:5: ( bitwiseORExpressionNoIn ( ( LT !)* '&&' ( LT !)* bitwiseORExpressionNoIn )* )
			DebugEnterAlt(1);
			// JavaScript.g:305:7: bitwiseORExpressionNoIn ( ( LT !)* '&&' ( LT !)* bitwiseORExpressionNoIn )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(305, 7);
			PushFollow(Follow._bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn2496);
			bitwiseORExpressionNoIn342=bitwiseORExpressionNoIn();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, bitwiseORExpressionNoIn342.Tree, bitwiseORExpressionNoIn342, retval);
			DebugLocation(305, 31);
			// JavaScript.g:305:31: ( ( LT !)* '&&' ( LT !)* bitwiseORExpressionNoIn )*
			try { DebugEnterSubRule(170);
			while (true)
			{
				int alt170=2;
				try { DebugEnterDecision(170, false);
				try
				{
					alt170 = dfa170.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(170); }
				switch ( alt170 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g:305:32: ( LT !)* '&&' ( LT !)* bitwiseORExpressionNoIn
					{
					DebugLocation(305, 34);
					// JavaScript.g:305:34: ( LT !)*
					try { DebugEnterSubRule(168);
					while (true)
					{
						int alt168=2;
						try { DebugEnterDecision(168, false);
						int LA168_0 = input.LA(1);

						if ((LA168_0==LT))
						{
							alt168 = 1;
						}


						} finally { DebugExitDecision(168); }
						switch ( alt168 )
						{
						case 1:
							DebugEnterAlt(1);
							// JavaScript.g:305:34: LT !
							{
							DebugLocation(305, 34);
							LT343=(IToken)new XToken((IToken)Match(input,LT,Follow._LT_in_logicalANDExpressionNoIn2499), "LT"); if (state.failed) return retval;

							}
							break;

						default:
							goto loop168;
						}
					}

					loop168:
						;

					} finally { DebugExitSubRule(168); }

					DebugLocation(305, 37);
					string_literal344=(IToken)Match(input,48,Follow._48_in_logicalANDExpressionNoIn2503); if (state.failed) return retval;
					if (state.backtracking == 0) {
					string_literal344_tree = (object)adaptor.Create(string_literal344, retval);
					adaptor.AddChild(root_0, string_literal344_tree);
					}
					DebugLocation(305, 44);
					// JavaScript.g:305:44: ( LT !)*
					try { DebugEnterSubRule(169);
					while (true)
					{
						int alt169=2;
						try { DebugEnterDecision(169, false);
						int LA169_0 = input.LA(1);

						if ((LA169_0==LT))
						{
							alt169 = 1;
						}


						} finally { DebugExitDecision(169); }
						switch ( alt169 )
						{
						case 1:
							DebugEnterAlt(1);
							// JavaScript.g:305:44: LT !
							{
							DebugLocation(305, 44);
							LT345=(IToken)new XToken((IToken)Match(input,LT,Follow._LT_in_logicalANDExpressionNoIn2505), "LT"); if (state.failed) return retval;

							}
							break;

						default:
							goto loop169;
						}
					}

					loop169:
						;

					} finally { DebugExitSubRule(169); }

					DebugLocation(305, 47);
					PushFollow(Follow._bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn2509);
					bitwiseORExpressionNoIn346=bitwiseORExpressionNoIn();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, bitwiseORExpressionNoIn346.Tree, bitwiseORExpressionNoIn346, retval);

					}
					break;

				default:
					goto loop170;
				}
			}

			loop170:
				;

			} finally { DebugExitSubRule(170); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("logicalANDExpressionNoIn", 61);
			LeaveRule("logicalANDExpressionNoIn", 61);
			LeaveRule_logicalANDExpressionNoIn();
			if (state.backtracking > 0) { Memoize(input, 61, logicalANDExpressionNoIn_StartIndex); }

		}
		DebugLocation(306, 4);
		} finally { DebugExitRule(GrammarFileName, "logicalANDExpressionNoIn"); }
		return retval;

	}
	// $ANTLR end "logicalANDExpressionNoIn"

	partial void EnterRule_bitwiseORExpression();
	partial void LeaveRule_bitwiseORExpression();

	// $ANTLR start "bitwiseORExpression"
	// JavaScript.g:308:1: bitwiseORExpression : bitwiseXORExpression ( ( LT !)* '|' ( LT !)* bitwiseXORExpression )* ;
	[GrammarRule("bitwiseORExpression")]
	public XAstParserRuleReturnScope bitwiseORExpression()
	{
		EnterRule_bitwiseORExpression();
		EnterRule("bitwiseORExpression", 62);
		var retval = new XAstParserRuleReturnScope("bitwiseORExpression");
		retval.Start = (IToken)input.LT(1);
		int bitwiseORExpression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken LT348 = default(IToken);
		IToken char_literal349 = default(IToken);
		IToken LT350 = default(IToken);
		XAstParserRuleReturnScope bitwiseXORExpression347 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope bitwiseXORExpression351 = default(XAstParserRuleReturnScope);

		object LT348_tree = default(object);
		object char_literal349_tree = default(object);
		object LT350_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "bitwiseORExpression");
		DebugLocation(308, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 62)) { return retval; }

			// JavaScript.g:309:5: ( bitwiseXORExpression ( ( LT !)* '|' ( LT !)* bitwiseXORExpression )* )
			DebugEnterAlt(1);
			// JavaScript.g:309:7: bitwiseXORExpression ( ( LT !)* '|' ( LT !)* bitwiseXORExpression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(309, 7);
			PushFollow(Follow._bitwiseXORExpression_in_bitwiseORExpression2532);
			bitwiseXORExpression347=bitwiseXORExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, bitwiseXORExpression347.Tree, bitwiseXORExpression347, retval);
			DebugLocation(309, 28);
			// JavaScript.g:309:28: ( ( LT !)* '|' ( LT !)* bitwiseXORExpression )*
			try { DebugEnterSubRule(173);
			while (true)
			{
				int alt173=2;
				try { DebugEnterDecision(173, false);
				try
				{
					alt173 = dfa173.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(173); }
				switch ( alt173 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g:309:29: ( LT !)* '|' ( LT !)* bitwiseXORExpression
					{
					DebugLocation(309, 31);
					// JavaScript.g:309:31: ( LT !)*
					try { DebugEnterSubRule(171);
					while (true)
					{
						int alt171=2;
						try { DebugEnterDecision(171, false);
						int LA171_0 = input.LA(1);

						if ((LA171_0==LT))
						{
							alt171 = 1;
						}


						} finally { DebugExitDecision(171); }
						switch ( alt171 )
						{
						case 1:
							DebugEnterAlt(1);
							// JavaScript.g:309:31: LT !
							{
							DebugLocation(309, 31);
							LT348=(IToken)new XToken((IToken)Match(input,LT,Follow._LT_in_bitwiseORExpression2535), "LT"); if (state.failed) return retval;

							}
							break;

						default:
							goto loop171;
						}
					}

					loop171:
						;

					} finally { DebugExitSubRule(171); }

					DebugLocation(309, 34);
					char_literal349=(IToken)Match(input,108,Follow._108_in_bitwiseORExpression2539); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal349_tree = (object)adaptor.Create(char_literal349, retval);
					adaptor.AddChild(root_0, char_literal349_tree);
					}
					DebugLocation(309, 40);
					// JavaScript.g:309:40: ( LT !)*
					try { DebugEnterSubRule(172);
					while (true)
					{
						int alt172=2;
						try { DebugEnterDecision(172, false);
						int LA172_0 = input.LA(1);

						if ((LA172_0==LT))
						{
							alt172 = 1;
						}


						} finally { DebugExitDecision(172); }
						switch ( alt172 )
						{
						case 1:
							DebugEnterAlt(1);
							// JavaScript.g:309:40: LT !
							{
							DebugLocation(309, 40);
							LT350=(IToken)new XToken((IToken)Match(input,LT,Follow._LT_in_bitwiseORExpression2541), "LT"); if (state.failed) return retval;

							}
							break;

						default:
							goto loop172;
						}
					}

					loop172:
						;

					} finally { DebugExitSubRule(172); }

					DebugLocation(309, 43);
					PushFollow(Follow._bitwiseXORExpression_in_bitwiseORExpression2545);
					bitwiseXORExpression351=bitwiseXORExpression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, bitwiseXORExpression351.Tree, bitwiseXORExpression351, retval);

					}
					break;

				default:
					goto loop173;
				}
			}

			loop173:
				;

			} finally { DebugExitSubRule(173); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bitwiseORExpression", 62);
			LeaveRule("bitwiseORExpression", 62);
			LeaveRule_bitwiseORExpression();
			if (state.backtracking > 0) { Memoize(input, 62, bitwiseORExpression_StartIndex); }

		}
		DebugLocation(310, 4);
		} finally { DebugExitRule(GrammarFileName, "bitwiseORExpression"); }
		return retval;

	}
	// $ANTLR end "bitwiseORExpression"

	partial void EnterRule_bitwiseORExpressionNoIn();
	partial void LeaveRule_bitwiseORExpressionNoIn();

	// $ANTLR start "bitwiseORExpressionNoIn"
	// JavaScript.g:312:1: bitwiseORExpressionNoIn : bitwiseXORExpressionNoIn ( ( LT !)* '|' ( LT !)* bitwiseXORExpressionNoIn )* ;
	[GrammarRule("bitwiseORExpressionNoIn")]
	public XAstParserRuleReturnScope bitwiseORExpressionNoIn()
	{
		EnterRule_bitwiseORExpressionNoIn();
		EnterRule("bitwiseORExpressionNoIn", 63);
		var retval = new XAstParserRuleReturnScope("bitwiseORExpressionNoIn");
		retval.Start = (IToken)input.LT(1);
		int bitwiseORExpressionNoIn_StartIndex = input.Index;

		object root_0 = default(object);

		IToken LT353 = default(IToken);
		IToken char_literal354 = default(IToken);
		IToken LT355 = default(IToken);
		XAstParserRuleReturnScope bitwiseXORExpressionNoIn352 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope bitwiseXORExpressionNoIn356 = default(XAstParserRuleReturnScope);

		object LT353_tree = default(object);
		object char_literal354_tree = default(object);
		object LT355_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "bitwiseORExpressionNoIn");
		DebugLocation(312, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 63)) { return retval; }

			// JavaScript.g:313:5: ( bitwiseXORExpressionNoIn ( ( LT !)* '|' ( LT !)* bitwiseXORExpressionNoIn )* )
			DebugEnterAlt(1);
			// JavaScript.g:313:7: bitwiseXORExpressionNoIn ( ( LT !)* '|' ( LT !)* bitwiseXORExpressionNoIn )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(313, 7);
			PushFollow(Follow._bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn2568);
			bitwiseXORExpressionNoIn352=bitwiseXORExpressionNoIn();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, bitwiseXORExpressionNoIn352.Tree, bitwiseXORExpressionNoIn352, retval);
			DebugLocation(313, 32);
			// JavaScript.g:313:32: ( ( LT !)* '|' ( LT !)* bitwiseXORExpressionNoIn )*
			try { DebugEnterSubRule(176);
			while (true)
			{
				int alt176=2;
				try { DebugEnterDecision(176, false);
				try
				{
					alt176 = dfa176.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(176); }
				switch ( alt176 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g:313:33: ( LT !)* '|' ( LT !)* bitwiseXORExpressionNoIn
					{
					DebugLocation(313, 35);
					// JavaScript.g:313:35: ( LT !)*
					try { DebugEnterSubRule(174);
					while (true)
					{
						int alt174=2;
						try { DebugEnterDecision(174, false);
						int LA174_0 = input.LA(1);

						if ((LA174_0==LT))
						{
							alt174 = 1;
						}


						} finally { DebugExitDecision(174); }
						switch ( alt174 )
						{
						case 1:
							DebugEnterAlt(1);
							// JavaScript.g:313:35: LT !
							{
							DebugLocation(313, 35);
							LT353=(IToken)new XToken((IToken)Match(input,LT,Follow._LT_in_bitwiseORExpressionNoIn2571), "LT"); if (state.failed) return retval;

							}
							break;

						default:
							goto loop174;
						}
					}

					loop174:
						;

					} finally { DebugExitSubRule(174); }

					DebugLocation(313, 38);
					char_literal354=(IToken)Match(input,108,Follow._108_in_bitwiseORExpressionNoIn2575); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal354_tree = (object)adaptor.Create(char_literal354, retval);
					adaptor.AddChild(root_0, char_literal354_tree);
					}
					DebugLocation(313, 44);
					// JavaScript.g:313:44: ( LT !)*
					try { DebugEnterSubRule(175);
					while (true)
					{
						int alt175=2;
						try { DebugEnterDecision(175, false);
						int LA175_0 = input.LA(1);

						if ((LA175_0==LT))
						{
							alt175 = 1;
						}


						} finally { DebugExitDecision(175); }
						switch ( alt175 )
						{
						case 1:
							DebugEnterAlt(1);
							// JavaScript.g:313:44: LT !
							{
							DebugLocation(313, 44);
							LT355=(IToken)new XToken((IToken)Match(input,LT,Follow._LT_in_bitwiseORExpressionNoIn2577), "LT"); if (state.failed) return retval;

							}
							break;

						default:
							goto loop175;
						}
					}

					loop175:
						;

					} finally { DebugExitSubRule(175); }

					DebugLocation(313, 47);
					PushFollow(Follow._bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn2581);
					bitwiseXORExpressionNoIn356=bitwiseXORExpressionNoIn();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, bitwiseXORExpressionNoIn356.Tree, bitwiseXORExpressionNoIn356, retval);

					}
					break;

				default:
					goto loop176;
				}
			}

			loop176:
				;

			} finally { DebugExitSubRule(176); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bitwiseORExpressionNoIn", 63);
			LeaveRule("bitwiseORExpressionNoIn", 63);
			LeaveRule_bitwiseORExpressionNoIn();
			if (state.backtracking > 0) { Memoize(input, 63, bitwiseORExpressionNoIn_StartIndex); }

		}
		DebugLocation(314, 4);
		} finally { DebugExitRule(GrammarFileName, "bitwiseORExpressionNoIn"); }
		return retval;

	}
	// $ANTLR end "bitwiseORExpressionNoIn"

	partial void EnterRule_bitwiseXORExpression();
	partial void LeaveRule_bitwiseXORExpression();

	// $ANTLR start "bitwiseXORExpression"
	// JavaScript.g:316:1: bitwiseXORExpression : bitwiseANDExpression ( ( LT !)* '^' ( LT !)* bitwiseANDExpression )* ;
	[GrammarRule("bitwiseXORExpression")]
	public XAstParserRuleReturnScope bitwiseXORExpression()
	{
		EnterRule_bitwiseXORExpression();
		EnterRule("bitwiseXORExpression", 64);
		var retval = new XAstParserRuleReturnScope("bitwiseXORExpression");
		retval.Start = (IToken)input.LT(1);
		int bitwiseXORExpression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken LT358 = default(IToken);
		IToken char_literal359 = default(IToken);
		IToken LT360 = default(IToken);
		XAstParserRuleReturnScope bitwiseANDExpression357 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope bitwiseANDExpression361 = default(XAstParserRuleReturnScope);

		object LT358_tree = default(object);
		object char_literal359_tree = default(object);
		object LT360_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "bitwiseXORExpression");
		DebugLocation(316, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 64)) { return retval; }

			// JavaScript.g:317:5: ( bitwiseANDExpression ( ( LT !)* '^' ( LT !)* bitwiseANDExpression )* )
			DebugEnterAlt(1);
			// JavaScript.g:317:7: bitwiseANDExpression ( ( LT !)* '^' ( LT !)* bitwiseANDExpression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(317, 7);
			PushFollow(Follow._bitwiseANDExpression_in_bitwiseXORExpression2604);
			bitwiseANDExpression357=bitwiseANDExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, bitwiseANDExpression357.Tree, bitwiseANDExpression357, retval);
			DebugLocation(317, 28);
			// JavaScript.g:317:28: ( ( LT !)* '^' ( LT !)* bitwiseANDExpression )*
			try { DebugEnterSubRule(179);
			while (true)
			{
				int alt179=2;
				try { DebugEnterDecision(179, false);
				try
				{
					alt179 = dfa179.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(179); }
				switch ( alt179 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g:317:29: ( LT !)* '^' ( LT !)* bitwiseANDExpression
					{
					DebugLocation(317, 31);
					// JavaScript.g:317:31: ( LT !)*
					try { DebugEnterSubRule(177);
					while (true)
					{
						int alt177=2;
						try { DebugEnterDecision(177, false);
						int LA177_0 = input.LA(1);

						if ((LA177_0==LT))
						{
							alt177 = 1;
						}


						} finally { DebugExitDecision(177); }
						switch ( alt177 )
						{
						case 1:
							DebugEnterAlt(1);
							// JavaScript.g:317:31: LT !
							{
							DebugLocation(317, 31);
							LT358=(IToken)new XToken((IToken)Match(input,LT,Follow._LT_in_bitwiseXORExpression2607), "LT"); if (state.failed) return retval;

							}
							break;

						default:
							goto loop177;
						}
					}

					loop177:
						;

					} finally { DebugExitSubRule(177); }

					DebugLocation(317, 34);
					char_literal359=(IToken)Match(input,81,Follow._81_in_bitwiseXORExpression2611); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal359_tree = (object)adaptor.Create(char_literal359, retval);
					adaptor.AddChild(root_0, char_literal359_tree);
					}
					DebugLocation(317, 40);
					// JavaScript.g:317:40: ( LT !)*
					try { DebugEnterSubRule(178);
					while (true)
					{
						int alt178=2;
						try { DebugEnterDecision(178, false);
						int LA178_0 = input.LA(1);

						if ((LA178_0==LT))
						{
							alt178 = 1;
						}


						} finally { DebugExitDecision(178); }
						switch ( alt178 )
						{
						case 1:
							DebugEnterAlt(1);
							// JavaScript.g:317:40: LT !
							{
							DebugLocation(317, 40);
							LT360=(IToken)new XToken((IToken)Match(input,LT,Follow._LT_in_bitwiseXORExpression2613), "LT"); if (state.failed) return retval;

							}
							break;

						default:
							goto loop178;
						}
					}

					loop178:
						;

					} finally { DebugExitSubRule(178); }

					DebugLocation(317, 43);
					PushFollow(Follow._bitwiseANDExpression_in_bitwiseXORExpression2617);
					bitwiseANDExpression361=bitwiseANDExpression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, bitwiseANDExpression361.Tree, bitwiseANDExpression361, retval);

					}
					break;

				default:
					goto loop179;
				}
			}

			loop179:
				;

			} finally { DebugExitSubRule(179); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bitwiseXORExpression", 64);
			LeaveRule("bitwiseXORExpression", 64);
			LeaveRule_bitwiseXORExpression();
			if (state.backtracking > 0) { Memoize(input, 64, bitwiseXORExpression_StartIndex); }

		}
		DebugLocation(318, 4);
		} finally { DebugExitRule(GrammarFileName, "bitwiseXORExpression"); }
		return retval;

	}
	// $ANTLR end "bitwiseXORExpression"

	partial void EnterRule_bitwiseXORExpressionNoIn();
	partial void LeaveRule_bitwiseXORExpressionNoIn();

	// $ANTLR start "bitwiseXORExpressionNoIn"
	// JavaScript.g:320:1: bitwiseXORExpressionNoIn : bitwiseANDExpressionNoIn ( ( LT !)* '^' ( LT !)* bitwiseANDExpressionNoIn )* ;
	[GrammarRule("bitwiseXORExpressionNoIn")]
	public XAstParserRuleReturnScope bitwiseXORExpressionNoIn()
	{
		EnterRule_bitwiseXORExpressionNoIn();
		EnterRule("bitwiseXORExpressionNoIn", 65);
		var retval = new XAstParserRuleReturnScope("bitwiseXORExpressionNoIn");
		retval.Start = (IToken)input.LT(1);
		int bitwiseXORExpressionNoIn_StartIndex = input.Index;

		object root_0 = default(object);

		IToken LT363 = default(IToken);
		IToken char_literal364 = default(IToken);
		IToken LT365 = default(IToken);
		XAstParserRuleReturnScope bitwiseANDExpressionNoIn362 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope bitwiseANDExpressionNoIn366 = default(XAstParserRuleReturnScope);

		object LT363_tree = default(object);
		object char_literal364_tree = default(object);
		object LT365_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "bitwiseXORExpressionNoIn");
		DebugLocation(320, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 65)) { return retval; }

			// JavaScript.g:321:5: ( bitwiseANDExpressionNoIn ( ( LT !)* '^' ( LT !)* bitwiseANDExpressionNoIn )* )
			DebugEnterAlt(1);
			// JavaScript.g:321:7: bitwiseANDExpressionNoIn ( ( LT !)* '^' ( LT !)* bitwiseANDExpressionNoIn )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(321, 7);
			PushFollow(Follow._bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn2640);
			bitwiseANDExpressionNoIn362=bitwiseANDExpressionNoIn();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, bitwiseANDExpressionNoIn362.Tree, bitwiseANDExpressionNoIn362, retval);
			DebugLocation(321, 32);
			// JavaScript.g:321:32: ( ( LT !)* '^' ( LT !)* bitwiseANDExpressionNoIn )*
			try { DebugEnterSubRule(182);
			while (true)
			{
				int alt182=2;
				try { DebugEnterDecision(182, false);
				try
				{
					alt182 = dfa182.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(182); }
				switch ( alt182 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g:321:33: ( LT !)* '^' ( LT !)* bitwiseANDExpressionNoIn
					{
					DebugLocation(321, 35);
					// JavaScript.g:321:35: ( LT !)*
					try { DebugEnterSubRule(180);
					while (true)
					{
						int alt180=2;
						try { DebugEnterDecision(180, false);
						int LA180_0 = input.LA(1);

						if ((LA180_0==LT))
						{
							alt180 = 1;
						}


						} finally { DebugExitDecision(180); }
						switch ( alt180 )
						{
						case 1:
							DebugEnterAlt(1);
							// JavaScript.g:321:35: LT !
							{
							DebugLocation(321, 35);
							LT363=(IToken)new XToken((IToken)Match(input,LT,Follow._LT_in_bitwiseXORExpressionNoIn2643), "LT"); if (state.failed) return retval;

							}
							break;

						default:
							goto loop180;
						}
					}

					loop180:
						;

					} finally { DebugExitSubRule(180); }

					DebugLocation(321, 38);
					char_literal364=(IToken)Match(input,81,Follow._81_in_bitwiseXORExpressionNoIn2647); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal364_tree = (object)adaptor.Create(char_literal364, retval);
					adaptor.AddChild(root_0, char_literal364_tree);
					}
					DebugLocation(321, 44);
					// JavaScript.g:321:44: ( LT !)*
					try { DebugEnterSubRule(181);
					while (true)
					{
						int alt181=2;
						try { DebugEnterDecision(181, false);
						int LA181_0 = input.LA(1);

						if ((LA181_0==LT))
						{
							alt181 = 1;
						}


						} finally { DebugExitDecision(181); }
						switch ( alt181 )
						{
						case 1:
							DebugEnterAlt(1);
							// JavaScript.g:321:44: LT !
							{
							DebugLocation(321, 44);
							LT365=(IToken)new XToken((IToken)Match(input,LT,Follow._LT_in_bitwiseXORExpressionNoIn2649), "LT"); if (state.failed) return retval;

							}
							break;

						default:
							goto loop181;
						}
					}

					loop181:
						;

					} finally { DebugExitSubRule(181); }

					DebugLocation(321, 47);
					PushFollow(Follow._bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn2653);
					bitwiseANDExpressionNoIn366=bitwiseANDExpressionNoIn();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, bitwiseANDExpressionNoIn366.Tree, bitwiseANDExpressionNoIn366, retval);

					}
					break;

				default:
					goto loop182;
				}
			}

			loop182:
				;

			} finally { DebugExitSubRule(182); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bitwiseXORExpressionNoIn", 65);
			LeaveRule("bitwiseXORExpressionNoIn", 65);
			LeaveRule_bitwiseXORExpressionNoIn();
			if (state.backtracking > 0) { Memoize(input, 65, bitwiseXORExpressionNoIn_StartIndex); }

		}
		DebugLocation(322, 4);
		} finally { DebugExitRule(GrammarFileName, "bitwiseXORExpressionNoIn"); }
		return retval;

	}
	// $ANTLR end "bitwiseXORExpressionNoIn"

	partial void EnterRule_bitwiseANDExpression();
	partial void LeaveRule_bitwiseANDExpression();

	// $ANTLR start "bitwiseANDExpression"
	// JavaScript.g:324:1: bitwiseANDExpression : equalityExpression ( ( LT !)* '&' ( LT !)* equalityExpression )* ;
	[GrammarRule("bitwiseANDExpression")]
	public XAstParserRuleReturnScope bitwiseANDExpression()
	{
		EnterRule_bitwiseANDExpression();
		EnterRule("bitwiseANDExpression", 66);
		var retval = new XAstParserRuleReturnScope("bitwiseANDExpression");
		retval.Start = (IToken)input.LT(1);
		int bitwiseANDExpression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken LT368 = default(IToken);
		IToken char_literal369 = default(IToken);
		IToken LT370 = default(IToken);
		XAstParserRuleReturnScope equalityExpression367 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope equalityExpression371 = default(XAstParserRuleReturnScope);

		object LT368_tree = default(object);
		object char_literal369_tree = default(object);
		object LT370_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "bitwiseANDExpression");
		DebugLocation(324, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 66)) { return retval; }

			// JavaScript.g:325:5: ( equalityExpression ( ( LT !)* '&' ( LT !)* equalityExpression )* )
			DebugEnterAlt(1);
			// JavaScript.g:325:7: equalityExpression ( ( LT !)* '&' ( LT !)* equalityExpression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(325, 7);
			PushFollow(Follow._equalityExpression_in_bitwiseANDExpression2676);
			equalityExpression367=equalityExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, equalityExpression367.Tree, equalityExpression367, retval);
			DebugLocation(325, 26);
			// JavaScript.g:325:26: ( ( LT !)* '&' ( LT !)* equalityExpression )*
			try { DebugEnterSubRule(185);
			while (true)
			{
				int alt185=2;
				try { DebugEnterDecision(185, false);
				try
				{
					alt185 = dfa185.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(185); }
				switch ( alt185 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g:325:27: ( LT !)* '&' ( LT !)* equalityExpression
					{
					DebugLocation(325, 29);
					// JavaScript.g:325:29: ( LT !)*
					try { DebugEnterSubRule(183);
					while (true)
					{
						int alt183=2;
						try { DebugEnterDecision(183, false);
						int LA183_0 = input.LA(1);

						if ((LA183_0==LT))
						{
							alt183 = 1;
						}


						} finally { DebugExitDecision(183); }
						switch ( alt183 )
						{
						case 1:
							DebugEnterAlt(1);
							// JavaScript.g:325:29: LT !
							{
							DebugLocation(325, 29);
							LT368=(IToken)new XToken((IToken)Match(input,LT,Follow._LT_in_bitwiseANDExpression2679), "LT"); if (state.failed) return retval;

							}
							break;

						default:
							goto loop183;
						}
					}

					loop183:
						;

					} finally { DebugExitSubRule(183); }

					DebugLocation(325, 32);
					char_literal369=(IToken)Match(input,49,Follow._49_in_bitwiseANDExpression2683); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal369_tree = (object)adaptor.Create(char_literal369, retval);
					adaptor.AddChild(root_0, char_literal369_tree);
					}
					DebugLocation(325, 38);
					// JavaScript.g:325:38: ( LT !)*
					try { DebugEnterSubRule(184);
					while (true)
					{
						int alt184=2;
						try { DebugEnterDecision(184, false);
						int LA184_0 = input.LA(1);

						if ((LA184_0==LT))
						{
							alt184 = 1;
						}


						} finally { DebugExitDecision(184); }
						switch ( alt184 )
						{
						case 1:
							DebugEnterAlt(1);
							// JavaScript.g:325:38: LT !
							{
							DebugLocation(325, 38);
							LT370=(IToken)new XToken((IToken)Match(input,LT,Follow._LT_in_bitwiseANDExpression2685), "LT"); if (state.failed) return retval;

							}
							break;

						default:
							goto loop184;
						}
					}

					loop184:
						;

					} finally { DebugExitSubRule(184); }

					DebugLocation(325, 41);
					PushFollow(Follow._equalityExpression_in_bitwiseANDExpression2689);
					equalityExpression371=equalityExpression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, equalityExpression371.Tree, equalityExpression371, retval);

					}
					break;

				default:
					goto loop185;
				}
			}

			loop185:
				;

			} finally { DebugExitSubRule(185); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bitwiseANDExpression", 66);
			LeaveRule("bitwiseANDExpression", 66);
			LeaveRule_bitwiseANDExpression();
			if (state.backtracking > 0) { Memoize(input, 66, bitwiseANDExpression_StartIndex); }

		}
		DebugLocation(326, 4);
		} finally { DebugExitRule(GrammarFileName, "bitwiseANDExpression"); }
		return retval;

	}
	// $ANTLR end "bitwiseANDExpression"

	partial void EnterRule_bitwiseANDExpressionNoIn();
	partial void LeaveRule_bitwiseANDExpressionNoIn();

	// $ANTLR start "bitwiseANDExpressionNoIn"
	// JavaScript.g:328:1: bitwiseANDExpressionNoIn : equalityExpressionNoIn ( ( LT !)* '&' ( LT !)* equalityExpressionNoIn )* ;
	[GrammarRule("bitwiseANDExpressionNoIn")]
	public XAstParserRuleReturnScope bitwiseANDExpressionNoIn()
	{
		EnterRule_bitwiseANDExpressionNoIn();
		EnterRule("bitwiseANDExpressionNoIn", 67);
		var retval = new XAstParserRuleReturnScope("bitwiseANDExpressionNoIn");
		retval.Start = (IToken)input.LT(1);
		int bitwiseANDExpressionNoIn_StartIndex = input.Index;

		object root_0 = default(object);

		IToken LT373 = default(IToken);
		IToken char_literal374 = default(IToken);
		IToken LT375 = default(IToken);
		XAstParserRuleReturnScope equalityExpressionNoIn372 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope equalityExpressionNoIn376 = default(XAstParserRuleReturnScope);

		object LT373_tree = default(object);
		object char_literal374_tree = default(object);
		object LT375_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "bitwiseANDExpressionNoIn");
		DebugLocation(328, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 67)) { return retval; }

			// JavaScript.g:329:5: ( equalityExpressionNoIn ( ( LT !)* '&' ( LT !)* equalityExpressionNoIn )* )
			DebugEnterAlt(1);
			// JavaScript.g:329:7: equalityExpressionNoIn ( ( LT !)* '&' ( LT !)* equalityExpressionNoIn )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(329, 7);
			PushFollow(Follow._equalityExpressionNoIn_in_bitwiseANDExpressionNoIn2712);
			equalityExpressionNoIn372=equalityExpressionNoIn();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, equalityExpressionNoIn372.Tree, equalityExpressionNoIn372, retval);
			DebugLocation(329, 30);
			// JavaScript.g:329:30: ( ( LT !)* '&' ( LT !)* equalityExpressionNoIn )*
			try { DebugEnterSubRule(188);
			while (true)
			{
				int alt188=2;
				try { DebugEnterDecision(188, false);
				try
				{
					alt188 = dfa188.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(188); }
				switch ( alt188 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g:329:31: ( LT !)* '&' ( LT !)* equalityExpressionNoIn
					{
					DebugLocation(329, 33);
					// JavaScript.g:329:33: ( LT !)*
					try { DebugEnterSubRule(186);
					while (true)
					{
						int alt186=2;
						try { DebugEnterDecision(186, false);
						int LA186_0 = input.LA(1);

						if ((LA186_0==LT))
						{
							alt186 = 1;
						}


						} finally { DebugExitDecision(186); }
						switch ( alt186 )
						{
						case 1:
							DebugEnterAlt(1);
							// JavaScript.g:329:33: LT !
							{
							DebugLocation(329, 33);
							LT373=(IToken)new XToken((IToken)Match(input,LT,Follow._LT_in_bitwiseANDExpressionNoIn2715), "LT"); if (state.failed) return retval;

							}
							break;

						default:
							goto loop186;
						}
					}

					loop186:
						;

					} finally { DebugExitSubRule(186); }

					DebugLocation(329, 36);
					char_literal374=(IToken)Match(input,49,Follow._49_in_bitwiseANDExpressionNoIn2719); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal374_tree = (object)adaptor.Create(char_literal374, retval);
					adaptor.AddChild(root_0, char_literal374_tree);
					}
					DebugLocation(329, 42);
					// JavaScript.g:329:42: ( LT !)*
					try { DebugEnterSubRule(187);
					while (true)
					{
						int alt187=2;
						try { DebugEnterDecision(187, false);
						int LA187_0 = input.LA(1);

						if ((LA187_0==LT))
						{
							alt187 = 1;
						}


						} finally { DebugExitDecision(187); }
						switch ( alt187 )
						{
						case 1:
							DebugEnterAlt(1);
							// JavaScript.g:329:42: LT !
							{
							DebugLocation(329, 42);
							LT375=(IToken)new XToken((IToken)Match(input,LT,Follow._LT_in_bitwiseANDExpressionNoIn2721), "LT"); if (state.failed) return retval;

							}
							break;

						default:
							goto loop187;
						}
					}

					loop187:
						;

					} finally { DebugExitSubRule(187); }

					DebugLocation(329, 45);
					PushFollow(Follow._equalityExpressionNoIn_in_bitwiseANDExpressionNoIn2725);
					equalityExpressionNoIn376=equalityExpressionNoIn();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, equalityExpressionNoIn376.Tree, equalityExpressionNoIn376, retval);

					}
					break;

				default:
					goto loop188;
				}
			}

			loop188:
				;

			} finally { DebugExitSubRule(188); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bitwiseANDExpressionNoIn", 67);
			LeaveRule("bitwiseANDExpressionNoIn", 67);
			LeaveRule_bitwiseANDExpressionNoIn();
			if (state.backtracking > 0) { Memoize(input, 67, bitwiseANDExpressionNoIn_StartIndex); }

		}
		DebugLocation(330, 4);
		} finally { DebugExitRule(GrammarFileName, "bitwiseANDExpressionNoIn"); }
		return retval;

	}
	// $ANTLR end "bitwiseANDExpressionNoIn"

	partial void EnterRule_equalityExpression();
	partial void LeaveRule_equalityExpression();

	// $ANTLR start "equalityExpression"
	// JavaScript.g:332:1: equalityExpression : relationalExpression ( ( LT !)* ( '==' | '!=' | '===' | '!==' ) ( LT !)* relationalExpression )* ;
	[GrammarRule("equalityExpression")]
	public XAstParserRuleReturnScope equalityExpression()
	{
		EnterRule_equalityExpression();
		EnterRule("equalityExpression", 68);
		var retval = new XAstParserRuleReturnScope("equalityExpression");
		retval.Start = (IToken)input.LT(1);
		int equalityExpression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken LT378 = default(IToken);
		IToken set379 = default(IToken);
		IToken LT380 = default(IToken);
		XAstParserRuleReturnScope relationalExpression377 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope relationalExpression381 = default(XAstParserRuleReturnScope);

		object LT378_tree = default(object);
		object set379_tree = default(object);
		object LT380_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "equalityExpression");
		DebugLocation(332, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 68)) { return retval; }

			// JavaScript.g:333:5: ( relationalExpression ( ( LT !)* ( '==' | '!=' | '===' | '!==' ) ( LT !)* relationalExpression )* )
			DebugEnterAlt(1);
			// JavaScript.g:333:7: relationalExpression ( ( LT !)* ( '==' | '!=' | '===' | '!==' ) ( LT !)* relationalExpression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(333, 7);
			PushFollow(Follow._relationalExpression_in_equalityExpression2748);
			relationalExpression377=relationalExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, relationalExpression377.Tree, relationalExpression377, retval);
			DebugLocation(333, 28);
			// JavaScript.g:333:28: ( ( LT !)* ( '==' | '!=' | '===' | '!==' ) ( LT !)* relationalExpression )*
			try { DebugEnterSubRule(191);
			while (true)
			{
				int alt191=2;
				try { DebugEnterDecision(191, false);
				try
				{
					alt191 = dfa191.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(191); }
				switch ( alt191 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g:333:29: ( LT !)* ( '==' | '!=' | '===' | '!==' ) ( LT !)* relationalExpression
					{
					DebugLocation(333, 31);
					// JavaScript.g:333:31: ( LT !)*
					try { DebugEnterSubRule(189);
					while (true)
					{
						int alt189=2;
						try { DebugEnterDecision(189, false);
						int LA189_0 = input.LA(1);

						if ((LA189_0==LT))
						{
							alt189 = 1;
						}


						} finally { DebugExitDecision(189); }
						switch ( alt189 )
						{
						case 1:
							DebugEnterAlt(1);
							// JavaScript.g:333:31: LT !
							{
							DebugLocation(333, 31);
							LT378=(IToken)new XToken((IToken)Match(input,LT,Follow._LT_in_equalityExpression2751), "LT"); if (state.failed) return retval;

							}
							break;

						default:
							goto loop189;
						}
					}

					loop189:
						;

					} finally { DebugExitSubRule(189); }

					DebugLocation(333, 34);

					set379=(IToken)input.LT(1);
					if ((input.LA(1)>=44 && input.LA(1)<=45)||(input.LA(1)>=71 && input.LA(1)<=72))
					{
						input.Consume();
						if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set379, retval));
						state.errorRecovery=false;state.failed=false;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(333, 66);
					// JavaScript.g:333:66: ( LT !)*
					try { DebugEnterSubRule(190);
					while (true)
					{
						int alt190=2;
						try { DebugEnterDecision(190, false);
						int LA190_0 = input.LA(1);

						if ((LA190_0==LT))
						{
							alt190 = 1;
						}


						} finally { DebugExitDecision(190); }
						switch ( alt190 )
						{
						case 1:
							DebugEnterAlt(1);
							// JavaScript.g:333:66: LT !
							{
							DebugLocation(333, 66);
							LT380=(IToken)new XToken((IToken)Match(input,LT,Follow._LT_in_equalityExpression2771), "LT"); if (state.failed) return retval;

							}
							break;

						default:
							goto loop190;
						}
					}

					loop190:
						;

					} finally { DebugExitSubRule(190); }

					DebugLocation(333, 69);
					PushFollow(Follow._relationalExpression_in_equalityExpression2775);
					relationalExpression381=relationalExpression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, relationalExpression381.Tree, relationalExpression381, retval);

					}
					break;

				default:
					goto loop191;
				}
			}

			loop191:
				;

			} finally { DebugExitSubRule(191); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("equalityExpression", 68);
			LeaveRule("equalityExpression", 68);
			LeaveRule_equalityExpression();
			if (state.backtracking > 0) { Memoize(input, 68, equalityExpression_StartIndex); }

		}
		DebugLocation(334, 4);
		} finally { DebugExitRule(GrammarFileName, "equalityExpression"); }
		return retval;

	}
	// $ANTLR end "equalityExpression"

	partial void EnterRule_equalityExpressionNoIn();
	partial void LeaveRule_equalityExpressionNoIn();

	// $ANTLR start "equalityExpressionNoIn"
	// JavaScript.g:336:1: equalityExpressionNoIn : relationalExpressionNoIn ( ( LT !)* ( '==' | '!=' | '===' | '!==' ) ( LT !)* relationalExpressionNoIn )* ;
	[GrammarRule("equalityExpressionNoIn")]
	public XAstParserRuleReturnScope equalityExpressionNoIn()
	{
		EnterRule_equalityExpressionNoIn();
		EnterRule("equalityExpressionNoIn", 69);
		var retval = new XAstParserRuleReturnScope("equalityExpressionNoIn");
		retval.Start = (IToken)input.LT(1);
		int equalityExpressionNoIn_StartIndex = input.Index;

		object root_0 = default(object);

		IToken LT383 = default(IToken);
		IToken set384 = default(IToken);
		IToken LT385 = default(IToken);
		XAstParserRuleReturnScope relationalExpressionNoIn382 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope relationalExpressionNoIn386 = default(XAstParserRuleReturnScope);

		object LT383_tree = default(object);
		object set384_tree = default(object);
		object LT385_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "equalityExpressionNoIn");
		DebugLocation(336, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 69)) { return retval; }

			// JavaScript.g:337:5: ( relationalExpressionNoIn ( ( LT !)* ( '==' | '!=' | '===' | '!==' ) ( LT !)* relationalExpressionNoIn )* )
			DebugEnterAlt(1);
			// JavaScript.g:337:7: relationalExpressionNoIn ( ( LT !)* ( '==' | '!=' | '===' | '!==' ) ( LT !)* relationalExpressionNoIn )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(337, 7);
			PushFollow(Follow._relationalExpressionNoIn_in_equalityExpressionNoIn2794);
			relationalExpressionNoIn382=relationalExpressionNoIn();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, relationalExpressionNoIn382.Tree, relationalExpressionNoIn382, retval);
			DebugLocation(337, 32);
			// JavaScript.g:337:32: ( ( LT !)* ( '==' | '!=' | '===' | '!==' ) ( LT !)* relationalExpressionNoIn )*
			try { DebugEnterSubRule(194);
			while (true)
			{
				int alt194=2;
				try { DebugEnterDecision(194, false);
				try
				{
					alt194 = dfa194.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(194); }
				switch ( alt194 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g:337:33: ( LT !)* ( '==' | '!=' | '===' | '!==' ) ( LT !)* relationalExpressionNoIn
					{
					DebugLocation(337, 35);
					// JavaScript.g:337:35: ( LT !)*
					try { DebugEnterSubRule(192);
					while (true)
					{
						int alt192=2;
						try { DebugEnterDecision(192, false);
						int LA192_0 = input.LA(1);

						if ((LA192_0==LT))
						{
							alt192 = 1;
						}


						} finally { DebugExitDecision(192); }
						switch ( alt192 )
						{
						case 1:
							DebugEnterAlt(1);
							// JavaScript.g:337:35: LT !
							{
							DebugLocation(337, 35);
							LT383=(IToken)new XToken((IToken)Match(input,LT,Follow._LT_in_equalityExpressionNoIn2797), "LT"); if (state.failed) return retval;

							}
							break;

						default:
							goto loop192;
						}
					}

					loop192:
						;

					} finally { DebugExitSubRule(192); }

					DebugLocation(337, 38);

					set384=(IToken)input.LT(1);
					if ((input.LA(1)>=44 && input.LA(1)<=45)||(input.LA(1)>=71 && input.LA(1)<=72))
					{
						input.Consume();
						if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set384, retval));
						state.errorRecovery=false;state.failed=false;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(337, 70);
					// JavaScript.g:337:70: ( LT !)*
					try { DebugEnterSubRule(193);
					while (true)
					{
						int alt193=2;
						try { DebugEnterDecision(193, false);
						int LA193_0 = input.LA(1);

						if ((LA193_0==LT))
						{
							alt193 = 1;
						}


						} finally { DebugExitDecision(193); }
						switch ( alt193 )
						{
						case 1:
							DebugEnterAlt(1);
							// JavaScript.g:337:70: LT !
							{
							DebugLocation(337, 70);
							LT385=(IToken)new XToken((IToken)Match(input,LT,Follow._LT_in_equalityExpressionNoIn2817), "LT"); if (state.failed) return retval;

							}
							break;

						default:
							goto loop193;
						}
					}

					loop193:
						;

					} finally { DebugExitSubRule(193); }

					DebugLocation(337, 73);
					PushFollow(Follow._relationalExpressionNoIn_in_equalityExpressionNoIn2821);
					relationalExpressionNoIn386=relationalExpressionNoIn();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, relationalExpressionNoIn386.Tree, relationalExpressionNoIn386, retval);

					}
					break;

				default:
					goto loop194;
				}
			}

			loop194:
				;

			} finally { DebugExitSubRule(194); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("equalityExpressionNoIn", 69);
			LeaveRule("equalityExpressionNoIn", 69);
			LeaveRule_equalityExpressionNoIn();
			if (state.backtracking > 0) { Memoize(input, 69, equalityExpressionNoIn_StartIndex); }

		}
		DebugLocation(338, 4);
		} finally { DebugExitRule(GrammarFileName, "equalityExpressionNoIn"); }
		return retval;

	}
	// $ANTLR end "equalityExpressionNoIn"

	partial void EnterRule_relationalExpression();
	partial void LeaveRule_relationalExpression();

	// $ANTLR start "relationalExpression"
	// JavaScript.g:340:1: relationalExpression : shiftExpression ( ( LT !)* ( '<' | '>' | '<=' | '>=' | 'instanceof' | 'in' ) ( LT !)* shiftExpression )* ;
	[GrammarRule("relationalExpression")]
	public XAstParserRuleReturnScope relationalExpression()
	{
		EnterRule_relationalExpression();
		EnterRule("relationalExpression", 70);
		var retval = new XAstParserRuleReturnScope("relationalExpression");
		retval.Start = (IToken)input.LT(1);
		int relationalExpression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken LT388 = default(IToken);
		IToken set389 = default(IToken);
		IToken LT390 = default(IToken);
		XAstParserRuleReturnScope shiftExpression387 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope shiftExpression391 = default(XAstParserRuleReturnScope);

		object LT388_tree = default(object);
		object set389_tree = default(object);
		object LT390_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "relationalExpression");
		DebugLocation(340, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 70)) { return retval; }

			// JavaScript.g:341:5: ( shiftExpression ( ( LT !)* ( '<' | '>' | '<=' | '>=' | 'instanceof' | 'in' ) ( LT !)* shiftExpression )* )
			DebugEnterAlt(1);
			// JavaScript.g:341:7: shiftExpression ( ( LT !)* ( '<' | '>' | '<=' | '>=' | 'instanceof' | 'in' ) ( LT !)* shiftExpression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(341, 7);
			PushFollow(Follow._shiftExpression_in_relationalExpression2844);
			shiftExpression387=shiftExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, shiftExpression387.Tree, shiftExpression387, retval);
			DebugLocation(341, 23);
			// JavaScript.g:341:23: ( ( LT !)* ( '<' | '>' | '<=' | '>=' | 'instanceof' | 'in' ) ( LT !)* shiftExpression )*
			try { DebugEnterSubRule(197);
			while (true)
			{
				int alt197=2;
				try { DebugEnterDecision(197, false);
				try
				{
					alt197 = dfa197.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(197); }
				switch ( alt197 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g:341:24: ( LT !)* ( '<' | '>' | '<=' | '>=' | 'instanceof' | 'in' ) ( LT !)* shiftExpression
					{
					DebugLocation(341, 26);
					// JavaScript.g:341:26: ( LT !)*
					try { DebugEnterSubRule(195);
					while (true)
					{
						int alt195=2;
						try { DebugEnterDecision(195, false);
						int LA195_0 = input.LA(1);

						if ((LA195_0==LT))
						{
							alt195 = 1;
						}


						} finally { DebugExitDecision(195); }
						switch ( alt195 )
						{
						case 1:
							DebugEnterAlt(1);
							// JavaScript.g:341:26: LT !
							{
							DebugLocation(341, 26);
							LT388=(IToken)new XToken((IToken)Match(input,LT,Follow._LT_in_relationalExpression2847), "LT"); if (state.failed) return retval;

							}
							break;

						default:
							goto loop195;
						}
					}

					loop195:
						;

					} finally { DebugExitSubRule(195); }

					DebugLocation(341, 29);

					set389=(IToken)input.LT(1);
					if (input.LA(1)==66||input.LA(1)==69||(input.LA(1)>=73 && input.LA(1)<=74)||(input.LA(1)>=95 && input.LA(1)<=96))
					{
						input.Consume();
						if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set389, retval));
						state.errorRecovery=false;state.failed=false;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(341, 79);
					// JavaScript.g:341:79: ( LT !)*
					try { DebugEnterSubRule(196);
					while (true)
					{
						int alt196=2;
						try { DebugEnterDecision(196, false);
						int LA196_0 = input.LA(1);

						if ((LA196_0==LT))
						{
							alt196 = 1;
						}


						} finally { DebugExitDecision(196); }
						switch ( alt196 )
						{
						case 1:
							DebugEnterAlt(1);
							// JavaScript.g:341:79: LT !
							{
							DebugLocation(341, 79);
							LT390=(IToken)new XToken((IToken)Match(input,LT,Follow._LT_in_relationalExpression2875), "LT"); if (state.failed) return retval;

							}
							break;

						default:
							goto loop196;
						}
					}

					loop196:
						;

					} finally { DebugExitSubRule(196); }

					DebugLocation(341, 82);
					PushFollow(Follow._shiftExpression_in_relationalExpression2879);
					shiftExpression391=shiftExpression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, shiftExpression391.Tree, shiftExpression391, retval);

					}
					break;

				default:
					goto loop197;
				}
			}

			loop197:
				;

			} finally { DebugExitSubRule(197); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("relationalExpression", 70);
			LeaveRule("relationalExpression", 70);
			LeaveRule_relationalExpression();
			if (state.backtracking > 0) { Memoize(input, 70, relationalExpression_StartIndex); }

		}
		DebugLocation(342, 4);
		} finally { DebugExitRule(GrammarFileName, "relationalExpression"); }
		return retval;

	}
	// $ANTLR end "relationalExpression"

	partial void EnterRule_relationalExpressionNoIn();
	partial void LeaveRule_relationalExpressionNoIn();

	// $ANTLR start "relationalExpressionNoIn"
	// JavaScript.g:344:1: relationalExpressionNoIn : shiftExpression ( ( LT !)* ( '<' | '>' | '<=' | '>=' | 'instanceof' ) ( LT !)* shiftExpression )* ;
	[GrammarRule("relationalExpressionNoIn")]
	public XAstParserRuleReturnScope relationalExpressionNoIn()
	{
		EnterRule_relationalExpressionNoIn();
		EnterRule("relationalExpressionNoIn", 71);
		var retval = new XAstParserRuleReturnScope("relationalExpressionNoIn");
		retval.Start = (IToken)input.LT(1);
		int relationalExpressionNoIn_StartIndex = input.Index;

		object root_0 = default(object);

		IToken LT393 = default(IToken);
		IToken set394 = default(IToken);
		IToken LT395 = default(IToken);
		XAstParserRuleReturnScope shiftExpression392 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope shiftExpression396 = default(XAstParserRuleReturnScope);

		object LT393_tree = default(object);
		object set394_tree = default(object);
		object LT395_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "relationalExpressionNoIn");
		DebugLocation(344, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 71)) { return retval; }

			// JavaScript.g:345:5: ( shiftExpression ( ( LT !)* ( '<' | '>' | '<=' | '>=' | 'instanceof' ) ( LT !)* shiftExpression )* )
			DebugEnterAlt(1);
			// JavaScript.g:345:7: shiftExpression ( ( LT !)* ( '<' | '>' | '<=' | '>=' | 'instanceof' ) ( LT !)* shiftExpression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(345, 7);
			PushFollow(Follow._shiftExpression_in_relationalExpressionNoIn2898);
			shiftExpression392=shiftExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, shiftExpression392.Tree, shiftExpression392, retval);
			DebugLocation(345, 23);
			// JavaScript.g:345:23: ( ( LT !)* ( '<' | '>' | '<=' | '>=' | 'instanceof' ) ( LT !)* shiftExpression )*
			try { DebugEnterSubRule(200);
			while (true)
			{
				int alt200=2;
				try { DebugEnterDecision(200, false);
				try
				{
					alt200 = dfa200.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(200); }
				switch ( alt200 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g:345:24: ( LT !)* ( '<' | '>' | '<=' | '>=' | 'instanceof' ) ( LT !)* shiftExpression
					{
					DebugLocation(345, 26);
					// JavaScript.g:345:26: ( LT !)*
					try { DebugEnterSubRule(198);
					while (true)
					{
						int alt198=2;
						try { DebugEnterDecision(198, false);
						int LA198_0 = input.LA(1);

						if ((LA198_0==LT))
						{
							alt198 = 1;
						}


						} finally { DebugExitDecision(198); }
						switch ( alt198 )
						{
						case 1:
							DebugEnterAlt(1);
							// JavaScript.g:345:26: LT !
							{
							DebugLocation(345, 26);
							LT393=(IToken)new XToken((IToken)Match(input,LT,Follow._LT_in_relationalExpressionNoIn2901), "LT"); if (state.failed) return retval;

							}
							break;

						default:
							goto loop198;
						}
					}

					loop198:
						;

					} finally { DebugExitSubRule(198); }

					DebugLocation(345, 29);

					set394=(IToken)input.LT(1);
					if (input.LA(1)==66||input.LA(1)==69||(input.LA(1)>=73 && input.LA(1)<=74)||input.LA(1)==96)
					{
						input.Consume();
						if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set394, retval));
						state.errorRecovery=false;state.failed=false;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(345, 72);
					// JavaScript.g:345:72: ( LT !)*
					try { DebugEnterSubRule(199);
					while (true)
					{
						int alt199=2;
						try { DebugEnterDecision(199, false);
						int LA199_0 = input.LA(1);

						if ((LA199_0==LT))
						{
							alt199 = 1;
						}


						} finally { DebugExitDecision(199); }
						switch ( alt199 )
						{
						case 1:
							DebugEnterAlt(1);
							// JavaScript.g:345:72: LT !
							{
							DebugLocation(345, 72);
							LT395=(IToken)new XToken((IToken)Match(input,LT,Follow._LT_in_relationalExpressionNoIn2925), "LT"); if (state.failed) return retval;

							}
							break;

						default:
							goto loop199;
						}
					}

					loop199:
						;

					} finally { DebugExitSubRule(199); }

					DebugLocation(345, 75);
					PushFollow(Follow._shiftExpression_in_relationalExpressionNoIn2929);
					shiftExpression396=shiftExpression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, shiftExpression396.Tree, shiftExpression396, retval);

					}
					break;

				default:
					goto loop200;
				}
			}

			loop200:
				;

			} finally { DebugExitSubRule(200); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("relationalExpressionNoIn", 71);
			LeaveRule("relationalExpressionNoIn", 71);
			LeaveRule_relationalExpressionNoIn();
			if (state.backtracking > 0) { Memoize(input, 71, relationalExpressionNoIn_StartIndex); }

		}
		DebugLocation(346, 4);
		} finally { DebugExitRule(GrammarFileName, "relationalExpressionNoIn"); }
		return retval;

	}
	// $ANTLR end "relationalExpressionNoIn"

	partial void EnterRule_shiftExpression();
	partial void LeaveRule_shiftExpression();

	// $ANTLR start "shiftExpression"
	// JavaScript.g:348:1: shiftExpression : additiveExpression ( ( LT !)* ( '<<' | '>>' | '>>>' ) ( LT !)* additiveExpression )* ;
	[GrammarRule("shiftExpression")]
	public XAstParserRuleReturnScope shiftExpression()
	{
		EnterRule_shiftExpression();
		EnterRule("shiftExpression", 72);
		var retval = new XAstParserRuleReturnScope("shiftExpression");
		retval.Start = (IToken)input.LT(1);
		int shiftExpression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken LT398 = default(IToken);
		IToken set399 = default(IToken);
		IToken LT400 = default(IToken);
		XAstParserRuleReturnScope additiveExpression397 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope additiveExpression401 = default(XAstParserRuleReturnScope);

		object LT398_tree = default(object);
		object set399_tree = default(object);
		object LT400_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "shiftExpression");
		DebugLocation(348, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 72)) { return retval; }

			// JavaScript.g:349:5: ( additiveExpression ( ( LT !)* ( '<<' | '>>' | '>>>' ) ( LT !)* additiveExpression )* )
			DebugEnterAlt(1);
			// JavaScript.g:349:7: additiveExpression ( ( LT !)* ( '<<' | '>>' | '>>>' ) ( LT !)* additiveExpression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(349, 7);
			PushFollow(Follow._additiveExpression_in_shiftExpression2948);
			additiveExpression397=additiveExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, additiveExpression397.Tree, additiveExpression397, retval);
			DebugLocation(349, 26);
			// JavaScript.g:349:26: ( ( LT !)* ( '<<' | '>>' | '>>>' ) ( LT !)* additiveExpression )*
			try { DebugEnterSubRule(203);
			while (true)
			{
				int alt203=2;
				try { DebugEnterDecision(203, false);
				try
				{
					alt203 = dfa203.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(203); }
				switch ( alt203 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g:349:27: ( LT !)* ( '<<' | '>>' | '>>>' ) ( LT !)* additiveExpression
					{
					DebugLocation(349, 29);
					// JavaScript.g:349:29: ( LT !)*
					try { DebugEnterSubRule(201);
					while (true)
					{
						int alt201=2;
						try { DebugEnterDecision(201, false);
						int LA201_0 = input.LA(1);

						if ((LA201_0==LT))
						{
							alt201 = 1;
						}


						} finally { DebugExitDecision(201); }
						switch ( alt201 )
						{
						case 1:
							DebugEnterAlt(1);
							// JavaScript.g:349:29: LT !
							{
							DebugLocation(349, 29);
							LT398=(IToken)new XToken((IToken)Match(input,LT,Follow._LT_in_shiftExpression2951), "LT"); if (state.failed) return retval;

							}
							break;

						default:
							goto loop201;
						}
					}

					loop201:
						;

					} finally { DebugExitSubRule(201); }

					DebugLocation(349, 32);

					set399=(IToken)input.LT(1);
					if (input.LA(1)==67||input.LA(1)==75||input.LA(1)==77)
					{
						input.Consume();
						if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set399, retval));
						state.errorRecovery=false;state.failed=false;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(349, 56);
					// JavaScript.g:349:56: ( LT !)*
					try { DebugEnterSubRule(202);
					while (true)
					{
						int alt202=2;
						try { DebugEnterDecision(202, false);
						int LA202_0 = input.LA(1);

						if ((LA202_0==LT))
						{
							alt202 = 1;
						}


						} finally { DebugExitDecision(202); }
						switch ( alt202 )
						{
						case 1:
							DebugEnterAlt(1);
							// JavaScript.g:349:56: LT !
							{
							DebugLocation(349, 56);
							LT400=(IToken)new XToken((IToken)Match(input,LT,Follow._LT_in_shiftExpression2967), "LT"); if (state.failed) return retval;

							}
							break;

						default:
							goto loop202;
						}
					}

					loop202:
						;

					} finally { DebugExitSubRule(202); }

					DebugLocation(349, 59);
					PushFollow(Follow._additiveExpression_in_shiftExpression2971);
					additiveExpression401=additiveExpression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, additiveExpression401.Tree, additiveExpression401, retval);

					}
					break;

				default:
					goto loop203;
				}
			}

			loop203:
				;

			} finally { DebugExitSubRule(203); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("shiftExpression", 72);
			LeaveRule("shiftExpression", 72);
			LeaveRule_shiftExpression();
			if (state.backtracking > 0) { Memoize(input, 72, shiftExpression_StartIndex); }

		}
		DebugLocation(350, 4);
		} finally { DebugExitRule(GrammarFileName, "shiftExpression"); }
		return retval;

	}
	// $ANTLR end "shiftExpression"

	partial void EnterRule_additiveExpression();
	partial void LeaveRule_additiveExpression();

	// $ANTLR start "additiveExpression"
	// JavaScript.g:352:1: additiveExpression : multiplicativeExpression ( ( LT !)* ( '+' | '-' ) ( LT !)* multiplicativeExpression )* ;
	[GrammarRule("additiveExpression")]
	public XAstParserRuleReturnScope additiveExpression()
	{
		EnterRule_additiveExpression();
		EnterRule("additiveExpression", 73);
		var retval = new XAstParserRuleReturnScope("additiveExpression");
		retval.Start = (IToken)input.LT(1);
		int additiveExpression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken LT403 = default(IToken);
		IToken set404 = default(IToken);
		IToken LT405 = default(IToken);
		XAstParserRuleReturnScope multiplicativeExpression402 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope multiplicativeExpression406 = default(XAstParserRuleReturnScope);

		object LT403_tree = default(object);
		object set404_tree = default(object);
		object LT405_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "additiveExpression");
		DebugLocation(352, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 73)) { return retval; }

			// JavaScript.g:353:5: ( multiplicativeExpression ( ( LT !)* ( '+' | '-' ) ( LT !)* multiplicativeExpression )* )
			DebugEnterAlt(1);
			// JavaScript.g:353:7: multiplicativeExpression ( ( LT !)* ( '+' | '-' ) ( LT !)* multiplicativeExpression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(353, 7);
			PushFollow(Follow._multiplicativeExpression_in_additiveExpression2990);
			multiplicativeExpression402=multiplicativeExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, multiplicativeExpression402.Tree, multiplicativeExpression402, retval);
			DebugLocation(353, 32);
			// JavaScript.g:353:32: ( ( LT !)* ( '+' | '-' ) ( LT !)* multiplicativeExpression )*
			try { DebugEnterSubRule(206);
			while (true)
			{
				int alt206=2;
				try { DebugEnterDecision(206, false);
				int LA206_0 = input.LA(1);

				if ((LA206_0==LT))
				{
					int LA206_1 = input.LA(2);

					if ((EvaluatePredicate(synpred255_JavaScript_fragment)))
					{
						alt206 = 1;
					}


				}
				else if ((LA206_0==54||LA206_0==58))
				{
					int LA206_30 = input.LA(2);

					if ((EvaluatePredicate(synpred255_JavaScript_fragment)))
					{
						alt206 = 1;
					}


				}


				} finally { DebugExitDecision(206); }
				switch ( alt206 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g:353:33: ( LT !)* ( '+' | '-' ) ( LT !)* multiplicativeExpression
					{
					DebugLocation(353, 35);
					// JavaScript.g:353:35: ( LT !)*
					try { DebugEnterSubRule(204);
					while (true)
					{
						int alt204=2;
						try { DebugEnterDecision(204, false);
						int LA204_0 = input.LA(1);

						if ((LA204_0==LT))
						{
							alt204 = 1;
						}


						} finally { DebugExitDecision(204); }
						switch ( alt204 )
						{
						case 1:
							DebugEnterAlt(1);
							// JavaScript.g:353:35: LT !
							{
							DebugLocation(353, 35);
							LT403=(IToken)new XToken((IToken)Match(input,LT,Follow._LT_in_additiveExpression2993), "LT"); if (state.failed) return retval;

							}
							break;

						default:
							goto loop204;
						}
					}

					loop204:
						;

					} finally { DebugExitSubRule(204); }

					DebugLocation(353, 38);

					set404=(IToken)input.LT(1);
					if (input.LA(1)==54||input.LA(1)==58)
					{
						input.Consume();
						if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set404, retval));
						state.errorRecovery=false;state.failed=false;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(353, 52);
					// JavaScript.g:353:52: ( LT !)*
					try { DebugEnterSubRule(205);
					while (true)
					{
						int alt205=2;
						try { DebugEnterDecision(205, false);
						int LA205_0 = input.LA(1);

						if ((LA205_0==LT))
						{
							alt205 = 1;
						}


						} finally { DebugExitDecision(205); }
						switch ( alt205 )
						{
						case 1:
							DebugEnterAlt(1);
							// JavaScript.g:353:52: LT !
							{
							DebugLocation(353, 52);
							LT405=(IToken)new XToken((IToken)Match(input,LT,Follow._LT_in_additiveExpression3005), "LT"); if (state.failed) return retval;

							}
							break;

						default:
							goto loop205;
						}
					}

					loop205:
						;

					} finally { DebugExitSubRule(205); }

					DebugLocation(353, 55);
					PushFollow(Follow._multiplicativeExpression_in_additiveExpression3009);
					multiplicativeExpression406=multiplicativeExpression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, multiplicativeExpression406.Tree, multiplicativeExpression406, retval);

					}
					break;

				default:
					goto loop206;
				}
			}

			loop206:
				;

			} finally { DebugExitSubRule(206); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("additiveExpression", 73);
			LeaveRule("additiveExpression", 73);
			LeaveRule_additiveExpression();
			if (state.backtracking > 0) { Memoize(input, 73, additiveExpression_StartIndex); }

		}
		DebugLocation(354, 4);
		} finally { DebugExitRule(GrammarFileName, "additiveExpression"); }
		return retval;

	}
	// $ANTLR end "additiveExpression"

	partial void EnterRule_multiplicativeExpression();
	partial void LeaveRule_multiplicativeExpression();

	// $ANTLR start "multiplicativeExpression"
	// JavaScript.g:356:1: multiplicativeExpression : unaryExpression ( ( LT !)* ( '*' | '/' | '%' ) ( LT !)* unaryExpression )* ;
	[GrammarRule("multiplicativeExpression")]
	public XAstParserRuleReturnScope multiplicativeExpression()
	{
		EnterRule_multiplicativeExpression();
		EnterRule("multiplicativeExpression", 74);
		var retval = new XAstParserRuleReturnScope("multiplicativeExpression");
		retval.Start = (IToken)input.LT(1);
		int multiplicativeExpression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken LT408 = default(IToken);
		IToken set409 = default(IToken);
		IToken LT410 = default(IToken);
		XAstParserRuleReturnScope unaryExpression407 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope unaryExpression411 = default(XAstParserRuleReturnScope);

		object LT408_tree = default(object);
		object set409_tree = default(object);
		object LT410_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "multiplicativeExpression");
		DebugLocation(356, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 74)) { return retval; }

			// JavaScript.g:357:5: ( unaryExpression ( ( LT !)* ( '*' | '/' | '%' ) ( LT !)* unaryExpression )* )
			DebugEnterAlt(1);
			// JavaScript.g:357:7: unaryExpression ( ( LT !)* ( '*' | '/' | '%' ) ( LT !)* unaryExpression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(357, 7);
			PushFollow(Follow._unaryExpression_in_multiplicativeExpression3028);
			unaryExpression407=unaryExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, unaryExpression407.Tree, unaryExpression407, retval);
			DebugLocation(357, 23);
			// JavaScript.g:357:23: ( ( LT !)* ( '*' | '/' | '%' ) ( LT !)* unaryExpression )*
			try { DebugEnterSubRule(209);
			while (true)
			{
				int alt209=2;
				try { DebugEnterDecision(209, false);
				try
				{
					alt209 = dfa209.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(209); }
				switch ( alt209 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g:357:24: ( LT !)* ( '*' | '/' | '%' ) ( LT !)* unaryExpression
					{
					DebugLocation(357, 26);
					// JavaScript.g:357:26: ( LT !)*
					try { DebugEnterSubRule(207);
					while (true)
					{
						int alt207=2;
						try { DebugEnterDecision(207, false);
						int LA207_0 = input.LA(1);

						if ((LA207_0==LT))
						{
							alt207 = 1;
						}


						} finally { DebugExitDecision(207); }
						switch ( alt207 )
						{
						case 1:
							DebugEnterAlt(1);
							// JavaScript.g:357:26: LT !
							{
							DebugLocation(357, 26);
							LT408=(IToken)new XToken((IToken)Match(input,LT,Follow._LT_in_multiplicativeExpression3031), "LT"); if (state.failed) return retval;

							}
							break;

						default:
							goto loop207;
						}
					}

					loop207:
						;

					} finally { DebugExitSubRule(207); }

					DebugLocation(357, 29);

					set409=(IToken)input.LT(1);
					if (input.LA(1)==46||input.LA(1)==52||input.LA(1)==62)
					{
						input.Consume();
						if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set409, retval));
						state.errorRecovery=false;state.failed=false;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(357, 49);
					// JavaScript.g:357:49: ( LT !)*
					try { DebugEnterSubRule(208);
					while (true)
					{
						int alt208=2;
						try { DebugEnterDecision(208, false);
						int LA208_0 = input.LA(1);

						if ((LA208_0==LT))
						{
							alt208 = 1;
						}


						} finally { DebugExitDecision(208); }
						switch ( alt208 )
						{
						case 1:
							DebugEnterAlt(1);
							// JavaScript.g:357:49: LT !
							{
							DebugLocation(357, 49);
							LT410=(IToken)new XToken((IToken)Match(input,LT,Follow._LT_in_multiplicativeExpression3047), "LT"); if (state.failed) return retval;

							}
							break;

						default:
							goto loop208;
						}
					}

					loop208:
						;

					} finally { DebugExitSubRule(208); }

					DebugLocation(357, 52);
					PushFollow(Follow._unaryExpression_in_multiplicativeExpression3051);
					unaryExpression411=unaryExpression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, unaryExpression411.Tree, unaryExpression411, retval);

					}
					break;

				default:
					goto loop209;
				}
			}

			loop209:
				;

			} finally { DebugExitSubRule(209); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("multiplicativeExpression", 74);
			LeaveRule("multiplicativeExpression", 74);
			LeaveRule_multiplicativeExpression();
			if (state.backtracking > 0) { Memoize(input, 74, multiplicativeExpression_StartIndex); }

		}
		DebugLocation(358, 4);
		} finally { DebugExitRule(GrammarFileName, "multiplicativeExpression"); }
		return retval;

	}
	// $ANTLR end "multiplicativeExpression"

	partial void EnterRule_unaryExpression();
	partial void LeaveRule_unaryExpression();

	// $ANTLR start "unaryExpression"
	// JavaScript.g:360:1: unaryExpression : ( postfixExpression | ( 'delete' | 'void' | 'typeof' | '++' | '--' | '+' | '-' | '~' | '!' ) unaryExpression );
	[GrammarRule("unaryExpression")]
	public XAstParserRuleReturnScope unaryExpression()
	{
		EnterRule_unaryExpression();
		EnterRule("unaryExpression", 75);
		var retval = new XAstParserRuleReturnScope("unaryExpression");
		retval.Start = (IToken)input.LT(1);
		int unaryExpression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken set413 = default(IToken);
		XAstParserRuleReturnScope postfixExpression412 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope unaryExpression414 = default(XAstParserRuleReturnScope);

		object set413_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "unaryExpression");
		DebugLocation(360, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 75)) { return retval; }

			// JavaScript.g:361:5: ( postfixExpression | ( 'delete' | 'void' | 'typeof' | '++' | '--' | '+' | '-' | '~' | '!' ) unaryExpression )
			int alt210=2;
			try { DebugEnterDecision(210, false);
			int LA210_0 = input.LA(1);

			if ((LA210_0==FALSE||LA210_0==Identifier||LA210_0==NULL||LA210_0==NumericLiteral||LA210_0==RegularExpressionLiteral||(LA210_0>=StringLiteral && LA210_0<=TRUE)||LA210_0==51||LA210_0==80||LA210_0==93||LA210_0==97||LA210_0==107))
			{
				alt210 = 1;
			}
			else if ((LA210_0==43||(LA210_0>=54 && LA210_0<=55)||(LA210_0>=58 && LA210_0<=59)||LA210_0==88||LA210_0==102||LA210_0==104||LA210_0==111))
			{
				alt210 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 210, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(210); }
			switch (alt210)
			{
			case 1:
				DebugEnterAlt(1);
				// JavaScript.g:361:7: postfixExpression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(361, 7);
				PushFollow(Follow._postfixExpression_in_unaryExpression3070);
				postfixExpression412=postfixExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, postfixExpression412.Tree, postfixExpression412, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// JavaScript.g:362:7: ( 'delete' | 'void' | 'typeof' | '++' | '--' | '+' | '-' | '~' | '!' ) unaryExpression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(362, 7);

				set413=(IToken)input.LT(1);
				if (input.LA(1)==43||(input.LA(1)>=54 && input.LA(1)<=55)||(input.LA(1)>=58 && input.LA(1)<=59)||input.LA(1)==88||input.LA(1)==102||input.LA(1)==104||input.LA(1)==111)
				{
					input.Consume();
					if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set413, retval));
					state.errorRecovery=false;state.failed=false;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(362, 76);
				PushFollow(Follow._unaryExpression_in_unaryExpression3114);
				unaryExpression414=unaryExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, unaryExpression414.Tree, unaryExpression414, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("unaryExpression", 75);
			LeaveRule("unaryExpression", 75);
			LeaveRule_unaryExpression();
			if (state.backtracking > 0) { Memoize(input, 75, unaryExpression_StartIndex); }

		}
		DebugLocation(363, 4);
		} finally { DebugExitRule(GrammarFileName, "unaryExpression"); }
		return retval;

	}
	// $ANTLR end "unaryExpression"

	partial void EnterRule_postfixExpression();
	partial void LeaveRule_postfixExpression();

	// $ANTLR start "postfixExpression"
	// JavaScript.g:365:1: postfixExpression : leftHandSideExpression ( '++' | '--' )? ;
	[GrammarRule("postfixExpression")]
	public XAstParserRuleReturnScope postfixExpression()
	{
		EnterRule_postfixExpression();
		EnterRule("postfixExpression", 76);
		var retval = new XAstParserRuleReturnScope("postfixExpression");
		retval.Start = (IToken)input.LT(1);
		int postfixExpression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken set416 = default(IToken);
		XAstParserRuleReturnScope leftHandSideExpression415 = default(XAstParserRuleReturnScope);

		object set416_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "postfixExpression");
		DebugLocation(365, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 76)) { return retval; }

			// JavaScript.g:366:5: ( leftHandSideExpression ( '++' | '--' )? )
			DebugEnterAlt(1);
			// JavaScript.g:366:7: leftHandSideExpression ( '++' | '--' )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(366, 7);
			PushFollow(Follow._leftHandSideExpression_in_postfixExpression3135);
			leftHandSideExpression415=leftHandSideExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, leftHandSideExpression415.Tree, leftHandSideExpression415, retval);
			DebugLocation(366, 30);
			// JavaScript.g:366:30: ( '++' | '--' )?
			int alt211=2;
			try { DebugEnterSubRule(211);
			try { DebugEnterDecision(211, false);
			int LA211_0 = input.LA(1);

			if ((LA211_0==55||LA211_0==59))
			{
				int LA211_1 = input.LA(2);

				if ((!((( input.LA(-1) == RBRACE || input.LA(1) == RBRACE )))))
				{
					alt211 = 1;
				}
			}
			} finally { DebugExitDecision(211); }
			switch (alt211)
			{
			case 1:
				DebugEnterAlt(1);
				// JavaScript.g:
				{
				DebugLocation(366, 30);

				set416=(IToken)input.LT(1);
				if (input.LA(1)==55||input.LA(1)==59)
				{
					input.Consume();
					if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set416, retval));
					state.errorRecovery=false;state.failed=false;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}


				}
				break;

			}
			} finally { DebugExitSubRule(211); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("postfixExpression", 76);
			LeaveRule("postfixExpression", 76);
			LeaveRule_postfixExpression();
			if (state.backtracking > 0) { Memoize(input, 76, postfixExpression_StartIndex); }

		}
		DebugLocation(367, 4);
		} finally { DebugExitRule(GrammarFileName, "postfixExpression"); }
		return retval;

	}
	// $ANTLR end "postfixExpression"

	partial void EnterRule_primaryExpression();
	partial void LeaveRule_primaryExpression();

	// $ANTLR start "primaryExpression"
	// JavaScript.g:369:1: primaryExpression : ( THIS | Identifier | literal | arrayLiteral | objectLiteral | '(' ( LT !)* expression ( LT !)* RPAREN );
	[GrammarRule("primaryExpression")]
	public XAstParserRuleReturnScope primaryExpression()
	{
		EnterRule_primaryExpression();
		EnterRule("primaryExpression", 77);
		var retval = new XAstParserRuleReturnScope("primaryExpression");
		retval.Start = (IToken)input.LT(1);
		int primaryExpression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken THIS417 = default(IToken);
		IToken Identifier418 = default(IToken);
		IToken char_literal422 = default(IToken);
		IToken LT423 = default(IToken);
		IToken LT425 = default(IToken);
		IToken RPAREN426 = default(IToken);
		XAstParserRuleReturnScope literal419 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope arrayLiteral420 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope objectLiteral421 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope expression424 = default(XAstParserRuleReturnScope);

		object THIS417_tree = default(object);
		object Identifier418_tree = default(object);
		object char_literal422_tree = default(object);
		object LT423_tree = default(object);
		object LT425_tree = default(object);
		object RPAREN426_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "primaryExpression");
		DebugLocation(369, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 77)) { return retval; }

			// JavaScript.g:370:5: ( THIS | Identifier | literal | arrayLiteral | objectLiteral | '(' ( LT !)* expression ( LT !)* RPAREN )
			int alt214=6;
			try { DebugEnterDecision(214, false);
			switch (input.LA(1))
			{
			case THIS:
				{
				alt214 = 1;
				}
				break;
			case Identifier:
				{
				alt214 = 2;
				}
				break;
			case FALSE:
			case NULL:
			case NumericLiteral:
			case RegularExpressionLiteral:
			case StringLiteral:
			case TRUE:
				{
				alt214 = 3;
				}
				break;
			case 80:
				{
				alt214 = 4;
				}
				break;
			case 107:
				{
				alt214 = 5;
				}
				break;
			case 51:
				{
				alt214 = 6;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 214, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(214); }
			switch (alt214)
			{
			case 1:
				DebugEnterAlt(1);
				// JavaScript.g:370:7: THIS
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(370, 7);
				THIS417=(IToken)new XToken((IToken)Match(input,THIS,Follow._THIS_in_primaryExpression3161), "THIS"); if (state.failed) return retval;
				if (state.backtracking == 0) {
				THIS417_tree = (object)adaptor.Create(THIS417, retval);
				adaptor.AddChild(root_0, THIS417_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// JavaScript.g:371:7: Identifier
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(371, 7);
				Identifier418=(IToken)new XToken((IToken)Match(input,Identifier,Follow._Identifier_in_primaryExpression3169), "Identifier"); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Identifier418_tree = (object)adaptor.Create(Identifier418, retval);
				adaptor.AddChild(root_0, Identifier418_tree);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// JavaScript.g:372:7: literal
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(372, 7);
				PushFollow(Follow._literal_in_primaryExpression3177);
				literal419=literal();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, literal419.Tree, literal419, retval);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// JavaScript.g:373:7: arrayLiteral
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(373, 7);
				PushFollow(Follow._arrayLiteral_in_primaryExpression3185);
				arrayLiteral420=arrayLiteral();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, arrayLiteral420.Tree, arrayLiteral420, retval);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// JavaScript.g:374:7: objectLiteral
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(374, 7);
				PushFollow(Follow._objectLiteral_in_primaryExpression3193);
				objectLiteral421=objectLiteral();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, objectLiteral421.Tree, objectLiteral421, retval);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// JavaScript.g:375:7: '(' ( LT !)* expression ( LT !)* RPAREN
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(375, 7);
				char_literal422=(IToken)Match(input,51,Follow._51_in_primaryExpression3201); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal422_tree = (object)adaptor.Create(char_literal422, retval);
				adaptor.AddChild(root_0, char_literal422_tree);
				}
				DebugLocation(375, 13);
				// JavaScript.g:375:13: ( LT !)*
				try { DebugEnterSubRule(212);
				while (true)
				{
					int alt212=2;
					try { DebugEnterDecision(212, false);
					int LA212_0 = input.LA(1);

					if ((LA212_0==LT))
					{
						alt212 = 1;
					}


					} finally { DebugExitDecision(212); }
					switch ( alt212 )
					{
					case 1:
						DebugEnterAlt(1);
						// JavaScript.g:375:13: LT !
						{
						DebugLocation(375, 13);
						LT423=(IToken)new XToken((IToken)Match(input,LT,Follow._LT_in_primaryExpression3203), "LT"); if (state.failed) return retval;

						}
						break;

					default:
						goto loop212;
					}
				}

				loop212:
					;

				} finally { DebugExitSubRule(212); }

				DebugLocation(375, 16);
				PushFollow(Follow._expression_in_primaryExpression3207);
				expression424=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression424.Tree, expression424, retval);
				DebugLocation(375, 29);
				// JavaScript.g:375:29: ( LT !)*
				try { DebugEnterSubRule(213);
				while (true)
				{
					int alt213=2;
					try { DebugEnterDecision(213, false);
					int LA213_0 = input.LA(1);

					if ((LA213_0==LT))
					{
						alt213 = 1;
					}


					} finally { DebugExitDecision(213); }
					switch ( alt213 )
					{
					case 1:
						DebugEnterAlt(1);
						// JavaScript.g:375:29: LT !
						{
						DebugLocation(375, 29);
						LT425=(IToken)new XToken((IToken)Match(input,LT,Follow._LT_in_primaryExpression3209), "LT"); if (state.failed) return retval;

						}
						break;

					default:
						goto loop213;
					}
				}

				loop213:
					;

				} finally { DebugExitSubRule(213); }

				DebugLocation(375, 32);
				RPAREN426=(IToken)new XToken((IToken)Match(input,RPAREN,Follow._RPAREN_in_primaryExpression3213), "RPAREN"); if (state.failed) return retval;
				if (state.backtracking == 0) {
				RPAREN426_tree = (object)adaptor.Create(RPAREN426, retval);
				adaptor.AddChild(root_0, RPAREN426_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("primaryExpression", 77);
			LeaveRule("primaryExpression", 77);
			LeaveRule_primaryExpression();
			if (state.backtracking > 0) { Memoize(input, 77, primaryExpression_StartIndex); }

		}
		DebugLocation(376, 4);
		} finally { DebugExitRule(GrammarFileName, "primaryExpression"); }
		return retval;

	}
	// $ANTLR end "primaryExpression"

	partial void EnterRule_arrayLiteral();
	partial void LeaveRule_arrayLiteral();

	// $ANTLR start "arrayLiteral"
	// JavaScript.g:379:1: arrayLiteral : '[' ( LT !)* ( assignmentExpression )? ( ( LT !)* ',' ( ( LT !)* assignmentExpression )? )* ( LT !)* RBRACK ;
	[GrammarRule("arrayLiteral")]
	public XAstParserRuleReturnScope arrayLiteral()
	{
		EnterRule_arrayLiteral();
		EnterRule("arrayLiteral", 78);
		var retval = new XAstParserRuleReturnScope("arrayLiteral");
		retval.Start = (IToken)input.LT(1);
		int arrayLiteral_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal427 = default(IToken);
		IToken LT428 = default(IToken);
		IToken LT430 = default(IToken);
		IToken char_literal431 = default(IToken);
		IToken LT432 = default(IToken);
		IToken LT434 = default(IToken);
		IToken RBRACK435 = default(IToken);
		XAstParserRuleReturnScope assignmentExpression429 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope assignmentExpression433 = default(XAstParserRuleReturnScope);

		object char_literal427_tree = default(object);
		object LT428_tree = default(object);
		object LT430_tree = default(object);
		object char_literal431_tree = default(object);
		object LT432_tree = default(object);
		object LT434_tree = default(object);
		object RBRACK435_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "arrayLiteral");
		DebugLocation(379, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 78)) { return retval; }

			// JavaScript.g:380:5: ( '[' ( LT !)* ( assignmentExpression )? ( ( LT !)* ',' ( ( LT !)* assignmentExpression )? )* ( LT !)* RBRACK )
			DebugEnterAlt(1);
			// JavaScript.g:380:7: '[' ( LT !)* ( assignmentExpression )? ( ( LT !)* ',' ( ( LT !)* assignmentExpression )? )* ( LT !)* RBRACK
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(380, 7);
			char_literal427=(IToken)Match(input,80,Follow._80_in_arrayLiteral3235); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal427_tree = (object)adaptor.Create(char_literal427, retval);
			adaptor.AddChild(root_0, char_literal427_tree);
			}
			DebugLocation(380, 13);
			// JavaScript.g:380:13: ( LT !)*
			try { DebugEnterSubRule(215);
			while (true)
			{
				int alt215=2;
				try { DebugEnterDecision(215, false);
				int LA215_0 = input.LA(1);

				if ((LA215_0==LT))
				{
					int LA215_2 = input.LA(2);

					if ((EvaluatePredicate(synpred279_JavaScript_fragment)))
					{
						alt215 = 1;
					}


				}


				} finally { DebugExitDecision(215); }
				switch ( alt215 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g:380:13: LT !
					{
					DebugLocation(380, 13);
					LT428=(IToken)new XToken((IToken)Match(input,LT,Follow._LT_in_arrayLiteral3237), "LT"); if (state.failed) return retval;

					}
					break;

				default:
					goto loop215;
				}
			}

			loop215:
				;

			} finally { DebugExitSubRule(215); }

			DebugLocation(380, 16);
			// JavaScript.g:380:16: ( assignmentExpression )?
			int alt216=2;
			try { DebugEnterSubRule(216);
			try { DebugEnterDecision(216, false);
			int LA216_0 = input.LA(1);

			if ((LA216_0==FALSE||LA216_0==Identifier||LA216_0==NULL||LA216_0==NumericLiteral||LA216_0==RegularExpressionLiteral||(LA216_0>=StringLiteral && LA216_0<=TRUE)||LA216_0==43||LA216_0==51||(LA216_0>=54 && LA216_0<=55)||(LA216_0>=58 && LA216_0<=59)||LA216_0==80||LA216_0==88||LA216_0==93||LA216_0==97||LA216_0==102||LA216_0==104||LA216_0==107||LA216_0==111))
			{
				alt216 = 1;
			}
			} finally { DebugExitDecision(216); }
			switch (alt216)
			{
			case 1:
				DebugEnterAlt(1);
				// JavaScript.g:380:16: assignmentExpression
				{
				DebugLocation(380, 16);
				PushFollow(Follow._assignmentExpression_in_arrayLiteral3241);
				assignmentExpression429=assignmentExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, assignmentExpression429.Tree, assignmentExpression429, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(216); }

			DebugLocation(380, 38);
			// JavaScript.g:380:38: ( ( LT !)* ',' ( ( LT !)* assignmentExpression )? )*
			try { DebugEnterSubRule(220);
			while (true)
			{
				int alt220=2;
				try { DebugEnterDecision(220, false);
				try
				{
					alt220 = dfa220.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(220); }
				switch ( alt220 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g:380:39: ( LT !)* ',' ( ( LT !)* assignmentExpression )?
					{
					DebugLocation(380, 41);
					// JavaScript.g:380:41: ( LT !)*
					try { DebugEnterSubRule(217);
					while (true)
					{
						int alt217=2;
						try { DebugEnterDecision(217, false);
						int LA217_0 = input.LA(1);

						if ((LA217_0==LT))
						{
							alt217 = 1;
						}


						} finally { DebugExitDecision(217); }
						switch ( alt217 )
						{
						case 1:
							DebugEnterAlt(1);
							// JavaScript.g:380:41: LT !
							{
							DebugLocation(380, 41);
							LT430=(IToken)new XToken((IToken)Match(input,LT,Follow._LT_in_arrayLiteral3245), "LT"); if (state.failed) return retval;

							}
							break;

						default:
							goto loop217;
						}
					}

					loop217:
						;

					} finally { DebugExitSubRule(217); }

					DebugLocation(380, 44);
					char_literal431=(IToken)Match(input,57,Follow._57_in_arrayLiteral3249); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal431_tree = (object)adaptor.Create(char_literal431, retval);
					adaptor.AddChild(root_0, char_literal431_tree);
					}
					DebugLocation(380, 48);
					// JavaScript.g:380:48: ( ( LT !)* assignmentExpression )?
					int alt219=2;
					try { DebugEnterSubRule(219);
					try { DebugEnterDecision(219, false);
					try
					{
						alt219 = dfa219.Predict(input);
					}
					catch (NoViableAltException nvae)
					{
						DebugRecognitionException(nvae);
						throw;
					}
					} finally { DebugExitDecision(219); }
					switch (alt219)
					{
					case 1:
						DebugEnterAlt(1);
						// JavaScript.g:380:49: ( LT !)* assignmentExpression
						{
						DebugLocation(380, 51);
						// JavaScript.g:380:51: ( LT !)*
						try { DebugEnterSubRule(218);
						while (true)
						{
							int alt218=2;
							try { DebugEnterDecision(218, false);
							int LA218_0 = input.LA(1);

							if ((LA218_0==LT))
							{
								alt218 = 1;
							}


							} finally { DebugExitDecision(218); }
							switch ( alt218 )
							{
							case 1:
								DebugEnterAlt(1);
								// JavaScript.g:380:51: LT !
								{
								DebugLocation(380, 51);
								LT432=(IToken)new XToken((IToken)Match(input,LT,Follow._LT_in_arrayLiteral3252), "LT"); if (state.failed) return retval;

								}
								break;

							default:
								goto loop218;
							}
						}

						loop218:
							;

						} finally { DebugExitSubRule(218); }

						DebugLocation(380, 54);
						PushFollow(Follow._assignmentExpression_in_arrayLiteral3256);
						assignmentExpression433=assignmentExpression();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, assignmentExpression433.Tree, assignmentExpression433, retval);

						}
						break;

					}
					} finally { DebugExitSubRule(219); }


					}
					break;

				default:
					goto loop220;
				}
			}

			loop220:
				;

			} finally { DebugExitSubRule(220); }

			DebugLocation(380, 81);
			// JavaScript.g:380:81: ( LT !)*
			try { DebugEnterSubRule(221);
			while (true)
			{
				int alt221=2;
				try { DebugEnterDecision(221, false);
				int LA221_0 = input.LA(1);

				if ((LA221_0==LT))
				{
					alt221 = 1;
				}


				} finally { DebugExitDecision(221); }
				switch ( alt221 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g:380:81: LT !
					{
					DebugLocation(380, 81);
					LT434=(IToken)new XToken((IToken)Match(input,LT,Follow._LT_in_arrayLiteral3262), "LT"); if (state.failed) return retval;

					}
					break;

				default:
					goto loop221;
				}
			}

			loop221:
				;

			} finally { DebugExitSubRule(221); }

			DebugLocation(380, 84);
			RBRACK435=(IToken)new XToken((IToken)Match(input,RBRACK,Follow._RBRACK_in_arrayLiteral3266), "RBRACK"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			RBRACK435_tree = (object)adaptor.Create(RBRACK435, retval);
			adaptor.AddChild(root_0, RBRACK435_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("arrayLiteral", 78);
			LeaveRule("arrayLiteral", 78);
			LeaveRule_arrayLiteral();
			if (state.backtracking > 0) { Memoize(input, 78, arrayLiteral_StartIndex); }

		}
		DebugLocation(381, 4);
		} finally { DebugExitRule(GrammarFileName, "arrayLiteral"); }
		return retval;

	}
	// $ANTLR end "arrayLiteral"

	partial void EnterRule_objectLiteral();
	partial void LeaveRule_objectLiteral();

	// $ANTLR start "objectLiteral"
	// JavaScript.g:384:1: objectLiteral : '{' ( LT !)* ( propertyNameAndValue )? ( ( LT !)* ',' ( ( LT !)* propertyNameAndValue )? )* ( LT !)* RBRACE ;
	[GrammarRule("objectLiteral")]
	public XAstParserRuleReturnScope objectLiteral()
	{
		EnterRule_objectLiteral();
		EnterRule("objectLiteral", 79);
		var retval = new XAstParserRuleReturnScope("objectLiteral");
		retval.Start = (IToken)input.LT(1);
		int objectLiteral_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal436 = default(IToken);
		IToken LT437 = default(IToken);
		IToken LT439 = default(IToken);
		IToken char_literal440 = default(IToken);
		IToken LT441 = default(IToken);
		IToken LT443 = default(IToken);
		IToken RBRACE444 = default(IToken);
		XAstParserRuleReturnScope propertyNameAndValue438 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope propertyNameAndValue442 = default(XAstParserRuleReturnScope);

		object char_literal436_tree = default(object);
		object LT437_tree = default(object);
		object LT439_tree = default(object);
		object char_literal440_tree = default(object);
		object LT441_tree = default(object);
		object LT443_tree = default(object);
		object RBRACE444_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "objectLiteral");
		DebugLocation(384, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 79)) { return retval; }

			// JavaScript.g:385:5: ( '{' ( LT !)* ( propertyNameAndValue )? ( ( LT !)* ',' ( ( LT !)* propertyNameAndValue )? )* ( LT !)* RBRACE )
			DebugEnterAlt(1);
			// JavaScript.g:385:7: '{' ( LT !)* ( propertyNameAndValue )? ( ( LT !)* ',' ( ( LT !)* propertyNameAndValue )? )* ( LT !)* RBRACE
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(385, 7);
			char_literal436=(IToken)Match(input,107,Follow._107_in_objectLiteral3291); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal436_tree = (object)adaptor.Create(char_literal436, retval);
			adaptor.AddChild(root_0, char_literal436_tree);
			}
			DebugLocation(385, 13);
			// JavaScript.g:385:13: ( LT !)*
			try { DebugEnterSubRule(222);
			while (true)
			{
				int alt222=2;
				try { DebugEnterDecision(222, false);
				int LA222_0 = input.LA(1);

				if ((LA222_0==LT))
				{
					int LA222_2 = input.LA(2);

					if ((EvaluatePredicate(synpred286_JavaScript_fragment)))
					{
						alt222 = 1;
					}


				}


				} finally { DebugExitDecision(222); }
				switch ( alt222 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g:385:13: LT !
					{
					DebugLocation(385, 13);
					LT437=(IToken)new XToken((IToken)Match(input,LT,Follow._LT_in_objectLiteral3293), "LT"); if (state.failed) return retval;

					}
					break;

				default:
					goto loop222;
				}
			}

			loop222:
				;

			} finally { DebugExitSubRule(222); }

			DebugLocation(385, 16);
			// JavaScript.g:385:16: ( propertyNameAndValue )?
			int alt223=2;
			try { DebugEnterSubRule(223);
			try { DebugEnterDecision(223, false);
			int LA223_0 = input.LA(1);

			if ((LA223_0==Identifier||LA223_0==NumericLiteral||LA223_0==StringLiteral))
			{
				alt223 = 1;
			}
			} finally { DebugExitDecision(223); }
			switch (alt223)
			{
			case 1:
				DebugEnterAlt(1);
				// JavaScript.g:385:16: propertyNameAndValue
				{
				DebugLocation(385, 16);
				PushFollow(Follow._propertyNameAndValue_in_objectLiteral3297);
				propertyNameAndValue438=propertyNameAndValue();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, propertyNameAndValue438.Tree, propertyNameAndValue438, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(223); }

			DebugLocation(385, 38);
			// JavaScript.g:385:38: ( ( LT !)* ',' ( ( LT !)* propertyNameAndValue )? )*
			try { DebugEnterSubRule(227);
			while (true)
			{
				int alt227=2;
				try { DebugEnterDecision(227, false);
				try
				{
					alt227 = dfa227.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(227); }
				switch ( alt227 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g:385:39: ( LT !)* ',' ( ( LT !)* propertyNameAndValue )?
					{
					DebugLocation(385, 41);
					// JavaScript.g:385:41: ( LT !)*
					try { DebugEnterSubRule(224);
					while (true)
					{
						int alt224=2;
						try { DebugEnterDecision(224, false);
						int LA224_0 = input.LA(1);

						if ((LA224_0==LT))
						{
							alt224 = 1;
						}


						} finally { DebugExitDecision(224); }
						switch ( alt224 )
						{
						case 1:
							DebugEnterAlt(1);
							// JavaScript.g:385:41: LT !
							{
							DebugLocation(385, 41);
							LT439=(IToken)new XToken((IToken)Match(input,LT,Follow._LT_in_objectLiteral3301), "LT"); if (state.failed) return retval;

							}
							break;

						default:
							goto loop224;
						}
					}

					loop224:
						;

					} finally { DebugExitSubRule(224); }

					DebugLocation(385, 44);
					char_literal440=(IToken)Match(input,57,Follow._57_in_objectLiteral3305); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal440_tree = (object)adaptor.Create(char_literal440, retval);
					adaptor.AddChild(root_0, char_literal440_tree);
					}
					DebugLocation(385, 48);
					// JavaScript.g:385:48: ( ( LT !)* propertyNameAndValue )?
					int alt226=2;
					try { DebugEnterSubRule(226);
					try { DebugEnterDecision(226, false);
					try
					{
						alt226 = dfa226.Predict(input);
					}
					catch (NoViableAltException nvae)
					{
						DebugRecognitionException(nvae);
						throw;
					}
					} finally { DebugExitDecision(226); }
					switch (alt226)
					{
					case 1:
						DebugEnterAlt(1);
						// JavaScript.g:385:49: ( LT !)* propertyNameAndValue
						{
						DebugLocation(385, 51);
						// JavaScript.g:385:51: ( LT !)*
						try { DebugEnterSubRule(225);
						while (true)
						{
							int alt225=2;
							try { DebugEnterDecision(225, false);
							int LA225_0 = input.LA(1);

							if ((LA225_0==LT))
							{
								alt225 = 1;
							}


							} finally { DebugExitDecision(225); }
							switch ( alt225 )
							{
							case 1:
								DebugEnterAlt(1);
								// JavaScript.g:385:51: LT !
								{
								DebugLocation(385, 51);
								LT441=(IToken)new XToken((IToken)Match(input,LT,Follow._LT_in_objectLiteral3308), "LT"); if (state.failed) return retval;

								}
								break;

							default:
								goto loop225;
							}
						}

						loop225:
							;

						} finally { DebugExitSubRule(225); }

						DebugLocation(385, 54);
						PushFollow(Follow._propertyNameAndValue_in_objectLiteral3312);
						propertyNameAndValue442=propertyNameAndValue();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, propertyNameAndValue442.Tree, propertyNameAndValue442, retval);

						}
						break;

					}
					} finally { DebugExitSubRule(226); }


					}
					break;

				default:
					goto loop227;
				}
			}

			loop227:
				;

			} finally { DebugExitSubRule(227); }

			DebugLocation(385, 81);
			// JavaScript.g:385:81: ( LT !)*
			try { DebugEnterSubRule(228);
			while (true)
			{
				int alt228=2;
				try { DebugEnterDecision(228, false);
				int LA228_0 = input.LA(1);

				if ((LA228_0==LT))
				{
					alt228 = 1;
				}


				} finally { DebugExitDecision(228); }
				switch ( alt228 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g:385:81: LT !
					{
					DebugLocation(385, 81);
					LT443=(IToken)new XToken((IToken)Match(input,LT,Follow._LT_in_objectLiteral3318), "LT"); if (state.failed) return retval;

					}
					break;

				default:
					goto loop228;
				}
			}

			loop228:
				;

			} finally { DebugExitSubRule(228); }

			DebugLocation(385, 84);
			RBRACE444=(IToken)new XToken((IToken)Match(input,RBRACE,Follow._RBRACE_in_objectLiteral3322), "RBRACE"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			RBRACE444_tree = (object)adaptor.Create(RBRACE444, retval);
			adaptor.AddChild(root_0, RBRACE444_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("objectLiteral", 79);
			LeaveRule("objectLiteral", 79);
			LeaveRule_objectLiteral();
			if (state.backtracking > 0) { Memoize(input, 79, objectLiteral_StartIndex); }

		}
		DebugLocation(386, 4);
		} finally { DebugExitRule(GrammarFileName, "objectLiteral"); }
		return retval;

	}
	// $ANTLR end "objectLiteral"

	partial void EnterRule_propertyNameAndValue();
	partial void LeaveRule_propertyNameAndValue();

	// $ANTLR start "propertyNameAndValue"
	// JavaScript.g:388:1: propertyNameAndValue : propertyName ( LT !)* ':' ( LT !)* assignmentExpression ;
	[GrammarRule("propertyNameAndValue")]
	public XAstParserRuleReturnScope propertyNameAndValue()
	{
		EnterRule_propertyNameAndValue();
		EnterRule("propertyNameAndValue", 80);
		var retval = new XAstParserRuleReturnScope("propertyNameAndValue");
		retval.Start = (IToken)input.LT(1);
		int propertyNameAndValue_StartIndex = input.Index;

		object root_0 = default(object);

		IToken LT446 = default(IToken);
		IToken char_literal447 = default(IToken);
		IToken LT448 = default(IToken);
		XAstParserRuleReturnScope propertyName445 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope assignmentExpression449 = default(XAstParserRuleReturnScope);

		object LT446_tree = default(object);
		object char_literal447_tree = default(object);
		object LT448_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "propertyNameAndValue");
		DebugLocation(388, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 80)) { return retval; }

			// JavaScript.g:389:5: ( propertyName ( LT !)* ':' ( LT !)* assignmentExpression )
			DebugEnterAlt(1);
			// JavaScript.g:389:7: propertyName ( LT !)* ':' ( LT !)* assignmentExpression
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(389, 7);
			PushFollow(Follow._propertyName_in_propertyNameAndValue3343);
			propertyName445=propertyName();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, propertyName445.Tree, propertyName445, retval);
			DebugLocation(389, 22);
			// JavaScript.g:389:22: ( LT !)*
			try { DebugEnterSubRule(229);
			while (true)
			{
				int alt229=2;
				try { DebugEnterDecision(229, false);
				int LA229_0 = input.LA(1);

				if ((LA229_0==LT))
				{
					alt229 = 1;
				}


				} finally { DebugExitDecision(229); }
				switch ( alt229 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g:389:22: LT !
					{
					DebugLocation(389, 22);
					LT446=(IToken)new XToken((IToken)Match(input,LT,Follow._LT_in_propertyNameAndValue3345), "LT"); if (state.failed) return retval;

					}
					break;

				default:
					goto loop229;
				}
			}

			loop229:
				;

			} finally { DebugExitSubRule(229); }

			DebugLocation(389, 25);
			char_literal447=(IToken)Match(input,64,Follow._64_in_propertyNameAndValue3349); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal447_tree = (object)adaptor.Create(char_literal447, retval);
			adaptor.AddChild(root_0, char_literal447_tree);
			}
			DebugLocation(389, 31);
			// JavaScript.g:389:31: ( LT !)*
			try { DebugEnterSubRule(230);
			while (true)
			{
				int alt230=2;
				try { DebugEnterDecision(230, false);
				int LA230_0 = input.LA(1);

				if ((LA230_0==LT))
				{
					alt230 = 1;
				}


				} finally { DebugExitDecision(230); }
				switch ( alt230 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g:389:31: LT !
					{
					DebugLocation(389, 31);
					LT448=(IToken)new XToken((IToken)Match(input,LT,Follow._LT_in_propertyNameAndValue3351), "LT"); if (state.failed) return retval;

					}
					break;

				default:
					goto loop230;
				}
			}

			loop230:
				;

			} finally { DebugExitSubRule(230); }

			DebugLocation(389, 34);
			PushFollow(Follow._assignmentExpression_in_propertyNameAndValue3355);
			assignmentExpression449=assignmentExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, assignmentExpression449.Tree, assignmentExpression449, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("propertyNameAndValue", 80);
			LeaveRule("propertyNameAndValue", 80);
			LeaveRule_propertyNameAndValue();
			if (state.backtracking > 0) { Memoize(input, 80, propertyNameAndValue_StartIndex); }

		}
		DebugLocation(390, 4);
		} finally { DebugExitRule(GrammarFileName, "propertyNameAndValue"); }
		return retval;

	}
	// $ANTLR end "propertyNameAndValue"

	partial void EnterRule_propertyName();
	partial void LeaveRule_propertyName();

	// $ANTLR start "propertyName"
	// JavaScript.g:392:1: propertyName : ( Identifier | stringliteral | numericliteral );
	[GrammarRule("propertyName")]
	public XAstParserRuleReturnScope propertyName()
	{
		EnterRule_propertyName();
		EnterRule("propertyName", 81);
		var retval = new XAstParserRuleReturnScope("propertyName");
		retval.Start = (IToken)input.LT(1);
		int propertyName_StartIndex = input.Index;

		object root_0 = default(object);

		IToken Identifier450 = default(IToken);
		XAstParserRuleReturnScope stringliteral451 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope numericliteral452 = default(XAstParserRuleReturnScope);

		object Identifier450_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "propertyName");
		DebugLocation(392, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 81)) { return retval; }

			// JavaScript.g:393:5: ( Identifier | stringliteral | numericliteral )
			int alt231=3;
			try { DebugEnterDecision(231, false);
			switch (input.LA(1))
			{
			case Identifier:
				{
				alt231 = 1;
				}
				break;
			case StringLiteral:
				{
				alt231 = 2;
				}
				break;
			case NumericLiteral:
				{
				alt231 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 231, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(231); }
			switch (alt231)
			{
			case 1:
				DebugEnterAlt(1);
				// JavaScript.g:393:7: Identifier
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(393, 7);
				Identifier450=(IToken)new XToken((IToken)Match(input,Identifier,Follow._Identifier_in_propertyName3372), "Identifier"); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Identifier450_tree = (object)adaptor.Create(Identifier450, retval);
				adaptor.AddChild(root_0, Identifier450_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// JavaScript.g:394:7: stringliteral
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(394, 7);
				PushFollow(Follow._stringliteral_in_propertyName3380);
				stringliteral451=stringliteral();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stringliteral451.Tree, stringliteral451, retval);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// JavaScript.g:395:7: numericliteral
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(395, 7);
				PushFollow(Follow._numericliteral_in_propertyName3388);
				numericliteral452=numericliteral();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, numericliteral452.Tree, numericliteral452, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("propertyName", 81);
			LeaveRule("propertyName", 81);
			LeaveRule_propertyName();
			if (state.backtracking > 0) { Memoize(input, 81, propertyName_StartIndex); }

		}
		DebugLocation(396, 4);
		} finally { DebugExitRule(GrammarFileName, "propertyName"); }
		return retval;

	}
	// $ANTLR end "propertyName"

	partial void EnterRule_literal();
	partial void LeaveRule_literal();

	// $ANTLR start "literal"
	// JavaScript.g:399:1: literal : ( NULL | TRUE | FALSE | stringliteral | numericliteral | regularExpressionLiteral );
	[GrammarRule("literal")]
	public XAstParserRuleReturnScope literal()
	{
		EnterRule_literal();
		EnterRule("literal", 82);
		var retval = new XAstParserRuleReturnScope("literal");
		retval.Start = (IToken)input.LT(1);
		int literal_StartIndex = input.Index;

		object root_0 = default(object);

		IToken NULL453 = default(IToken);
		IToken TRUE454 = default(IToken);
		IToken FALSE455 = default(IToken);
		XAstParserRuleReturnScope stringliteral456 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope numericliteral457 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope regularExpressionLiteral458 = default(XAstParserRuleReturnScope);

		object NULL453_tree = default(object);
		object TRUE454_tree = default(object);
		object FALSE455_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "literal");
		DebugLocation(399, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 82)) { return retval; }

			// JavaScript.g:400:5: ( NULL | TRUE | FALSE | stringliteral | numericliteral | regularExpressionLiteral )
			int alt232=6;
			try { DebugEnterDecision(232, false);
			switch (input.LA(1))
			{
			case NULL:
				{
				alt232 = 1;
				}
				break;
			case TRUE:
				{
				alt232 = 2;
				}
				break;
			case FALSE:
				{
				alt232 = 3;
				}
				break;
			case StringLiteral:
				{
				alt232 = 4;
				}
				break;
			case NumericLiteral:
				{
				alt232 = 5;
				}
				break;
			case RegularExpressionLiteral:
				{
				alt232 = 6;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 232, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(232); }
			switch (alt232)
			{
			case 1:
				DebugEnterAlt(1);
				// JavaScript.g:400:7: NULL
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(400, 7);
				NULL453=(IToken)new XToken((IToken)Match(input,NULL,Follow._NULL_in_literal3406), "NULL"); if (state.failed) return retval;
				if (state.backtracking == 0) {
				NULL453_tree = (object)adaptor.Create(NULL453, retval);
				adaptor.AddChild(root_0, NULL453_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// JavaScript.g:401:7: TRUE
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(401, 7);
				TRUE454=(IToken)new XToken((IToken)Match(input,TRUE,Follow._TRUE_in_literal3414), "TRUE"); if (state.failed) return retval;
				if (state.backtracking == 0) {
				TRUE454_tree = (object)adaptor.Create(TRUE454, retval);
				adaptor.AddChild(root_0, TRUE454_tree);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// JavaScript.g:402:7: FALSE
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(402, 7);
				FALSE455=(IToken)new XToken((IToken)Match(input,FALSE,Follow._FALSE_in_literal3422), "FALSE"); if (state.failed) return retval;
				if (state.backtracking == 0) {
				FALSE455_tree = (object)adaptor.Create(FALSE455, retval);
				adaptor.AddChild(root_0, FALSE455_tree);
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// JavaScript.g:403:7: stringliteral
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(403, 7);
				PushFollow(Follow._stringliteral_in_literal3430);
				stringliteral456=stringliteral();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stringliteral456.Tree, stringliteral456, retval);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// JavaScript.g:404:7: numericliteral
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(404, 7);
				PushFollow(Follow._numericliteral_in_literal3438);
				numericliteral457=numericliteral();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, numericliteral457.Tree, numericliteral457, retval);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// JavaScript.g:405:7: regularExpressionLiteral
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(405, 7);
				PushFollow(Follow._regularExpressionLiteral_in_literal3446);
				regularExpressionLiteral458=regularExpressionLiteral();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, regularExpressionLiteral458.Tree, regularExpressionLiteral458, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("literal", 82);
			LeaveRule("literal", 82);
			LeaveRule_literal();
			if (state.backtracking > 0) { Memoize(input, 82, literal_StartIndex); }

		}
		DebugLocation(406, 4);
		} finally { DebugExitRule(GrammarFileName, "literal"); }
		return retval;

	}
	// $ANTLR end "literal"

	partial void EnterRule_numericliteral();
	partial void LeaveRule_numericliteral();

	// $ANTLR start "numericliteral"
	// JavaScript.g:408:1: numericliteral : NumericLiteral ;
	[GrammarRule("numericliteral")]
	public XAstParserRuleReturnScope numericliteral()
	{
		EnterRule_numericliteral();
		EnterRule("numericliteral", 83);
		var retval = new XAstParserRuleReturnScope("numericliteral");
		retval.Start = (IToken)input.LT(1);
		int numericliteral_StartIndex = input.Index;

		object root_0 = default(object);

		IToken NumericLiteral459 = default(IToken);

		object NumericLiteral459_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "numericliteral");
		DebugLocation(408, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 83)) { return retval; }

			// JavaScript.g:409:5: ( NumericLiteral )
			DebugEnterAlt(1);
			// JavaScript.g:409:7: NumericLiteral
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(409, 7);
			NumericLiteral459=(IToken)new XToken((IToken)Match(input,NumericLiteral,Follow._NumericLiteral_in_numericliteral3463), "NumericLiteral"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			NumericLiteral459_tree = (object)adaptor.Create(NumericLiteral459, retval);
			adaptor.AddChild(root_0, NumericLiteral459_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("numericliteral", 83);
			LeaveRule("numericliteral", 83);
			LeaveRule_numericliteral();
			if (state.backtracking > 0) { Memoize(input, 83, numericliteral_StartIndex); }

		}
		DebugLocation(410, 4);
		} finally { DebugExitRule(GrammarFileName, "numericliteral"); }
		return retval;

	}
	// $ANTLR end "numericliteral"

	partial void EnterRule_stringliteral();
	partial void LeaveRule_stringliteral();

	// $ANTLR start "stringliteral"
	// JavaScript.g:412:1: stringliteral : StringLiteral ;
	[GrammarRule("stringliteral")]
	public XAstParserRuleReturnScope stringliteral()
	{
		EnterRule_stringliteral();
		EnterRule("stringliteral", 84);
		var retval = new XAstParserRuleReturnScope("stringliteral");
		retval.Start = (IToken)input.LT(1);
		int stringliteral_StartIndex = input.Index;

		object root_0 = default(object);

		IToken StringLiteral460 = default(IToken);

		object StringLiteral460_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "stringliteral");
		DebugLocation(412, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 84)) { return retval; }

			// JavaScript.g:413:5: ( StringLiteral )
			DebugEnterAlt(1);
			// JavaScript.g:413:7: StringLiteral
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(413, 7);
			StringLiteral460=(IToken)new XToken((IToken)Match(input,StringLiteral,Follow._StringLiteral_in_stringliteral3484), "StringLiteral"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			StringLiteral460_tree = (object)adaptor.Create(StringLiteral460, retval);
			adaptor.AddChild(root_0, StringLiteral460_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stringliteral", 84);
			LeaveRule("stringliteral", 84);
			LeaveRule_stringliteral();
			if (state.backtracking > 0) { Memoize(input, 84, stringliteral_StartIndex); }

		}
		DebugLocation(414, 4);
		} finally { DebugExitRule(GrammarFileName, "stringliteral"); }
		return retval;

	}
	// $ANTLR end "stringliteral"

	partial void EnterRule_regularExpressionLiteral();
	partial void LeaveRule_regularExpressionLiteral();

	// $ANTLR start "regularExpressionLiteral"
	// JavaScript.g:416:1: regularExpressionLiteral : RegularExpressionLiteral ;
	[GrammarRule("regularExpressionLiteral")]
	public XAstParserRuleReturnScope regularExpressionLiteral()
	{
		EnterRule_regularExpressionLiteral();
		EnterRule("regularExpressionLiteral", 85);
		var retval = new XAstParserRuleReturnScope("regularExpressionLiteral");
		retval.Start = (IToken)input.LT(1);
		int regularExpressionLiteral_StartIndex = input.Index;

		object root_0 = default(object);

		IToken RegularExpressionLiteral461 = default(IToken);

		object RegularExpressionLiteral461_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "regularExpressionLiteral");
		DebugLocation(416, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 85)) { return retval; }

			// JavaScript.g:417:5: ( RegularExpressionLiteral )
			DebugEnterAlt(1);
			// JavaScript.g:417:7: RegularExpressionLiteral
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(417, 7);
			RegularExpressionLiteral461=(IToken)new XToken((IToken)Match(input,RegularExpressionLiteral,Follow._RegularExpressionLiteral_in_regularExpressionLiteral3501), "RegularExpressionLiteral"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			RegularExpressionLiteral461_tree = (object)adaptor.Create(RegularExpressionLiteral461, retval);
			adaptor.AddChild(root_0, RegularExpressionLiteral461_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("regularExpressionLiteral", 85);
			LeaveRule("regularExpressionLiteral", 85);
			LeaveRule_regularExpressionLiteral();
			if (state.backtracking > 0) { Memoize(input, 85, regularExpressionLiteral_StartIndex); }

		}
		DebugLocation(418, 4);
		} finally { DebugExitRule(GrammarFileName, "regularExpressionLiteral"); }
		return retval;

	}
	// $ANTLR end "regularExpressionLiteral"

	partial void EnterRule_synpred1_JavaScript_fragment();
	partial void LeaveRule_synpred1_JavaScript_fragment();

	// $ANTLR start synpred1_JavaScript
	public void synpred1_JavaScript_fragment()
	{
		EnterRule_synpred1_JavaScript_fragment();
		EnterRule("synpred1_JavaScript_fragment", 86);
		TraceIn("synpred1_JavaScript_fragment", 86);
		try
		{
			// JavaScript.g:31:7: ( ';' )
			DebugEnterAlt(1);
			// JavaScript.g:31:7: ';'
			{
			DebugLocation(31, 7);
			Match(input,65,Follow._65_in_synpred1_JavaScript158); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred1_JavaScript_fragment", 86);
			LeaveRule("synpred1_JavaScript_fragment", 86);
			LeaveRule_synpred1_JavaScript_fragment();
		}
	}
	// $ANTLR end synpred1_JavaScript

	partial void EnterRule_synpred2_JavaScript_fragment();
	partial void LeaveRule_synpred2_JavaScript_fragment();

	// $ANTLR start synpred2_JavaScript
	public void synpred2_JavaScript_fragment()
	{
		EnterRule_synpred2_JavaScript_fragment();
		EnterRule("synpred2_JavaScript_fragment", 87);
		TraceIn("synpred2_JavaScript_fragment", 87);
		try
		{
			// JavaScript.g:32:7: ( LT )
			DebugEnterAlt(1);
			// JavaScript.g:32:7: LT
			{
			DebugLocation(32, 7);
			new XToken((IToken)Match(input,LT,Follow._LT_in_synpred2_JavaScript166), "LT"); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred2_JavaScript_fragment", 87);
			LeaveRule("synpred2_JavaScript_fragment", 87);
			LeaveRule_synpred2_JavaScript_fragment();
		}
	}
	// $ANTLR end synpred2_JavaScript

	partial void EnterRule_synpred10_JavaScript_fragment();
	partial void LeaveRule_synpred10_JavaScript_fragment();

	// $ANTLR start synpred10_JavaScript
	public void synpred10_JavaScript_fragment()
	{
		EnterRule_synpred10_JavaScript_fragment();
		EnterRule("synpred10_JavaScript_fragment", 95);
		TraceIn("synpred10_JavaScript_fragment", 95);
		try
		{
			// JavaScript.g:48:7: ( functionDeclaration )
			DebugEnterAlt(1);
			// JavaScript.g:48:7: functionDeclaration
			{
			DebugLocation(48, 7);
			PushFollow(Follow._functionDeclaration_in_synpred10_JavaScript278);
			functionDeclaration();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred10_JavaScript_fragment", 95);
			LeaveRule("synpred10_JavaScript_fragment", 95);
			LeaveRule_synpred10_JavaScript_fragment();
		}
	}
	// $ANTLR end synpred10_JavaScript

	partial void EnterRule_synpred14_JavaScript_fragment();
	partial void LeaveRule_synpred14_JavaScript_fragment();

	// $ANTLR start synpred14_JavaScript
	public void synpred14_JavaScript_fragment()
	{
		EnterRule_synpred14_JavaScript_fragment();
		EnterRule("synpred14_JavaScript_fragment", 99);
		TraceIn("synpred14_JavaScript_fragment", 99);
		try
		{
			// JavaScript.g:58:20: ( LT )
			DebugEnterAlt(1);
			// JavaScript.g:58:20: LT
			{
			DebugLocation(58, 18);
			new XToken((IToken)Match(input,LT,Follow._LT_in_synpred14_JavaScript349), "LT"); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred14_JavaScript_fragment", 99);
			LeaveRule("synpred14_JavaScript_fragment", 99);
			LeaveRule_synpred14_JavaScript_fragment();
		}
	}
	// $ANTLR end synpred14_JavaScript

	partial void EnterRule_synpred24_JavaScript_fragment();
	partial void LeaveRule_synpred24_JavaScript_fragment();

	// $ANTLR start synpred24_JavaScript
	public void synpred24_JavaScript_fragment()
	{
		EnterRule_synpred24_JavaScript_fragment();
		EnterRule("synpred24_JavaScript_fragment", 109);
		TraceIn("synpred24_JavaScript_fragment", 109);
		try
		{
			// JavaScript.g:66:13: ( LT )
			DebugEnterAlt(1);
			// JavaScript.g:66:13: LT
			{
			DebugLocation(66, 11);
			new XToken((IToken)Match(input,LT,Follow._LT_in_synpred24_JavaScript436), "LT"); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred24_JavaScript_fragment", 109);
			LeaveRule("synpred24_JavaScript_fragment", 109);
			LeaveRule_synpred24_JavaScript_fragment();
		}
	}
	// $ANTLR end synpred24_JavaScript

	partial void EnterRule_synpred27_JavaScript_fragment();
	partial void LeaveRule_synpred27_JavaScript_fragment();

	// $ANTLR start synpred27_JavaScript
	public void synpred27_JavaScript_fragment()
	{
		EnterRule_synpred27_JavaScript_fragment();
		EnterRule("synpred27_JavaScript_fragment", 112);
		TraceIn("synpred27_JavaScript_fragment", 112);
		try
		{
			// JavaScript.g:71:7: ( statementBlock )
			DebugEnterAlt(1);
			// JavaScript.g:71:7: statementBlock
			{
			DebugLocation(71, 7);
			PushFollow(Follow._statementBlock_in_synpred27_JavaScript465);
			statementBlock();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred27_JavaScript_fragment", 112);
			LeaveRule("synpred27_JavaScript_fragment", 112);
			LeaveRule_synpred27_JavaScript_fragment();
		}
	}
	// $ANTLR end synpred27_JavaScript

	partial void EnterRule_synpred30_JavaScript_fragment();
	partial void LeaveRule_synpred30_JavaScript_fragment();

	// $ANTLR start synpred30_JavaScript
	public void synpred30_JavaScript_fragment()
	{
		EnterRule_synpred30_JavaScript_fragment();
		EnterRule("synpred30_JavaScript_fragment", 115);
		TraceIn("synpred30_JavaScript_fragment", 115);
		try
		{
			// JavaScript.g:74:7: ( expressionStatement )
			DebugEnterAlt(1);
			// JavaScript.g:74:7: expressionStatement
			{
			DebugLocation(74, 7);
			PushFollow(Follow._expressionStatement_in_synpred30_JavaScript489);
			expressionStatement();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred30_JavaScript_fragment", 115);
			LeaveRule("synpred30_JavaScript_fragment", 115);
			LeaveRule_synpred30_JavaScript_fragment();
		}
	}
	// $ANTLR end synpred30_JavaScript

	partial void EnterRule_synpred37_JavaScript_fragment();
	partial void LeaveRule_synpred37_JavaScript_fragment();

	// $ANTLR start synpred37_JavaScript
	public void synpred37_JavaScript_fragment()
	{
		EnterRule_synpred37_JavaScript_fragment();
		EnterRule("synpred37_JavaScript_fragment", 122);
		TraceIn("synpred37_JavaScript_fragment", 122);
		try
		{
			// JavaScript.g:81:7: ( labelledStatement )
			DebugEnterAlt(1);
			// JavaScript.g:81:7: labelledStatement
			{
			DebugLocation(81, 7);
			PushFollow(Follow._labelledStatement_in_synpred37_JavaScript545);
			labelledStatement();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred37_JavaScript_fragment", 122);
			LeaveRule("synpred37_JavaScript_fragment", 122);
			LeaveRule_synpred37_JavaScript_fragment();
		}
	}
	// $ANTLR end synpred37_JavaScript

	partial void EnterRule_synpred40_JavaScript_fragment();
	partial void LeaveRule_synpred40_JavaScript_fragment();

	// $ANTLR start synpred40_JavaScript
	public void synpred40_JavaScript_fragment()
	{
		EnterRule_synpred40_JavaScript_fragment();
		EnterRule("synpred40_JavaScript_fragment", 125);
		TraceIn("synpred40_JavaScript_fragment", 125);
		try
		{
			// JavaScript.g:88:13: ( LT )
			DebugEnterAlt(1);
			// JavaScript.g:88:13: LT
			{
			DebugLocation(88, 11);
			new XToken((IToken)Match(input,LT,Follow._LT_in_synpred40_JavaScript592), "LT"); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred40_JavaScript_fragment", 125);
			LeaveRule("synpred40_JavaScript_fragment", 125);
			LeaveRule_synpred40_JavaScript_fragment();
		}
	}
	// $ANTLR end synpred40_JavaScript

	partial void EnterRule_synpred64_JavaScript_fragment();
	partial void LeaveRule_synpred64_JavaScript_fragment();

	// $ANTLR start synpred64_JavaScript
	public void synpred64_JavaScript_fragment()
	{
		EnterRule_synpred64_JavaScript_fragment();
		EnterRule("synpred64_JavaScript_fragment", 149);
		TraceIn("synpred64_JavaScript_fragment", 149);
		try
		{
			// JavaScript.g:132:65: ( ( LT )* 'else' ( LT )* statement )
			DebugEnterAlt(1);
			// JavaScript.g:132:65: ( LT )* 'else' ( LT )* statement
			{
			DebugLocation(132, 67);
			// JavaScript.g:132:67: ( LT )*
			try { DebugEnterSubRule(247);
			while (true)
			{
				int alt247=2;
				try { DebugEnterDecision(247, false);
				int LA247_0 = input.LA(1);

				if ((LA247_0==LT))
				{
					alt247 = 1;
				}


				} finally { DebugExitDecision(247); }
				switch ( alt247 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g:132:67: LT
					{
					DebugLocation(132, 65);
					new XToken((IToken)Match(input,LT,Follow._LT_in_synpred64_JavaScript940), "LT"); if (state.failed) return;

					}
					break;

				default:
					goto loop247;
				}
			}

			loop247:
				;

			} finally { DebugExitSubRule(247); }

			DebugLocation(132, 70);
			Match(input,90,Follow._90_in_synpred64_JavaScript944); if (state.failed) return;
			DebugLocation(132, 79);
			// JavaScript.g:132:79: ( LT )*
			try { DebugEnterSubRule(248);
			while (true)
			{
				int alt248=2;
				try { DebugEnterDecision(248, false);
				int LA248_0 = input.LA(1);

				if ((LA248_0==LT))
				{
					alt248 = 1;
				}


				} finally { DebugExitDecision(248); }
				switch ( alt248 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g:132:79: LT
					{
					DebugLocation(132, 77);
					new XToken((IToken)Match(input,LT,Follow._LT_in_synpred64_JavaScript946), "LT"); if (state.failed) return;

					}
					break;

				default:
					goto loop248;
				}
			}

			loop248:
				;

			} finally { DebugExitSubRule(248); }

			DebugLocation(132, 82);
			PushFollow(Follow._statement_in_synpred64_JavaScript950);
			statement();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred64_JavaScript_fragment", 149);
			LeaveRule("synpred64_JavaScript_fragment", 149);
			LeaveRule_synpred64_JavaScript_fragment();
		}
	}
	// $ANTLR end synpred64_JavaScript

	partial void EnterRule_synpred67_JavaScript_fragment();
	partial void LeaveRule_synpred67_JavaScript_fragment();

	// $ANTLR start synpred67_JavaScript
	public void synpred67_JavaScript_fragment()
	{
		EnterRule_synpred67_JavaScript_fragment();
		EnterRule("synpred67_JavaScript_fragment", 152);
		TraceIn("synpred67_JavaScript_fragment", 152);
		try
		{
			// JavaScript.g:138:7: ( forStatement )
			DebugEnterAlt(1);
			// JavaScript.g:138:7: forStatement
			{
			DebugLocation(138, 7);
			PushFollow(Follow._forStatement_in_synpred67_JavaScript989);
			forStatement();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred67_JavaScript_fragment", 152);
			LeaveRule("synpred67_JavaScript_fragment", 152);
			LeaveRule_synpred67_JavaScript_fragment();
		}
	}
	// $ANTLR end synpred67_JavaScript

	partial void EnterRule_synpred96_JavaScript_fragment();
	partial void LeaveRule_synpred96_JavaScript_fragment();

	// $ANTLR start synpred96_JavaScript
	public void synpred96_JavaScript_fragment()
	{
		EnterRule_synpred96_JavaScript_fragment();
		EnterRule("synpred96_JavaScript_fragment", 181);
		TraceIn("synpred96_JavaScript_fragment", 181);
		try
		{
			// JavaScript.g:169:18: ( Identifier )
			DebugEnterAlt(1);
			// JavaScript.g:169:18: Identifier
			{
			DebugLocation(169, 18);
			new XToken((IToken)Match(input,Identifier,Follow._Identifier_in_synpred96_JavaScript1311), "Identifier"); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred96_JavaScript_fragment", 181);
			LeaveRule("synpred96_JavaScript_fragment", 181);
			LeaveRule_synpred96_JavaScript_fragment();
		}
	}
	// $ANTLR end synpred96_JavaScript

	partial void EnterRule_synpred97_JavaScript_fragment();
	partial void LeaveRule_synpred97_JavaScript_fragment();

	// $ANTLR start synpred97_JavaScript
	public void synpred97_JavaScript_fragment()
	{
		EnterRule_synpred97_JavaScript_fragment();
		EnterRule("synpred97_JavaScript_fragment", 182);
		TraceIn("synpred97_JavaScript_fragment", 182);
		try
		{
			// JavaScript.g:173:15: ( Identifier )
			DebugEnterAlt(1);
			// JavaScript.g:173:15: Identifier
			{
			DebugLocation(173, 15);
			new XToken((IToken)Match(input,Identifier,Follow._Identifier_in_synpred97_JavaScript1333), "Identifier"); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred97_JavaScript_fragment", 182);
			LeaveRule("synpred97_JavaScript_fragment", 182);
			LeaveRule_synpred97_JavaScript_fragment();
		}
	}
	// $ANTLR end synpred97_JavaScript

	partial void EnterRule_synpred98_JavaScript_fragment();
	partial void LeaveRule_synpred98_JavaScript_fragment();

	// $ANTLR start synpred98_JavaScript
	public void synpred98_JavaScript_fragment()
	{
		EnterRule_synpred98_JavaScript_fragment();
		EnterRule("synpred98_JavaScript_fragment", 183);
		TraceIn("synpred98_JavaScript_fragment", 183);
		try
		{
			// JavaScript.g:177:16: ( expression )
			DebugEnterAlt(1);
			// JavaScript.g:177:16: expression
			{
			DebugLocation(177, 16);
			PushFollow(Follow._expression_in_synpred98_JavaScript1355);
			expression();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred98_JavaScript_fragment", 183);
			LeaveRule("synpred98_JavaScript_fragment", 183);
			LeaveRule_synpred98_JavaScript_fragment();
		}
	}
	// $ANTLR end synpred98_JavaScript

	partial void EnterRule_synpred118_JavaScript_fragment();
	partial void LeaveRule_synpred118_JavaScript_fragment();

	// $ANTLR start synpred118_JavaScript
	public void synpred118_JavaScript_fragment()
	{
		EnterRule_synpred118_JavaScript_fragment();
		EnterRule("synpred118_JavaScript_fragment", 203);
		TraceIn("synpred118_JavaScript_fragment", 203);
		try
		{
			// JavaScript.g:197:41: ( LT )
			DebugEnterAlt(1);
			// JavaScript.g:197:41: LT
			{
			DebugLocation(197, 39);
			new XToken((IToken)Match(input,LT,Follow._LT_in_synpred118_JavaScript1562), "LT"); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred118_JavaScript_fragment", 203);
			LeaveRule("synpred118_JavaScript_fragment", 203);
			LeaveRule_synpred118_JavaScript_fragment();
		}
	}
	// $ANTLR end synpred118_JavaScript

	partial void EnterRule_synpred121_JavaScript_fragment();
	partial void LeaveRule_synpred121_JavaScript_fragment();

	// $ANTLR start synpred121_JavaScript
	public void synpred121_JavaScript_fragment()
	{
		EnterRule_synpred121_JavaScript_fragment();
		EnterRule("synpred121_JavaScript_fragment", 206);
		TraceIn("synpred121_JavaScript_fragment", 206);
		try
		{
			// JavaScript.g:201:28: ( LT )
			DebugEnterAlt(1);
			// JavaScript.g:201:28: LT
			{
			DebugLocation(201, 26);
			new XToken((IToken)Match(input,LT,Follow._LT_in_synpred121_JavaScript1596), "LT"); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred121_JavaScript_fragment", 206);
			LeaveRule("synpred121_JavaScript_fragment", 206);
			LeaveRule_synpred121_JavaScript_fragment();
		}
	}
	// $ANTLR end synpred121_JavaScript

	partial void EnterRule_synpred139_JavaScript_fragment();
	partial void LeaveRule_synpred139_JavaScript_fragment();

	// $ANTLR start synpred139_JavaScript
	public void synpred139_JavaScript_fragment()
	{
		EnterRule_synpred139_JavaScript_fragment();
		EnterRule("synpred139_JavaScript_fragment", 224);
		TraceIn("synpred139_JavaScript_fragment", 224);
		try
		{
			// JavaScript.g:230:7: ( conditionalExpression )
			DebugEnterAlt(1);
			// JavaScript.g:230:7: conditionalExpression
			{
			DebugLocation(230, 7);
			PushFollow(Follow._conditionalExpression_in_synpred139_JavaScript1835);
			conditionalExpression();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred139_JavaScript_fragment", 224);
			LeaveRule("synpred139_JavaScript_fragment", 224);
			LeaveRule_synpred139_JavaScript_fragment();
		}
	}
	// $ANTLR end synpred139_JavaScript

	partial void EnterRule_synpred142_JavaScript_fragment();
	partial void LeaveRule_synpred142_JavaScript_fragment();

	// $ANTLR start synpred142_JavaScript
	public void synpred142_JavaScript_fragment()
	{
		EnterRule_synpred142_JavaScript_fragment();
		EnterRule("synpred142_JavaScript_fragment", 227);
		TraceIn("synpred142_JavaScript_fragment", 227);
		try
		{
			// JavaScript.g:235:7: ( conditionalExpressionNoIn )
			DebugEnterAlt(1);
			// JavaScript.g:235:7: conditionalExpressionNoIn
			{
			DebugLocation(235, 7);
			PushFollow(Follow._conditionalExpressionNoIn_in_synpred142_JavaScript1876);
			conditionalExpressionNoIn();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred142_JavaScript_fragment", 227);
			LeaveRule("synpred142_JavaScript_fragment", 227);
			LeaveRule_synpred142_JavaScript_fragment();
		}
	}
	// $ANTLR end synpred142_JavaScript

	partial void EnterRule_synpred145_JavaScript_fragment();
	partial void LeaveRule_synpred145_JavaScript_fragment();

	// $ANTLR start synpred145_JavaScript
	public void synpred145_JavaScript_fragment()
	{
		EnterRule_synpred145_JavaScript_fragment();
		EnterRule("synpred145_JavaScript_fragment", 230);
		TraceIn("synpred145_JavaScript_fragment", 230);
		try
		{
			// JavaScript.g:240:7: ( callExpression )
			DebugEnterAlt(1);
			// JavaScript.g:240:7: callExpression
			{
			DebugLocation(240, 7);
			PushFollow(Follow._callExpression_in_synpred145_JavaScript1917);
			callExpression();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred145_JavaScript_fragment", 230);
			LeaveRule("synpred145_JavaScript_fragment", 230);
			LeaveRule_synpred145_JavaScript_fragment();
		}
	}
	// $ANTLR end synpred145_JavaScript

	partial void EnterRule_synpred146_JavaScript_fragment();
	partial void LeaveRule_synpred146_JavaScript_fragment();

	// $ANTLR start synpred146_JavaScript
	public void synpred146_JavaScript_fragment()
	{
		EnterRule_synpred146_JavaScript_fragment();
		EnterRule("synpred146_JavaScript_fragment", 231);
		TraceIn("synpred146_JavaScript_fragment", 231);
		try
		{
			// JavaScript.g:245:7: ( memberExpression )
			DebugEnterAlt(1);
			// JavaScript.g:245:7: memberExpression
			{
			DebugLocation(245, 7);
			PushFollow(Follow._memberExpression_in_synpred146_JavaScript1946);
			memberExpression();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred146_JavaScript_fragment", 231);
			LeaveRule("synpred146_JavaScript_fragment", 231);
			LeaveRule_synpred146_JavaScript_fragment();
		}
	}
	// $ANTLR end synpred146_JavaScript

	partial void EnterRule_synpred153_JavaScript_fragment();
	partial void LeaveRule_synpred153_JavaScript_fragment();

	// $ANTLR start synpred153_JavaScript
	public void synpred153_JavaScript_fragment()
	{
		EnterRule_synpred153_JavaScript_fragment();
		EnterRule("synpred153_JavaScript_fragment", 238);
		TraceIn("synpred153_JavaScript_fragment", 238);
		try
		{
			// JavaScript.g:250:94: ( ( LT )* memberExpressionSuffix )
			DebugEnterAlt(1);
			// JavaScript.g:250:94: ( LT )* memberExpressionSuffix
			{
			DebugLocation(250, 96);
			// JavaScript.g:250:96: ( LT )*
			try { DebugEnterSubRule(262);
			while (true)
			{
				int alt262=2;
				try { DebugEnterDecision(262, false);
				int LA262_0 = input.LA(1);

				if ((LA262_0==LT))
				{
					alt262 = 1;
				}


				} finally { DebugExitDecision(262); }
				switch ( alt262 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g:250:96: LT
					{
					DebugLocation(250, 94);
					new XToken((IToken)Match(input,LT,Follow._LT_in_synpred153_JavaScript2006), "LT"); if (state.failed) return;

					}
					break;

				default:
					goto loop262;
				}
			}

			loop262:
				;

			} finally { DebugExitSubRule(262); }

			DebugLocation(250, 99);
			PushFollow(Follow._memberExpressionSuffix_in_synpred153_JavaScript2010);
			memberExpressionSuffix();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred153_JavaScript_fragment", 238);
			LeaveRule("synpred153_JavaScript_fragment", 238);
			LeaveRule_synpred153_JavaScript_fragment();
		}
	}
	// $ANTLR end synpred153_JavaScript

	partial void EnterRule_synpred157_JavaScript_fragment();
	partial void LeaveRule_synpred157_JavaScript_fragment();

	// $ANTLR start synpred157_JavaScript
	public void synpred157_JavaScript_fragment()
	{
		EnterRule_synpred157_JavaScript_fragment();
		EnterRule("synpred157_JavaScript_fragment", 242);
		TraceIn("synpred157_JavaScript_fragment", 242);
		try
		{
			// JavaScript.g:259:40: ( ( LT )* callExpressionSuffix )
			DebugEnterAlt(1);
			// JavaScript.g:259:40: ( LT )* callExpressionSuffix
			{
			DebugLocation(259, 42);
			// JavaScript.g:259:42: ( LT )*
			try { DebugEnterSubRule(263);
			while (true)
			{
				int alt263=2;
				try { DebugEnterDecision(263, false);
				int LA263_0 = input.LA(1);

				if ((LA263_0==LT))
				{
					alt263 = 1;
				}


				} finally { DebugExitDecision(263); }
				switch ( alt263 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g:259:42: LT
					{
					DebugLocation(259, 40);
					new XToken((IToken)Match(input,LT,Follow._LT_in_synpred157_JavaScript2067), "LT"); if (state.failed) return;

					}
					break;

				default:
					goto loop263;
				}
			}

			loop263:
				;

			} finally { DebugExitSubRule(263); }

			DebugLocation(259, 45);
			PushFollow(Follow._callExpressionSuffix_in_synpred157_JavaScript2071);
			callExpressionSuffix();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred157_JavaScript_fragment", 242);
			LeaveRule("synpred157_JavaScript_fragment", 242);
			LeaveRule_synpred157_JavaScript_fragment();
		}
	}
	// $ANTLR end synpred157_JavaScript

	partial void EnterRule_synpred255_JavaScript_fragment();
	partial void LeaveRule_synpred255_JavaScript_fragment();

	// $ANTLR start synpred255_JavaScript
	public void synpred255_JavaScript_fragment()
	{
		EnterRule_synpred255_JavaScript_fragment();
		EnterRule("synpred255_JavaScript_fragment", 340);
		TraceIn("synpred255_JavaScript_fragment", 340);
		try
		{
			// JavaScript.g:353:33: ( ( LT )* ( '+' | '-' ) ( LT )* multiplicativeExpression )
			DebugEnterAlt(1);
			// JavaScript.g:353:33: ( LT )* ( '+' | '-' ) ( LT )* multiplicativeExpression
			{
			DebugLocation(353, 35);
			// JavaScript.g:353:35: ( LT )*
			try { DebugEnterSubRule(308);
			while (true)
			{
				int alt308=2;
				try { DebugEnterDecision(308, false);
				int LA308_0 = input.LA(1);

				if ((LA308_0==LT))
				{
					alt308 = 1;
				}


				} finally { DebugExitDecision(308); }
				switch ( alt308 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g:353:35: LT
					{
					DebugLocation(353, 33);
					new XToken((IToken)Match(input,LT,Follow._LT_in_synpred255_JavaScript2993), "LT"); if (state.failed) return;

					}
					break;

				default:
					goto loop308;
				}
			}

			loop308:
				;

			} finally { DebugExitSubRule(308); }

			DebugLocation(353, 38);
			if (input.LA(1)==54||input.LA(1)==58)
			{
				input.Consume();
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}

			DebugLocation(353, 52);
			// JavaScript.g:353:52: ( LT )*
			try { DebugEnterSubRule(309);
			while (true)
			{
				int alt309=2;
				try { DebugEnterDecision(309, false);
				int LA309_0 = input.LA(1);

				if ((LA309_0==LT))
				{
					alt309 = 1;
				}


				} finally { DebugExitDecision(309); }
				switch ( alt309 )
				{
				case 1:
					DebugEnterAlt(1);
					// JavaScript.g:353:52: LT
					{
					DebugLocation(353, 50);
					new XToken((IToken)Match(input,LT,Follow._LT_in_synpred255_JavaScript3005), "LT"); if (state.failed) return;

					}
					break;

				default:
					goto loop309;
				}
			}

			loop309:
				;

			} finally { DebugExitSubRule(309); }

			DebugLocation(353, 55);
			PushFollow(Follow._multiplicativeExpression_in_synpred255_JavaScript3009);
			multiplicativeExpression();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred255_JavaScript_fragment", 340);
			LeaveRule("synpred255_JavaScript_fragment", 340);
			LeaveRule_synpred255_JavaScript_fragment();
		}
	}
	// $ANTLR end synpred255_JavaScript

	partial void EnterRule_synpred279_JavaScript_fragment();
	partial void LeaveRule_synpred279_JavaScript_fragment();

	// $ANTLR start synpred279_JavaScript
	public void synpred279_JavaScript_fragment()
	{
		EnterRule_synpred279_JavaScript_fragment();
		EnterRule("synpred279_JavaScript_fragment", 364);
		TraceIn("synpred279_JavaScript_fragment", 364);
		try
		{
			// JavaScript.g:380:13: ( LT )
			DebugEnterAlt(1);
			// JavaScript.g:380:13: LT
			{
			DebugLocation(380, 11);
			new XToken((IToken)Match(input,LT,Follow._LT_in_synpred279_JavaScript3237), "LT"); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred279_JavaScript_fragment", 364);
			LeaveRule("synpred279_JavaScript_fragment", 364);
			LeaveRule_synpred279_JavaScript_fragment();
		}
	}
	// $ANTLR end synpred279_JavaScript

	partial void EnterRule_synpred286_JavaScript_fragment();
	partial void LeaveRule_synpred286_JavaScript_fragment();

	// $ANTLR start synpred286_JavaScript
	public void synpred286_JavaScript_fragment()
	{
		EnterRule_synpred286_JavaScript_fragment();
		EnterRule("synpred286_JavaScript_fragment", 371);
		TraceIn("synpred286_JavaScript_fragment", 371);
		try
		{
			// JavaScript.g:385:13: ( LT )
			DebugEnterAlt(1);
			// JavaScript.g:385:13: LT
			{
			DebugLocation(385, 11);
			new XToken((IToken)Match(input,LT,Follow._LT_in_synpred286_JavaScript3293), "LT"); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred286_JavaScript_fragment", 371);
			LeaveRule("synpred286_JavaScript_fragment", 371);
			LeaveRule_synpred286_JavaScript_fragment();
		}
	}
	// $ANTLR end synpred286_JavaScript
	#endregion Rules

	#region Synpreds
	private bool EvaluatePredicate(System.Action fragment)
	{
		bool success = false;
		state.backtracking++;
		try { DebugBeginBacktrack(state.backtracking);
		int start = input.Mark();
		try
		{
			fragment();
		}
		catch ( RecognitionException re )
		{
			System.Console.Error.WriteLine("impossible: "+re);
		}
		success = !state.failed;
		input.Rewind(start);
		} finally { DebugEndBacktrack(state.backtracking, success); }
		state.backtracking--;
		state.failed=false;
		return success;
	}
	#endregion Synpreds


	#region DFA
	private DFA5 dfa5;
	private DFA18 dfa18;
	private DFA17 dfa17;
	private DFA28 dfa28;
	private DFA32 dfa32;
	private DFA35 dfa35;
	private DFA37 dfa37;
	private DFA39 dfa39;
	private DFA59 dfa59;
	private DFA62 dfa62;
	private DFA65 dfa65;
	private DFA92 dfa92;
	private DFA96 dfa96;
	private DFA95 dfa95;
	private DFA108 dfa108;
	private DFA117 dfa117;
	private DFA120 dfa120;
	private DFA144 dfa144;
	private DFA143 dfa143;
	private DFA153 dfa153;
	private DFA158 dfa158;
	private DFA161 dfa161;
	private DFA164 dfa164;
	private DFA167 dfa167;
	private DFA170 dfa170;
	private DFA173 dfa173;
	private DFA176 dfa176;
	private DFA179 dfa179;
	private DFA182 dfa182;
	private DFA185 dfa185;
	private DFA188 dfa188;
	private DFA191 dfa191;
	private DFA194 dfa194;
	private DFA197 dfa197;
	private DFA200 dfa200;
	private DFA203 dfa203;
	private DFA209 dfa209;
	private DFA220 dfa220;
	private DFA219 dfa219;
	private DFA227 dfa227;
	private DFA226 dfa226;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa5 = new DFA5( this );
		dfa18 = new DFA18( this );
		dfa17 = new DFA17( this );
		dfa28 = new DFA28( this );
		dfa32 = new DFA32( this );
		dfa35 = new DFA35( this );
		dfa37 = new DFA37( this );
		dfa39 = new DFA39( this );
		dfa59 = new DFA59( this );
		dfa62 = new DFA62( this );
		dfa65 = new DFA65( this );
		dfa92 = new DFA92( this );
		dfa96 = new DFA96( this );
		dfa95 = new DFA95( this );
		dfa108 = new DFA108( this );
		dfa117 = new DFA117( this );
		dfa120 = new DFA120( this );
		dfa144 = new DFA144( this );
		dfa143 = new DFA143( this );
		dfa153 = new DFA153( this );
		dfa158 = new DFA158( this );
		dfa161 = new DFA161( this );
		dfa164 = new DFA164( this );
		dfa167 = new DFA167( this );
		dfa170 = new DFA170( this );
		dfa173 = new DFA173( this );
		dfa176 = new DFA176( this );
		dfa179 = new DFA179( this );
		dfa182 = new DFA182( this );
		dfa185 = new DFA185( this );
		dfa188 = new DFA188( this );
		dfa191 = new DFA191( this );
		dfa194 = new DFA194( this );
		dfa197 = new DFA197( this );
		dfa200 = new DFA200( this );
		dfa203 = new DFA203( this );
		dfa209 = new DFA209( this );
		dfa220 = new DFA220( this );
		dfa219 = new DFA219( this );
		dfa227 = new DFA227( this );
		dfa226 = new DFA226( this );
	}

	private class DFA5 : DFA
	{
		private const string DFA5_eotS =
			"\x4\xFFFF";
		private const string DFA5_eofS =
			"\x2\x2\x2\xFFFF";
		private const string DFA5_minS =
			"\x2\xD\x2\xFFFF";
		private const string DFA5_maxS =
			"\x2\x6F\x2\xFFFF";
		private const string DFA5_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA5_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA5_transitionS =
			{
				"\x1\x3\x3\xFFFF\x1\x3\x2\xFFFF\x1\x1\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1"+
				"\x2\x5\xFFFF\x1\x3\x2\xFFFF\x3\x3\x6\xFFFF\x1\x3\x7\xFFFF\x1\x3\x2\xFFFF"+
				"\x2\x3\x2\xFFFF\x2\x3\x5\xFFFF\x1\x3\xE\xFFFF\x1\x3\x2\xFFFF\x1\x3\x2"+
				"\xFFFF\x1\x3\x1\xFFFF\x2\x3\x2\xFFFF\x3\x3\x2\xFFFF\xB\x3\x3\xFFFF\x1"+
				"\x3",
				"\x1\x3\x3\xFFFF\x1\x3\x2\xFFFF\x1\x1\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3"+
				"\x1\x2\x5\xFFFF\x1\x3\x2\xFFFF\x3\x3\x6\xFFFF\x1\x3\x7\xFFFF\x1\x3\x2"+
				"\xFFFF\x2\x3\x2\xFFFF\x2\x3\x5\xFFFF\x1\x3\xE\xFFFF\x1\x3\x2\xFFFF\x1"+
				"\x3\x2\xFFFF\x1\x3\x1\xFFFF\x2\x3\x2\xFFFF\x3\x3\x2\xFFFF\xB\x3\x3\xFFFF"+
				"\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA5_eot = DFA.UnpackEncodedString(DFA5_eotS);
		private static readonly short[] DFA5_eof = DFA.UnpackEncodedString(DFA5_eofS);
		private static readonly char[] DFA5_min = DFA.UnpackEncodedStringToUnsignedChars(DFA5_minS);
		private static readonly char[] DFA5_max = DFA.UnpackEncodedStringToUnsignedChars(DFA5_maxS);
		private static readonly short[] DFA5_accept = DFA.UnpackEncodedString(DFA5_acceptS);
		private static readonly short[] DFA5_special = DFA.UnpackEncodedString(DFA5_specialS);
		private static readonly short[][] DFA5_transition;

		static DFA5()
		{
			int numStates = DFA5_transitionS.Length;
			DFA5_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA5_transition[i] = DFA.UnpackEncodedString(DFA5_transitionS[i]);
			}
		}

		public DFA5( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 5;
			this.eot = DFA5_eot;
			this.eof = DFA5_eof;
			this.min = DFA5_min;
			this.max = DFA5_max;
			this.accept = DFA5_accept;
			this.special = DFA5_special;
			this.transition = DFA5_transition;
		}

		public override string Description { get { return "()* loopback of 44:21: ( ( LT !)* sourceElement )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA18 : DFA
	{
		private const string DFA18_eotS =
			"\x4\xFFFF";
		private const string DFA18_eofS =
			"\x4\xFFFF";
		private const string DFA18_minS =
			"\x2\x11\x2\xFFFF";
		private const string DFA18_maxS =
			"\x2\x1B\x2\xFFFF";
		private const string DFA18_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA18_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA18_transitionS =
			{
				"\x1\x2\x2\xFFFF\x1\x1\x6\xFFFF\x1\x3",
				"\x1\x2\x2\xFFFF\x1\x1\x6\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA18_eot = DFA.UnpackEncodedString(DFA18_eotS);
		private static readonly short[] DFA18_eof = DFA.UnpackEncodedString(DFA18_eofS);
		private static readonly char[] DFA18_min = DFA.UnpackEncodedStringToUnsignedChars(DFA18_minS);
		private static readonly char[] DFA18_max = DFA.UnpackEncodedStringToUnsignedChars(DFA18_maxS);
		private static readonly short[] DFA18_accept = DFA.UnpackEncodedString(DFA18_acceptS);
		private static readonly short[] DFA18_special = DFA.UnpackEncodedString(DFA18_specialS);
		private static readonly short[][] DFA18_transition;

		static DFA18()
		{
			int numStates = DFA18_transitionS.Length;
			DFA18_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA18_transition[i] = DFA.UnpackEncodedString(DFA18_transitionS[i]);
			}
		}

		public DFA18( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 18;
			this.eot = DFA18_eot;
			this.eof = DFA18_eof;
			this.min = DFA18_min;
			this.max = DFA18_max;
			this.accept = DFA18_accept;
			this.special = DFA18_special;
			this.transition = DFA18_transition;
		}

		public override string Description { get { return "62:11: ( ( LT !)* Identifier ( ( LT !)* ',' ( LT !)* Identifier )* )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA17 : DFA
	{
		private const string DFA17_eotS =
			"\x4\xFFFF";
		private const string DFA17_eofS =
			"\x4\xFFFF";
		private const string DFA17_minS =
			"\x2\x14\x2\xFFFF";
		private const string DFA17_maxS =
			"\x2\x39\x2\xFFFF";
		private const string DFA17_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA17_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA17_transitionS =
			{
				"\x1\x1\x6\xFFFF\x1\x2\x1D\xFFFF\x1\x3",
				"\x1\x1\x6\xFFFF\x1\x2\x1D\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA17_eot = DFA.UnpackEncodedString(DFA17_eotS);
		private static readonly short[] DFA17_eof = DFA.UnpackEncodedString(DFA17_eofS);
		private static readonly char[] DFA17_min = DFA.UnpackEncodedStringToUnsignedChars(DFA17_minS);
		private static readonly char[] DFA17_max = DFA.UnpackEncodedStringToUnsignedChars(DFA17_maxS);
		private static readonly short[] DFA17_accept = DFA.UnpackEncodedString(DFA17_acceptS);
		private static readonly short[] DFA17_special = DFA.UnpackEncodedString(DFA17_specialS);
		private static readonly short[][] DFA17_transition;

		static DFA17()
		{
			int numStates = DFA17_transitionS.Length;
			DFA17_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA17_transition[i] = DFA.UnpackEncodedString(DFA17_transitionS[i]);
			}
		}

		public DFA17( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 17;
			this.eot = DFA17_eot;
			this.eof = DFA17_eof;
			this.min = DFA17_min;
			this.max = DFA17_max;
			this.accept = DFA17_accept;
			this.special = DFA17_special;
			this.transition = DFA17_transition;
		}

		public override string Description { get { return "()* loopback of 62:28: ( ( LT !)* ',' ( LT !)* Identifier )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA28 : DFA
	{
		private const string DFA28_eotS =
			"\x4\xFFFF";
		private const string DFA28_eofS =
			"\x1\x2\x3\xFFFF";
		private const string DFA28_minS =
			"\x2\xD\x2\xFFFF";
		private const string DFA28_maxS =
			"\x2\x6F\x2\xFFFF";
		private const string DFA28_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA28_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA28_transitionS =
			{
				"\x1\x3\x3\xFFFF\x1\x3\x2\xFFFF\x1\x1\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1"+
				"\x2\x5\xFFFF\x1\x3\x2\xFFFF\x3\x3\x6\xFFFF\x1\x3\x7\xFFFF\x1\x3\x2\xFFFF"+
				"\x2\x3\x2\xFFFF\x2\x3\x5\xFFFF\x1\x3\xE\xFFFF\x1\x3\x2\xFFFF\x1\x3\x1"+
				"\x2\x1\xFFFF\x1\x3\x1\x2\x2\x3\x2\xFFFF\x3\x3\x2\xFFFF\xB\x3\x3\xFFFF"+
				"\x1\x3",
				"\x1\x3\x3\xFFFF\x1\x3\x2\xFFFF\x1\x1\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3"+
				"\x1\x2\x5\xFFFF\x1\x3\x2\xFFFF\x3\x3\x6\xFFFF\x1\x3\x7\xFFFF\x1\x3\x2"+
				"\xFFFF\x2\x3\x2\xFFFF\x2\x3\x5\xFFFF\x1\x3\xE\xFFFF\x1\x3\x2\xFFFF\x1"+
				"\x3\x1\x2\x1\xFFFF\x1\x3\x1\x2\x2\x3\x2\xFFFF\x3\x3\x2\xFFFF\xB\x3\x3"+
				"\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA28_eot = DFA.UnpackEncodedString(DFA28_eotS);
		private static readonly short[] DFA28_eof = DFA.UnpackEncodedString(DFA28_eofS);
		private static readonly char[] DFA28_min = DFA.UnpackEncodedStringToUnsignedChars(DFA28_minS);
		private static readonly char[] DFA28_max = DFA.UnpackEncodedStringToUnsignedChars(DFA28_maxS);
		private static readonly short[] DFA28_accept = DFA.UnpackEncodedString(DFA28_acceptS);
		private static readonly short[] DFA28_special = DFA.UnpackEncodedString(DFA28_specialS);
		private static readonly short[][] DFA28_transition;

		static DFA28()
		{
			int numStates = DFA28_transitionS.Length;
			DFA28_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA28_transition[i] = DFA.UnpackEncodedString(DFA28_transitionS[i]);
			}
		}

		public DFA28( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 28;
			this.eot = DFA28_eot;
			this.eof = DFA28_eof;
			this.min = DFA28_min;
			this.max = DFA28_max;
			this.accept = DFA28_accept;
			this.special = DFA28_special;
			this.transition = DFA28_transition;
		}

		public override string Description { get { return "()* loopback of 92:17: ( ( LT !)* statement )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA32 : DFA
	{
		private const string DFA32_eotS =
			"\x5\xFFFF";
		private const string DFA32_eofS =
			"\x1\x1\x1\xFFFF\x1\x1\x1\xFFFF\x1\x1";
		private const string DFA32_minS =
			"\x1\x5\x1\xFFFF\x1\xD\x1\xFFFF\x1\xD";
		private const string DFA32_maxS =
			"\x1\x6F\x1\xFFFF\x1\x6F\x1\xFFFF\x1\x6F";
		private const string DFA32_acceptS =
			"\x1\xFFFF\x1\x2\x1\xFFFF\x1\x1\x1\xFFFF";
		private const string DFA32_specialS =
			"\x5\xFFFF}>";
		private static readonly string[] DFA32_transitionS =
			{
				"\x1\x1\x7\xFFFF\x1\x1\x3\xFFFF\x1\x1\x2\xFFFF\x1\x2\x2\x1\x1\xFFFF\x2"+
				"\x1\x5\xFFFF\x1\x1\x2\xFFFF\x3\x1\x6\xFFFF\x1\x1\x7\xFFFF\x1\x1\x2\xFFFF"+
				"\x2\x1\x1\xFFFF\x1\x3\x2\x1\x5\xFFFF\x1\x1\xE\xFFFF\x1\x1\x2\xFFFF\x2"+
				"\x1\x1\xFFFF\x5\x1\x1\xFFFF\x3\x1\x2\xFFFF\xB\x1\x3\xFFFF\x1\x1",
				"",
				"\x1\x1\x3\xFFFF\x1\x1\x2\xFFFF\x1\x4\x1\xFFFF\x1\x1\x1\xFFFF\x2\x1"+
				"\x5\xFFFF\x1\x1\x2\xFFFF\x3\x1\x6\xFFFF\x1\x1\x7\xFFFF\x1\x1\x2\xFFFF"+
				"\x2\x1\x1\xFFFF\x1\x3\x2\x1\x5\xFFFF\x1\x1\xE\xFFFF\x1\x1\x2\xFFFF\x2"+
				"\x1\x1\xFFFF\x5\x1\x1\xFFFF\x3\x1\x2\xFFFF\xB\x1\x3\xFFFF\x1\x1",
				"",
				"\x1\x1\x3\xFFFF\x1\x1\x2\xFFFF\x1\x4\x1\xFFFF\x1\x1\x1\xFFFF\x2\x1"+
				"\x5\xFFFF\x1\x1\x2\xFFFF\x3\x1\x6\xFFFF\x1\x1\x7\xFFFF\x1\x1\x2\xFFFF"+
				"\x2\x1\x1\xFFFF\x1\x3\x2\x1\x5\xFFFF\x1\x1\xE\xFFFF\x1\x1\x2\xFFFF\x2"+
				"\x1\x1\xFFFF\x5\x1\x1\xFFFF\x3\x1\x2\xFFFF\xB\x1\x3\xFFFF\x1\x1"
			};

		private static readonly short[] DFA32_eot = DFA.UnpackEncodedString(DFA32_eotS);
		private static readonly short[] DFA32_eof = DFA.UnpackEncodedString(DFA32_eofS);
		private static readonly char[] DFA32_min = DFA.UnpackEncodedStringToUnsignedChars(DFA32_minS);
		private static readonly char[] DFA32_max = DFA.UnpackEncodedStringToUnsignedChars(DFA32_maxS);
		private static readonly short[] DFA32_accept = DFA.UnpackEncodedString(DFA32_acceptS);
		private static readonly short[] DFA32_special = DFA.UnpackEncodedString(DFA32_specialS);
		private static readonly short[][] DFA32_transition;

		static DFA32()
		{
			int numStates = DFA32_transitionS.Length;
			DFA32_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA32_transition[i] = DFA.UnpackEncodedString(DFA32_transitionS[i]);
			}
		}

		public DFA32( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 32;
			this.eot = DFA32_eot;
			this.eof = DFA32_eof;
			this.min = DFA32_min;
			this.max = DFA32_max;
			this.accept = DFA32_accept;
			this.special = DFA32_special;
			this.transition = DFA32_transition;
		}

		public override string Description { get { return "()* loopback of 100:27: ( ( LT !)* ',' ( LT !)* variableDeclaration )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA35 : DFA
	{
		private const string DFA35_eotS =
			"\x4\xFFFF";
		private const string DFA35_eofS =
			"\x1\x2\x3\xFFFF";
		private const string DFA35_minS =
			"\x2\x14\x2\xFFFF";
		private const string DFA35_maxS =
			"\x2\x41\x2\xFFFF";
		private const string DFA35_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA35_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA35_transitionS =
			{
				"\x1\x1\x24\xFFFF\x1\x3\x7\xFFFF\x1\x2",
				"\x1\x1\x24\xFFFF\x1\x3\x7\xFFFF\x1\x2",
				"",
				""
			};

		private static readonly short[] DFA35_eot = DFA.UnpackEncodedString(DFA35_eotS);
		private static readonly short[] DFA35_eof = DFA.UnpackEncodedString(DFA35_eofS);
		private static readonly char[] DFA35_min = DFA.UnpackEncodedStringToUnsignedChars(DFA35_minS);
		private static readonly char[] DFA35_max = DFA.UnpackEncodedStringToUnsignedChars(DFA35_maxS);
		private static readonly short[] DFA35_accept = DFA.UnpackEncodedString(DFA35_acceptS);
		private static readonly short[] DFA35_special = DFA.UnpackEncodedString(DFA35_specialS);
		private static readonly short[][] DFA35_transition;

		static DFA35()
		{
			int numStates = DFA35_transitionS.Length;
			DFA35_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA35_transition[i] = DFA.UnpackEncodedString(DFA35_transitionS[i]);
			}
		}

		public DFA35( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 35;
			this.eot = DFA35_eot;
			this.eof = DFA35_eof;
			this.min = DFA35_min;
			this.max = DFA35_max;
			this.accept = DFA35_accept;
			this.special = DFA35_special;
			this.transition = DFA35_transition;
		}

		public override string Description { get { return "()* loopback of 104:31: ( ( LT !)* ',' ( LT !)* variableDeclarationNoIn )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA37 : DFA
	{
		private const string DFA37_eotS =
			"\x5\xFFFF";
		private const string DFA37_eofS =
			"\x2\x3\x2\xFFFF\x1\x3";
		private const string DFA37_minS =
			"\x1\x5\x1\xD\x2\xFFFF\x1\xD";
		private const string DFA37_maxS =
			"\x2\x6F\x2\xFFFF\x1\x6F";
		private const string DFA37_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2\x1\xFFFF";
		private const string DFA37_specialS =
			"\x5\xFFFF}>";
		private static readonly string[] DFA37_transitionS =
			{
				"\x1\x3\x7\xFFFF\x1\x3\x3\xFFFF\x1\x3\x2\xFFFF\x1\x1\x2\x3\x1\xFFFF\x2"+
				"\x3\x5\xFFFF\x1\x3\x2\xFFFF\x3\x3\x6\xFFFF\x1\x3\x7\xFFFF\x1\x3\x2\xFFFF"+
				"\x2\x3\x1\xFFFF\x3\x3\x5\xFFFF\x1\x3\x4\xFFFF\x1\x2\x9\xFFFF\x1\x3\x2"+
				"\xFFFF\x2\x3\x1\xFFFF\x5\x3\x1\xFFFF\x3\x3\x2\xFFFF\xB\x3\x3\xFFFF\x1"+
				"\x3",
				"\x1\x3\x3\xFFFF\x1\x3\x2\xFFFF\x1\x4\x1\xFFFF\x1\x3\x1\xFFFF\x2\x3"+
				"\x5\xFFFF\x1\x3\x2\xFFFF\x3\x3\x6\xFFFF\x1\x3\x7\xFFFF\x1\x3\x2\xFFFF"+
				"\x2\x3\x1\xFFFF\x3\x3\x5\xFFFF\x1\x3\x4\xFFFF\x1\x2\x9\xFFFF\x1\x3\x2"+
				"\xFFFF\x2\x3\x1\xFFFF\x5\x3\x1\xFFFF\x3\x3\x2\xFFFF\xB\x3\x3\xFFFF\x1"+
				"\x3",
				"",
				"",
				"\x1\x3\x3\xFFFF\x1\x3\x2\xFFFF\x1\x4\x1\xFFFF\x1\x3\x1\xFFFF\x2\x3"+
				"\x5\xFFFF\x1\x3\x2\xFFFF\x3\x3\x6\xFFFF\x1\x3\x7\xFFFF\x1\x3\x2\xFFFF"+
				"\x2\x3\x1\xFFFF\x3\x3\x5\xFFFF\x1\x3\x4\xFFFF\x1\x2\x9\xFFFF\x1\x3\x2"+
				"\xFFFF\x2\x3\x1\xFFFF\x5\x3\x1\xFFFF\x3\x3\x2\xFFFF\xB\x3\x3\xFFFF\x1"+
				"\x3"
			};

		private static readonly short[] DFA37_eot = DFA.UnpackEncodedString(DFA37_eotS);
		private static readonly short[] DFA37_eof = DFA.UnpackEncodedString(DFA37_eofS);
		private static readonly char[] DFA37_min = DFA.UnpackEncodedStringToUnsignedChars(DFA37_minS);
		private static readonly char[] DFA37_max = DFA.UnpackEncodedStringToUnsignedChars(DFA37_maxS);
		private static readonly short[] DFA37_accept = DFA.UnpackEncodedString(DFA37_acceptS);
		private static readonly short[] DFA37_special = DFA.UnpackEncodedString(DFA37_specialS);
		private static readonly short[][] DFA37_transition;

		static DFA37()
		{
			int numStates = DFA37_transitionS.Length;
			DFA37_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA37_transition[i] = DFA.UnpackEncodedString(DFA37_transitionS[i]);
			}
		}

		public DFA37( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 37;
			this.eot = DFA37_eot;
			this.eof = DFA37_eof;
			this.min = DFA37_min;
			this.max = DFA37_max;
			this.accept = DFA37_accept;
			this.special = DFA37_special;
			this.transition = DFA37_transition;
		}

		public override string Description { get { return "108:18: ( ( LT !)* initialiser )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA39 : DFA
	{
		private const string DFA39_eotS =
			"\x4\xFFFF";
		private const string DFA39_eofS =
			"\x1\x3\x3\xFFFF";
		private const string DFA39_minS =
			"\x2\x14\x2\xFFFF";
		private const string DFA39_maxS =
			"\x2\x5F\x2\xFFFF";
		private const string DFA39_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA39_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA39_transitionS =
			{
				"\x1\x1\x24\xFFFF\x1\x3\x7\xFFFF\x1\x3\x4\xFFFF\x1\x2\x18\xFFFF\x1\x3",
				"\x1\x1\x24\xFFFF\x1\x3\x7\xFFFF\x1\x3\x4\xFFFF\x1\x2\x18\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA39_eot = DFA.UnpackEncodedString(DFA39_eotS);
		private static readonly short[] DFA39_eof = DFA.UnpackEncodedString(DFA39_eofS);
		private static readonly char[] DFA39_min = DFA.UnpackEncodedStringToUnsignedChars(DFA39_minS);
		private static readonly char[] DFA39_max = DFA.UnpackEncodedStringToUnsignedChars(DFA39_maxS);
		private static readonly short[] DFA39_accept = DFA.UnpackEncodedString(DFA39_acceptS);
		private static readonly short[] DFA39_special = DFA.UnpackEncodedString(DFA39_specialS);
		private static readonly short[][] DFA39_transition;

		static DFA39()
		{
			int numStates = DFA39_transitionS.Length;
			DFA39_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA39_transition[i] = DFA.UnpackEncodedString(DFA39_transitionS[i]);
			}
		}

		public DFA39( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 39;
			this.eot = DFA39_eot;
			this.eof = DFA39_eof;
			this.min = DFA39_min;
			this.max = DFA39_max;
			this.accept = DFA39_accept;
			this.special = DFA39_special;
			this.transition = DFA39_transition;
		}

		public override string Description { get { return "112:18: ( ( LT !)* initialiserNoIn )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA59 : DFA
	{
		private const string DFA59_eotS =
			"\x4\xFFFF";
		private const string DFA59_eofS =
			"\x4\xFFFF";
		private const string DFA59_minS =
			"\x2\xD\x2\xFFFF";
		private const string DFA59_maxS =
			"\x2\x6F\x2\xFFFF";
		private const string DFA59_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA59_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA59_transitionS =
			{
				"\x1\x2\x3\xFFFF\x1\x2\x2\xFFFF\x1\x1\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x6"+
				"\xFFFF\x1\x2\x2\xFFFF\x3\x2\x6\xFFFF\x1\x2\x7\xFFFF\x1\x2\x2\xFFFF\x2"+
				"\x2\x2\xFFFF\x2\x2\x5\xFFFF\x1\x3\xE\xFFFF\x1\x2\x7\xFFFF\x1\x2\x4\xFFFF"+
				"\x1\x2\x3\xFFFF\x1\x2\x4\xFFFF\x3\x2\x2\xFFFF\x1\x2\x3\xFFFF\x1\x2",
				"\x1\x2\x3\xFFFF\x1\x2\x2\xFFFF\x1\x1\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2"+
				"\x6\xFFFF\x1\x2\x2\xFFFF\x3\x2\x6\xFFFF\x1\x2\x7\xFFFF\x1\x2\x2\xFFFF"+
				"\x2\x2\x2\xFFFF\x2\x2\x5\xFFFF\x1\x3\xE\xFFFF\x1\x2\x7\xFFFF\x1\x2\x4"+
				"\xFFFF\x1\x2\x3\xFFFF\x1\x2\x4\xFFFF\x3\x2\x2\xFFFF\x1\x2\x3\xFFFF\x1"+
				"\x2",
				"",
				""
			};

		private static readonly short[] DFA59_eot = DFA.UnpackEncodedString(DFA59_eotS);
		private static readonly short[] DFA59_eof = DFA.UnpackEncodedString(DFA59_eofS);
		private static readonly char[] DFA59_min = DFA.UnpackEncodedStringToUnsignedChars(DFA59_minS);
		private static readonly char[] DFA59_max = DFA.UnpackEncodedStringToUnsignedChars(DFA59_maxS);
		private static readonly short[] DFA59_accept = DFA.UnpackEncodedString(DFA59_acceptS);
		private static readonly short[] DFA59_special = DFA.UnpackEncodedString(DFA59_specialS);
		private static readonly short[][] DFA59_transition;

		static DFA59()
		{
			int numStates = DFA59_transitionS.Length;
			DFA59_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA59_transition[i] = DFA.UnpackEncodedString(DFA59_transitionS[i]);
			}
		}

		public DFA59( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 59;
			this.eot = DFA59_eot;
			this.eof = DFA59_eof;
			this.min = DFA59_min;
			this.max = DFA59_max;
			this.accept = DFA59_accept;
			this.special = DFA59_special;
			this.transition = DFA59_transition;
		}

		public override string Description { get { return "151:22: ( ( LT !)* forStatementInitialiserPart )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA62 : DFA
	{
		private const string DFA62_eotS =
			"\x4\xFFFF";
		private const string DFA62_eofS =
			"\x4\xFFFF";
		private const string DFA62_minS =
			"\x2\xD\x2\xFFFF";
		private const string DFA62_maxS =
			"\x2\x6F\x2\xFFFF";
		private const string DFA62_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA62_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA62_transitionS =
			{
				"\x1\x2\x3\xFFFF\x1\x2\x2\xFFFF\x1\x1\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x6"+
				"\xFFFF\x1\x2\x2\xFFFF\x3\x2\x6\xFFFF\x1\x2\x7\xFFFF\x1\x2\x2\xFFFF\x2"+
				"\x2\x2\xFFFF\x2\x2\x5\xFFFF\x1\x3\xE\xFFFF\x1\x2\x7\xFFFF\x1\x2\x4\xFFFF"+
				"\x1\x2\x3\xFFFF\x1\x2\x4\xFFFF\x1\x2\x1\xFFFF\x1\x2\x2\xFFFF\x1\x2\x3"+
				"\xFFFF\x1\x2",
				"\x1\x2\x3\xFFFF\x1\x2\x2\xFFFF\x1\x1\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2"+
				"\x6\xFFFF\x1\x2\x2\xFFFF\x3\x2\x6\xFFFF\x1\x2\x7\xFFFF\x1\x2\x2\xFFFF"+
				"\x2\x2\x2\xFFFF\x2\x2\x5\xFFFF\x1\x3\xE\xFFFF\x1\x2\x7\xFFFF\x1\x2\x4"+
				"\xFFFF\x1\x2\x3\xFFFF\x1\x2\x4\xFFFF\x1\x2\x1\xFFFF\x1\x2\x2\xFFFF\x1"+
				"\x2\x3\xFFFF\x1\x2",
				"",
				""
			};

		private static readonly short[] DFA62_eot = DFA.UnpackEncodedString(DFA62_eotS);
		private static readonly short[] DFA62_eof = DFA.UnpackEncodedString(DFA62_eofS);
		private static readonly char[] DFA62_min = DFA.UnpackEncodedStringToUnsignedChars(DFA62_minS);
		private static readonly char[] DFA62_max = DFA.UnpackEncodedStringToUnsignedChars(DFA62_maxS);
		private static readonly short[] DFA62_accept = DFA.UnpackEncodedString(DFA62_acceptS);
		private static readonly short[] DFA62_special = DFA.UnpackEncodedString(DFA62_specialS);
		private static readonly short[][] DFA62_transition;

		static DFA62()
		{
			int numStates = DFA62_transitionS.Length;
			DFA62_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA62_transition[i] = DFA.UnpackEncodedString(DFA62_transitionS[i]);
			}
		}

		public DFA62( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 62;
			this.eot = DFA62_eot;
			this.eof = DFA62_eof;
			this.min = DFA62_min;
			this.max = DFA62_max;
			this.accept = DFA62_accept;
			this.special = DFA62_special;
			this.transition = DFA62_transition;
		}

		public override string Description { get { return "151:67: ( ( LT !)* expression )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA65 : DFA
	{
		private const string DFA65_eotS =
			"\x4\xFFFF";
		private const string DFA65_eofS =
			"\x4\xFFFF";
		private const string DFA65_minS =
			"\x2\xD\x2\xFFFF";
		private const string DFA65_maxS =
			"\x2\x6F\x2\xFFFF";
		private const string DFA65_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA65_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA65_transitionS =
			{
				"\x1\x2\x3\xFFFF\x1\x2\x2\xFFFF\x1\x1\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x2"+
				"\xFFFF\x1\x3\x3\xFFFF\x1\x2\x2\xFFFF\x3\x2\x6\xFFFF\x1\x2\x7\xFFFF\x1"+
				"\x2\x2\xFFFF\x2\x2\x2\xFFFF\x2\x2\x14\xFFFF\x1\x2\x7\xFFFF\x1\x2\x4"+
				"\xFFFF\x1\x2\x3\xFFFF\x1\x2\x4\xFFFF\x1\x2\x1\xFFFF\x1\x2\x2\xFFFF\x1"+
				"\x2\x3\xFFFF\x1\x2",
				"\x1\x2\x3\xFFFF\x1\x2\x2\xFFFF\x1\x1\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2"+
				"\x2\xFFFF\x1\x3\x3\xFFFF\x1\x2\x2\xFFFF\x3\x2\x6\xFFFF\x1\x2\x7\xFFFF"+
				"\x1\x2\x2\xFFFF\x2\x2\x2\xFFFF\x2\x2\x14\xFFFF\x1\x2\x7\xFFFF\x1\x2"+
				"\x4\xFFFF\x1\x2\x3\xFFFF\x1\x2\x4\xFFFF\x1\x2\x1\xFFFF\x1\x2\x2\xFFFF"+
				"\x1\x2\x3\xFFFF\x1\x2",
				"",
				""
			};

		private static readonly short[] DFA65_eot = DFA.UnpackEncodedString(DFA65_eotS);
		private static readonly short[] DFA65_eof = DFA.UnpackEncodedString(DFA65_eofS);
		private static readonly char[] DFA65_min = DFA.UnpackEncodedStringToUnsignedChars(DFA65_minS);
		private static readonly char[] DFA65_max = DFA.UnpackEncodedStringToUnsignedChars(DFA65_maxS);
		private static readonly short[] DFA65_accept = DFA.UnpackEncodedString(DFA65_acceptS);
		private static readonly short[] DFA65_special = DFA.UnpackEncodedString(DFA65_specialS);
		private static readonly short[][] DFA65_transition;

		static DFA65()
		{
			int numStates = DFA65_transitionS.Length;
			DFA65_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA65_transition[i] = DFA.UnpackEncodedString(DFA65_transitionS[i]);
			}
		}

		public DFA65( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 65;
			this.eot = DFA65_eot;
			this.eof = DFA65_eof;
			this.min = DFA65_min;
			this.max = DFA65_max;
			this.accept = DFA65_accept;
			this.special = DFA65_special;
			this.transition = DFA65_transition;
		}

		public override string Description { get { return "151:95: ( ( LT !)* expression )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA92 : DFA
	{
		private const string DFA92_eotS =
			"\x4\xFFFF";
		private const string DFA92_eofS =
			"\x4\xFFFF";
		private const string DFA92_minS =
			"\x2\x14\x2\xFFFF";
		private const string DFA92_maxS =
			"\x2\x57\x2\xFFFF";
		private const string DFA92_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA92_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA92_transitionS =
			{
				"\x1\x1\x4\xFFFF\x1\x2\x3A\xFFFF\x1\x3\x2\xFFFF\x1\x2",
				"\x1\x1\x4\xFFFF\x1\x2\x3A\xFFFF\x1\x3\x2\xFFFF\x1\x2",
				"",
				""
			};

		private static readonly short[] DFA92_eot = DFA.UnpackEncodedString(DFA92_eotS);
		private static readonly short[] DFA92_eof = DFA.UnpackEncodedString(DFA92_eofS);
		private static readonly char[] DFA92_min = DFA.UnpackEncodedStringToUnsignedChars(DFA92_minS);
		private static readonly char[] DFA92_max = DFA.UnpackEncodedStringToUnsignedChars(DFA92_maxS);
		private static readonly short[] DFA92_accept = DFA.UnpackEncodedString(DFA92_acceptS);
		private static readonly short[] DFA92_special = DFA.UnpackEncodedString(DFA92_specialS);
		private static readonly short[][] DFA92_transition;

		static DFA92()
		{
			int numStates = DFA92_transitionS.Length;
			DFA92_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA92_transition[i] = DFA.UnpackEncodedString(DFA92_transitionS[i]);
			}
		}

		public DFA92( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 92;
			this.eot = DFA92_eot;
			this.eof = DFA92_eof;
			this.min = DFA92_min;
			this.max = DFA92_max;
			this.accept = DFA92_accept;
			this.special = DFA92_special;
			this.transition = DFA92_transition;
		}

		public override string Description { get { return "()* loopback of 193:11: ( ( LT !)* caseClause )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA96 : DFA
	{
		private const string DFA96_eotS =
			"\x4\xFFFF";
		private const string DFA96_eofS =
			"\x4\xFFFF";
		private const string DFA96_minS =
			"\x2\x14\x2\xFFFF";
		private const string DFA96_maxS =
			"\x2\x57\x2\xFFFF";
		private const string DFA96_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA96_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA96_transitionS =
			{
				"\x1\x1\x4\xFFFF\x1\x3\x3D\xFFFF\x1\x2",
				"\x1\x1\x4\xFFFF\x1\x3\x3D\xFFFF\x1\x2",
				"",
				""
			};

		private static readonly short[] DFA96_eot = DFA.UnpackEncodedString(DFA96_eotS);
		private static readonly short[] DFA96_eof = DFA.UnpackEncodedString(DFA96_eofS);
		private static readonly char[] DFA96_min = DFA.UnpackEncodedStringToUnsignedChars(DFA96_minS);
		private static readonly char[] DFA96_max = DFA.UnpackEncodedStringToUnsignedChars(DFA96_maxS);
		private static readonly short[] DFA96_accept = DFA.UnpackEncodedString(DFA96_acceptS);
		private static readonly short[] DFA96_special = DFA.UnpackEncodedString(DFA96_specialS);
		private static readonly short[][] DFA96_transition;

		static DFA96()
		{
			int numStates = DFA96_transitionS.Length;
			DFA96_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA96_transition[i] = DFA.UnpackEncodedString(DFA96_transitionS[i]);
			}
		}

		public DFA96( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 96;
			this.eot = DFA96_eot;
			this.eof = DFA96_eof;
			this.min = DFA96_min;
			this.max = DFA96_max;
			this.accept = DFA96_accept;
			this.special = DFA96_special;
			this.transition = DFA96_transition;
		}

		public override string Description { get { return "193:30: ( ( LT !)* defaultClause ( ( LT !)* caseClause )* )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA95 : DFA
	{
		private const string DFA95_eotS =
			"\x4\xFFFF";
		private const string DFA95_eofS =
			"\x4\xFFFF";
		private const string DFA95_minS =
			"\x2\x14\x2\xFFFF";
		private const string DFA95_maxS =
			"\x2\x54\x2\xFFFF";
		private const string DFA95_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA95_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA95_transitionS =
			{
				"\x1\x1\x4\xFFFF\x1\x2\x3A\xFFFF\x1\x3",
				"\x1\x1\x4\xFFFF\x1\x2\x3A\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA95_eot = DFA.UnpackEncodedString(DFA95_eotS);
		private static readonly short[] DFA95_eof = DFA.UnpackEncodedString(DFA95_eofS);
		private static readonly char[] DFA95_min = DFA.UnpackEncodedStringToUnsignedChars(DFA95_minS);
		private static readonly char[] DFA95_max = DFA.UnpackEncodedStringToUnsignedChars(DFA95_maxS);
		private static readonly short[] DFA95_accept = DFA.UnpackEncodedString(DFA95_acceptS);
		private static readonly short[] DFA95_special = DFA.UnpackEncodedString(DFA95_specialS);
		private static readonly short[][] DFA95_transition;

		static DFA95()
		{
			int numStates = DFA95_transitionS.Length;
			DFA95_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA95_transition[i] = DFA.UnpackEncodedString(DFA95_transitionS[i]);
			}
		}

		public DFA95( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 95;
			this.eot = DFA95_eot;
			this.eof = DFA95_eof;
			this.min = DFA95_min;
			this.max = DFA95_max;
			this.accept = DFA95_accept;
			this.special = DFA95_special;
			this.transition = DFA95_transition;
		}

		public override string Description { get { return "()* loopback of 193:50: ( ( LT !)* caseClause )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA108 : DFA
	{
		private const string DFA108_eotS =
			"\x4\xFFFF";
		private const string DFA108_eofS =
			"\x2\x3\x2\xFFFF";
		private const string DFA108_minS =
			"\x2\xD\x2\xFFFF";
		private const string DFA108_maxS =
			"\x2\x6F\x2\xFFFF";
		private const string DFA108_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA108_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA108_transitionS =
			{
				"\x1\x3\x3\xFFFF\x1\x3\x2\xFFFF\x1\x1\x1\xFFFF\x1\x3\x1\xFFFF\x2\x3\x5"+
				"\xFFFF\x1\x3\x2\xFFFF\x3\x3\x6\xFFFF\x1\x3\x7\xFFFF\x1\x3\x2\xFFFF\x2"+
				"\x3\x2\xFFFF\x2\x3\x5\xFFFF\x1\x3\xE\xFFFF\x1\x3\x2\xFFFF\x2\x3\x1\xFFFF"+
				"\x5\x3\x1\x2\x3\x3\x2\xFFFF\xB\x3\x3\xFFFF\x1\x3",
				"\x1\x3\x3\xFFFF\x1\x3\x2\xFFFF\x1\x1\x1\xFFFF\x1\x3\x1\xFFFF\x2\x3"+
				"\x5\xFFFF\x1\x3\x2\xFFFF\x3\x3\x6\xFFFF\x1\x3\x7\xFFFF\x1\x3\x2\xFFFF"+
				"\x2\x3\x2\xFFFF\x2\x3\x5\xFFFF\x1\x3\xE\xFFFF\x1\x3\x2\xFFFF\x2\x3\x1"+
				"\xFFFF\x5\x3\x1\x2\x3\x3\x2\xFFFF\xB\x3\x3\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA108_eot = DFA.UnpackEncodedString(DFA108_eotS);
		private static readonly short[] DFA108_eof = DFA.UnpackEncodedString(DFA108_eofS);
		private static readonly char[] DFA108_min = DFA.UnpackEncodedStringToUnsignedChars(DFA108_minS);
		private static readonly char[] DFA108_max = DFA.UnpackEncodedStringToUnsignedChars(DFA108_maxS);
		private static readonly short[] DFA108_accept = DFA.UnpackEncodedString(DFA108_acceptS);
		private static readonly short[] DFA108_special = DFA.UnpackEncodedString(DFA108_specialS);
		private static readonly short[][] DFA108_transition;

		static DFA108()
		{
			int numStates = DFA108_transitionS.Length;
			DFA108_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA108_transition[i] = DFA.UnpackEncodedString(DFA108_transitionS[i]);
			}
		}

		public DFA108( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 108;
			this.eot = DFA108_eot;
			this.eof = DFA108_eof;
			this.min = DFA108_min;
			this.max = DFA108_max;
			this.accept = DFA108_accept;
			this.special = DFA108_special;
			this.transition = DFA108_transition;
		}

		public override string Description { get { return "209:67: ( ( LT !)* finallyClause )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA117 : DFA
	{
		private const string DFA117_eotS =
			"\x5\xFFFF";
		private const string DFA117_eofS =
			"\x1\x1\x1\xFFFF\x1\x1\x1\xFFFF\x1\x1";
		private const string DFA117_minS =
			"\x1\x5\x1\xFFFF\x1\xD\x1\xFFFF\x1\xD";
		private const string DFA117_maxS =
			"\x1\x6F\x1\xFFFF\x1\x6F\x1\xFFFF\x1\x6F";
		private const string DFA117_acceptS =
			"\x1\xFFFF\x1\x2\x1\xFFFF\x1\x1\x1\xFFFF";
		private const string DFA117_specialS =
			"\x5\xFFFF}>";
		private static readonly string[] DFA117_transitionS =
			{
				"\x1\x1\x7\xFFFF\x1\x1\x3\xFFFF\x1\x1\x2\xFFFF\x1\x2\x2\x1\x1\xFFFF\x4"+
				"\x1\x3\xFFFF\x1\x1\x2\xFFFF\x3\x1\x6\xFFFF\x1\x1\x7\xFFFF\x1\x1\x2\xFFFF"+
				"\x2\x1\x1\xFFFF\x1\x3\x2\x1\x4\xFFFF\x2\x1\xE\xFFFF\x1\x1\x2\xFFFF\x2"+
				"\x1\x1\xFFFF\x5\x1\x1\xFFFF\x3\x1\x2\xFFFF\xB\x1\x3\xFFFF\x1\x1",
				"",
				"\x1\x1\x3\xFFFF\x1\x1\x2\xFFFF\x1\x4\x1\xFFFF\x1\x1\x1\xFFFF\x4\x1"+
				"\x3\xFFFF\x1\x1\x2\xFFFF\x3\x1\x6\xFFFF\x1\x1\x7\xFFFF\x1\x1\x2\xFFFF"+
				"\x2\x1\x1\xFFFF\x1\x3\x2\x1\x4\xFFFF\x2\x1\xE\xFFFF\x1\x1\x2\xFFFF\x2"+
				"\x1\x1\xFFFF\x5\x1\x1\xFFFF\x3\x1\x2\xFFFF\xB\x1\x3\xFFFF\x1\x1",
				"",
				"\x1\x1\x3\xFFFF\x1\x1\x2\xFFFF\x1\x4\x1\xFFFF\x1\x1\x1\xFFFF\x4\x1"+
				"\x3\xFFFF\x1\x1\x2\xFFFF\x3\x1\x6\xFFFF\x1\x1\x7\xFFFF\x1\x1\x2\xFFFF"+
				"\x2\x1\x1\xFFFF\x1\x3\x2\x1\x4\xFFFF\x2\x1\xE\xFFFF\x1\x1\x2\xFFFF\x2"+
				"\x1\x1\xFFFF\x5\x1\x1\xFFFF\x3\x1\x2\xFFFF\xB\x1\x3\xFFFF\x1\x1"
			};

		private static readonly short[] DFA117_eot = DFA.UnpackEncodedString(DFA117_eotS);
		private static readonly short[] DFA117_eof = DFA.UnpackEncodedString(DFA117_eofS);
		private static readonly char[] DFA117_min = DFA.UnpackEncodedStringToUnsignedChars(DFA117_minS);
		private static readonly char[] DFA117_max = DFA.UnpackEncodedStringToUnsignedChars(DFA117_maxS);
		private static readonly short[] DFA117_accept = DFA.UnpackEncodedString(DFA117_acceptS);
		private static readonly short[] DFA117_special = DFA.UnpackEncodedString(DFA117_specialS);
		private static readonly short[][] DFA117_transition;

		static DFA117()
		{
			int numStates = DFA117_transitionS.Length;
			DFA117_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA117_transition[i] = DFA.UnpackEncodedString(DFA117_transitionS[i]);
			}
		}

		public DFA117( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 117;
			this.eot = DFA117_eot;
			this.eof = DFA117_eof;
			this.min = DFA117_min;
			this.max = DFA117_max;
			this.accept = DFA117_accept;
			this.special = DFA117_special;
			this.transition = DFA117_transition;
		}

		public override string Description { get { return "()* loopback of 222:28: ( ( LT !)* ',' ( LT !)* assignmentExpression )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA120 : DFA
	{
		private const string DFA120_eotS =
			"\x4\xFFFF";
		private const string DFA120_eofS =
			"\x1\x2\x3\xFFFF";
		private const string DFA120_minS =
			"\x2\x14\x2\xFFFF";
		private const string DFA120_maxS =
			"\x2\x41\x2\xFFFF";
		private const string DFA120_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA120_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA120_transitionS =
			{
				"\x1\x1\x24\xFFFF\x1\x3\x7\xFFFF\x1\x2",
				"\x1\x1\x24\xFFFF\x1\x3\x7\xFFFF\x1\x2",
				"",
				""
			};

		private static readonly short[] DFA120_eot = DFA.UnpackEncodedString(DFA120_eotS);
		private static readonly short[] DFA120_eof = DFA.UnpackEncodedString(DFA120_eofS);
		private static readonly char[] DFA120_min = DFA.UnpackEncodedStringToUnsignedChars(DFA120_minS);
		private static readonly char[] DFA120_max = DFA.UnpackEncodedStringToUnsignedChars(DFA120_maxS);
		private static readonly short[] DFA120_accept = DFA.UnpackEncodedString(DFA120_acceptS);
		private static readonly short[] DFA120_special = DFA.UnpackEncodedString(DFA120_specialS);
		private static readonly short[][] DFA120_transition;

		static DFA120()
		{
			int numStates = DFA120_transitionS.Length;
			DFA120_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA120_transition[i] = DFA.UnpackEncodedString(DFA120_transitionS[i]);
			}
		}

		public DFA120( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 120;
			this.eot = DFA120_eot;
			this.eof = DFA120_eof;
			this.min = DFA120_min;
			this.max = DFA120_max;
			this.accept = DFA120_accept;
			this.special = DFA120_special;
			this.transition = DFA120_transition;
		}

		public override string Description { get { return "()* loopback of 226:32: ( ( LT !)* ',' ( LT !)* assignmentExpressionNoIn )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA144 : DFA
	{
		private const string DFA144_eotS =
			"\x4\xFFFF";
		private const string DFA144_eofS =
			"\x4\xFFFF";
		private const string DFA144_minS =
			"\x2\xD\x2\xFFFF";
		private const string DFA144_maxS =
			"\x2\x6F\x2\xFFFF";
		private const string DFA144_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA144_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA144_transitionS =
			{
				"\x1\x2\x3\xFFFF\x1\x2\x2\xFFFF\x1\x1\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x2"+
				"\xFFFF\x1\x3\x3\xFFFF\x1\x2\x2\xFFFF\x3\x2\x6\xFFFF\x1\x2\x7\xFFFF\x1"+
				"\x2\x2\xFFFF\x2\x2\x2\xFFFF\x2\x2\x14\xFFFF\x1\x2\x7\xFFFF\x1\x2\x4"+
				"\xFFFF\x1\x2\x3\xFFFF\x1\x2\x4\xFFFF\x1\x2\x1\xFFFF\x1\x2\x2\xFFFF\x1"+
				"\x2\x3\xFFFF\x1\x2",
				"\x1\x2\x3\xFFFF\x1\x2\x2\xFFFF\x1\x1\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2"+
				"\x2\xFFFF\x1\x3\x3\xFFFF\x1\x2\x2\xFFFF\x3\x2\x6\xFFFF\x1\x2\x7\xFFFF"+
				"\x1\x2\x2\xFFFF\x2\x2\x2\xFFFF\x2\x2\x14\xFFFF\x1\x2\x7\xFFFF\x1\x2"+
				"\x4\xFFFF\x1\x2\x3\xFFFF\x1\x2\x4\xFFFF\x1\x2\x1\xFFFF\x1\x2\x2\xFFFF"+
				"\x1\x2\x3\xFFFF\x1\x2",
				"",
				""
			};

		private static readonly short[] DFA144_eot = DFA.UnpackEncodedString(DFA144_eotS);
		private static readonly short[] DFA144_eof = DFA.UnpackEncodedString(DFA144_eofS);
		private static readonly char[] DFA144_min = DFA.UnpackEncodedStringToUnsignedChars(DFA144_minS);
		private static readonly char[] DFA144_max = DFA.UnpackEncodedStringToUnsignedChars(DFA144_maxS);
		private static readonly short[] DFA144_accept = DFA.UnpackEncodedString(DFA144_acceptS);
		private static readonly short[] DFA144_special = DFA.UnpackEncodedString(DFA144_specialS);
		private static readonly short[][] DFA144_transition;

		static DFA144()
		{
			int numStates = DFA144_transitionS.Length;
			DFA144_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA144_transition[i] = DFA.UnpackEncodedString(DFA144_transitionS[i]);
			}
		}

		public DFA144( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 144;
			this.eot = DFA144_eot;
			this.eof = DFA144_eof;
			this.min = DFA144_min;
			this.max = DFA144_max;
			this.accept = DFA144_accept;
			this.special = DFA144_special;
			this.transition = DFA144_transition;
		}

		public override string Description { get { return "269:11: ( ( LT !)* assignmentExpression ( ( LT !)* ',' ( LT !)* assignmentExpression )* )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA143 : DFA
	{
		private const string DFA143_eotS =
			"\x4\xFFFF";
		private const string DFA143_eofS =
			"\x4\xFFFF";
		private const string DFA143_minS =
			"\x2\x14\x2\xFFFF";
		private const string DFA143_maxS =
			"\x2\x39\x2\xFFFF";
		private const string DFA143_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA143_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA143_transitionS =
			{
				"\x1\x1\x6\xFFFF\x1\x2\x1D\xFFFF\x1\x3",
				"\x1\x1\x6\xFFFF\x1\x2\x1D\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA143_eot = DFA.UnpackEncodedString(DFA143_eotS);
		private static readonly short[] DFA143_eof = DFA.UnpackEncodedString(DFA143_eofS);
		private static readonly char[] DFA143_min = DFA.UnpackEncodedStringToUnsignedChars(DFA143_minS);
		private static readonly char[] DFA143_max = DFA.UnpackEncodedStringToUnsignedChars(DFA143_maxS);
		private static readonly short[] DFA143_accept = DFA.UnpackEncodedString(DFA143_acceptS);
		private static readonly short[] DFA143_special = DFA.UnpackEncodedString(DFA143_specialS);
		private static readonly short[][] DFA143_transition;

		static DFA143()
		{
			int numStates = DFA143_transitionS.Length;
			DFA143_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA143_transition[i] = DFA.UnpackEncodedString(DFA143_transitionS[i]);
			}
		}

		public DFA143( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 143;
			this.eot = DFA143_eot;
			this.eof = DFA143_eof;
			this.min = DFA143_min;
			this.max = DFA143_max;
			this.accept = DFA143_accept;
			this.special = DFA143_special;
			this.transition = DFA143_transition;
		}

		public override string Description { get { return "()* loopback of 269:38: ( ( LT !)* ',' ( LT !)* assignmentExpression )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA153 : DFA
	{
		private const string DFA153_eotS =
			"\x5\xFFFF";
		private const string DFA153_eofS =
			"\x2\x3\x2\xFFFF\x1\x3";
		private const string DFA153_minS =
			"\x1\x5\x1\xD\x2\xFFFF\x1\xD";
		private const string DFA153_maxS =
			"\x2\x6F\x2\xFFFF\x1\x6F";
		private const string DFA153_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2\x1\xFFFF";
		private const string DFA153_specialS =
			"\x5\xFFFF}>";
		private static readonly string[] DFA153_transitionS =
			{
				"\x1\x3\x7\xFFFF\x1\x3\x3\xFFFF\x1\x3\x2\xFFFF\x1\x1\x2\x3\x1\xFFFF\x4"+
				"\x3\x3\xFFFF\x1\x3\x2\xFFFF\x3\x3\x6\xFFFF\x1\x3\x7\xFFFF\x1\x3\x2\xFFFF"+
				"\x2\x3\x1\xFFFF\x3\x3\x4\xFFFF\x2\x3\xD\xFFFF\x1\x2\x1\x3\x2\xFFFF\x2"+
				"\x3\x1\xFFFF\x5\x3\x1\xFFFF\x3\x3\x2\xFFFF\xB\x3\x3\xFFFF\x1\x3",
				"\x1\x3\x3\xFFFF\x1\x3\x2\xFFFF\x1\x4\x1\xFFFF\x1\x3\x1\xFFFF\x4\x3"+
				"\x3\xFFFF\x1\x3\x2\xFFFF\x3\x3\x6\xFFFF\x1\x3\x7\xFFFF\x1\x3\x2\xFFFF"+
				"\x2\x3\x1\xFFFF\x3\x3\x4\xFFFF\x2\x3\xD\xFFFF\x1\x2\x1\x3\x2\xFFFF\x2"+
				"\x3\x1\xFFFF\x5\x3\x1\xFFFF\x3\x3\x2\xFFFF\xB\x3\x3\xFFFF\x1\x3",
				"",
				"",
				"\x1\x3\x3\xFFFF\x1\x3\x2\xFFFF\x1\x4\x1\xFFFF\x1\x3\x1\xFFFF\x4\x3"+
				"\x3\xFFFF\x1\x3\x2\xFFFF\x3\x3\x6\xFFFF\x1\x3\x7\xFFFF\x1\x3\x2\xFFFF"+
				"\x2\x3\x1\xFFFF\x3\x3\x4\xFFFF\x2\x3\xD\xFFFF\x1\x2\x1\x3\x2\xFFFF\x2"+
				"\x3\x1\xFFFF\x5\x3\x1\xFFFF\x3\x3\x2\xFFFF\xB\x3\x3\xFFFF\x1\x3"
			};

		private static readonly short[] DFA153_eot = DFA.UnpackEncodedString(DFA153_eotS);
		private static readonly short[] DFA153_eof = DFA.UnpackEncodedString(DFA153_eofS);
		private static readonly char[] DFA153_min = DFA.UnpackEncodedStringToUnsignedChars(DFA153_minS);
		private static readonly char[] DFA153_max = DFA.UnpackEncodedStringToUnsignedChars(DFA153_maxS);
		private static readonly short[] DFA153_accept = DFA.UnpackEncodedString(DFA153_acceptS);
		private static readonly short[] DFA153_special = DFA.UnpackEncodedString(DFA153_specialS);
		private static readonly short[][] DFA153_transition;

		static DFA153()
		{
			int numStates = DFA153_transitionS.Length;
			DFA153_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA153_transition[i] = DFA.UnpackEncodedString(DFA153_transitionS[i]);
			}
		}

		public DFA153( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 153;
			this.eot = DFA153_eot;
			this.eof = DFA153_eof;
			this.min = DFA153_min;
			this.max = DFA153_max;
			this.accept = DFA153_accept;
			this.special = DFA153_special;
			this.transition = DFA153_transition;
		}

		public override string Description { get { return "285:27: ( ( LT !)* '?' ( LT !)* assignmentExpression ( LT !)* ':' ( LT !)* assignmentExpression )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA158 : DFA
	{
		private const string DFA158_eotS =
			"\x4\xFFFF";
		private const string DFA158_eofS =
			"\x1\x3\x3\xFFFF";
		private const string DFA158_minS =
			"\x2\x14\x2\xFFFF";
		private const string DFA158_maxS =
			"\x2\x5F\x2\xFFFF";
		private const string DFA158_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA158_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA158_transitionS =
			{
				"\x1\x1\x24\xFFFF\x1\x3\x6\xFFFF\x2\x3\xD\xFFFF\x1\x2\xF\xFFFF\x1\x3",
				"\x1\x1\x24\xFFFF\x1\x3\x6\xFFFF\x2\x3\xD\xFFFF\x1\x2\xF\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA158_eot = DFA.UnpackEncodedString(DFA158_eotS);
		private static readonly short[] DFA158_eof = DFA.UnpackEncodedString(DFA158_eofS);
		private static readonly char[] DFA158_min = DFA.UnpackEncodedStringToUnsignedChars(DFA158_minS);
		private static readonly char[] DFA158_max = DFA.UnpackEncodedStringToUnsignedChars(DFA158_maxS);
		private static readonly short[] DFA158_accept = DFA.UnpackEncodedString(DFA158_acceptS);
		private static readonly short[] DFA158_special = DFA.UnpackEncodedString(DFA158_specialS);
		private static readonly short[][] DFA158_transition;

		static DFA158()
		{
			int numStates = DFA158_transitionS.Length;
			DFA158_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA158_transition[i] = DFA.UnpackEncodedString(DFA158_transitionS[i]);
			}
		}

		public DFA158( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 158;
			this.eot = DFA158_eot;
			this.eof = DFA158_eof;
			this.min = DFA158_min;
			this.max = DFA158_max;
			this.accept = DFA158_accept;
			this.special = DFA158_special;
			this.transition = DFA158_transition;
		}

		public override string Description { get { return "289:31: ( ( LT !)* '?' ( LT !)* assignmentExpressionNoIn ( LT !)* ':' ( LT !)* assignmentExpressionNoIn )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA161 : DFA
	{
		private const string DFA161_eotS =
			"\x5\xFFFF";
		private const string DFA161_eofS =
			"\x2\x2\x2\xFFFF\x1\x2";
		private const string DFA161_minS =
			"\x1\x5\x1\xD\x2\xFFFF\x1\xD";
		private const string DFA161_maxS =
			"\x2\x6F\x2\xFFFF\x1\x6F";
		private const string DFA161_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1\x1\xFFFF";
		private const string DFA161_specialS =
			"\x5\xFFFF}>";
		private static readonly string[] DFA161_transitionS =
			{
				"\x1\x2\x7\xFFFF\x1\x2\x3\xFFFF\x1\x2\x2\xFFFF\x1\x1\x2\x2\x1\xFFFF\x4"+
				"\x2\x3\xFFFF\x1\x2\x2\xFFFF\x3\x2\x6\xFFFF\x1\x2\x7\xFFFF\x1\x2\x2\xFFFF"+
				"\x2\x2\x1\xFFFF\x3\x2\x4\xFFFF\x2\x2\xD\xFFFF\x2\x2\x2\xFFFF\x2\x2\x1"+
				"\xFFFF\x5\x2\x1\xFFFF\x3\x2\x2\xFFFF\xB\x2\x2\xFFFF\x1\x3\x1\x2",
				"\x1\x2\x3\xFFFF\x1\x2\x2\xFFFF\x1\x4\x1\xFFFF\x1\x2\x1\xFFFF\x4\x2"+
				"\x3\xFFFF\x1\x2\x2\xFFFF\x3\x2\x6\xFFFF\x1\x2\x7\xFFFF\x1\x2\x2\xFFFF"+
				"\x2\x2\x1\xFFFF\x3\x2\x4\xFFFF\x2\x2\xD\xFFFF\x2\x2\x2\xFFFF\x2\x2\x1"+
				"\xFFFF\x5\x2\x1\xFFFF\x3\x2\x2\xFFFF\xB\x2\x2\xFFFF\x1\x3\x1\x2",
				"",
				"",
				"\x1\x2\x3\xFFFF\x1\x2\x2\xFFFF\x1\x4\x1\xFFFF\x1\x2\x1\xFFFF\x4\x2"+
				"\x3\xFFFF\x1\x2\x2\xFFFF\x3\x2\x6\xFFFF\x1\x2\x7\xFFFF\x1\x2\x2\xFFFF"+
				"\x2\x2\x1\xFFFF\x3\x2\x4\xFFFF\x2\x2\xD\xFFFF\x2\x2\x2\xFFFF\x2\x2\x1"+
				"\xFFFF\x5\x2\x1\xFFFF\x3\x2\x2\xFFFF\xB\x2\x2\xFFFF\x1\x3\x1\x2"
			};

		private static readonly short[] DFA161_eot = DFA.UnpackEncodedString(DFA161_eotS);
		private static readonly short[] DFA161_eof = DFA.UnpackEncodedString(DFA161_eofS);
		private static readonly char[] DFA161_min = DFA.UnpackEncodedStringToUnsignedChars(DFA161_minS);
		private static readonly char[] DFA161_max = DFA.UnpackEncodedStringToUnsignedChars(DFA161_maxS);
		private static readonly short[] DFA161_accept = DFA.UnpackEncodedString(DFA161_acceptS);
		private static readonly short[] DFA161_special = DFA.UnpackEncodedString(DFA161_specialS);
		private static readonly short[][] DFA161_transition;

		static DFA161()
		{
			int numStates = DFA161_transitionS.Length;
			DFA161_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA161_transition[i] = DFA.UnpackEncodedString(DFA161_transitionS[i]);
			}
		}

		public DFA161( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 161;
			this.eot = DFA161_eot;
			this.eof = DFA161_eof;
			this.min = DFA161_min;
			this.max = DFA161_max;
			this.accept = DFA161_accept;
			this.special = DFA161_special;
			this.transition = DFA161_transition;
		}

		public override string Description { get { return "()* loopback of 293:28: ( ( LT !)* '||' ( LT !)* logicalANDExpression )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA164 : DFA
	{
		private const string DFA164_eotS =
			"\x4\xFFFF";
		private const string DFA164_eofS =
			"\x1\x2\x3\xFFFF";
		private const string DFA164_minS =
			"\x2\x14\x2\xFFFF";
		private const string DFA164_maxS =
			"\x2\x6E\x2\xFFFF";
		private const string DFA164_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA164_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA164_transitionS =
			{
				"\x1\x1\x24\xFFFF\x1\x2\x6\xFFFF\x2\x2\xD\xFFFF\x1\x2\xF\xFFFF\x1\x2"+
				"\xE\xFFFF\x1\x3",
				"\x1\x1\x24\xFFFF\x1\x2\x6\xFFFF\x2\x2\xD\xFFFF\x1\x2\xF\xFFFF\x1\x2"+
				"\xE\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA164_eot = DFA.UnpackEncodedString(DFA164_eotS);
		private static readonly short[] DFA164_eof = DFA.UnpackEncodedString(DFA164_eofS);
		private static readonly char[] DFA164_min = DFA.UnpackEncodedStringToUnsignedChars(DFA164_minS);
		private static readonly char[] DFA164_max = DFA.UnpackEncodedStringToUnsignedChars(DFA164_maxS);
		private static readonly short[] DFA164_accept = DFA.UnpackEncodedString(DFA164_acceptS);
		private static readonly short[] DFA164_special = DFA.UnpackEncodedString(DFA164_specialS);
		private static readonly short[][] DFA164_transition;

		static DFA164()
		{
			int numStates = DFA164_transitionS.Length;
			DFA164_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA164_transition[i] = DFA.UnpackEncodedString(DFA164_transitionS[i]);
			}
		}

		public DFA164( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 164;
			this.eot = DFA164_eot;
			this.eof = DFA164_eof;
			this.min = DFA164_min;
			this.max = DFA164_max;
			this.accept = DFA164_accept;
			this.special = DFA164_special;
			this.transition = DFA164_transition;
		}

		public override string Description { get { return "()* loopback of 297:32: ( ( LT !)* '||' ( LT !)* logicalANDExpressionNoIn )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA167 : DFA
	{
		private const string DFA167_eotS =
			"\x5\xFFFF";
		private const string DFA167_eofS =
			"\x2\x2\x2\xFFFF\x1\x2";
		private const string DFA167_minS =
			"\x1\x5\x1\xD\x2\xFFFF\x1\xD";
		private const string DFA167_maxS =
			"\x2\x6F\x2\xFFFF\x1\x6F";
		private const string DFA167_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1\x1\xFFFF";
		private const string DFA167_specialS =
			"\x5\xFFFF}>";
		private static readonly string[] DFA167_transitionS =
			{
				"\x1\x2\x7\xFFFF\x1\x2\x3\xFFFF\x1\x2\x2\xFFFF\x1\x1\x2\x2\x1\xFFFF\x4"+
				"\x2\x3\xFFFF\x1\x2\x2\xFFFF\x3\x2\x6\xFFFF\x1\x2\x4\xFFFF\x1\x3\x2\xFFFF"+
				"\x1\x2\x2\xFFFF\x2\x2\x1\xFFFF\x3\x2\x4\xFFFF\x2\x2\xD\xFFFF\x2\x2\x2"+
				"\xFFFF\x2\x2\x1\xFFFF\x5\x2\x1\xFFFF\x3\x2\x2\xFFFF\xB\x2\x2\xFFFF\x2"+
				"\x2",
				"\x1\x2\x3\xFFFF\x1\x2\x2\xFFFF\x1\x4\x1\xFFFF\x1\x2\x1\xFFFF\x4\x2"+
				"\x3\xFFFF\x1\x2\x2\xFFFF\x3\x2\x6\xFFFF\x1\x2\x4\xFFFF\x1\x3\x2\xFFFF"+
				"\x1\x2\x2\xFFFF\x2\x2\x1\xFFFF\x3\x2\x4\xFFFF\x2\x2\xD\xFFFF\x2\x2\x2"+
				"\xFFFF\x2\x2\x1\xFFFF\x5\x2\x1\xFFFF\x3\x2\x2\xFFFF\xB\x2\x2\xFFFF\x2"+
				"\x2",
				"",
				"",
				"\x1\x2\x3\xFFFF\x1\x2\x2\xFFFF\x1\x4\x1\xFFFF\x1\x2\x1\xFFFF\x4\x2"+
				"\x3\xFFFF\x1\x2\x2\xFFFF\x3\x2\x6\xFFFF\x1\x2\x4\xFFFF\x1\x3\x2\xFFFF"+
				"\x1\x2\x2\xFFFF\x2\x2\x1\xFFFF\x3\x2\x4\xFFFF\x2\x2\xD\xFFFF\x2\x2\x2"+
				"\xFFFF\x2\x2\x1\xFFFF\x5\x2\x1\xFFFF\x3\x2\x2\xFFFF\xB\x2\x2\xFFFF\x2"+
				"\x2"
			};

		private static readonly short[] DFA167_eot = DFA.UnpackEncodedString(DFA167_eotS);
		private static readonly short[] DFA167_eof = DFA.UnpackEncodedString(DFA167_eofS);
		private static readonly char[] DFA167_min = DFA.UnpackEncodedStringToUnsignedChars(DFA167_minS);
		private static readonly char[] DFA167_max = DFA.UnpackEncodedStringToUnsignedChars(DFA167_maxS);
		private static readonly short[] DFA167_accept = DFA.UnpackEncodedString(DFA167_acceptS);
		private static readonly short[] DFA167_special = DFA.UnpackEncodedString(DFA167_specialS);
		private static readonly short[][] DFA167_transition;

		static DFA167()
		{
			int numStates = DFA167_transitionS.Length;
			DFA167_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA167_transition[i] = DFA.UnpackEncodedString(DFA167_transitionS[i]);
			}
		}

		public DFA167( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 167;
			this.eot = DFA167_eot;
			this.eof = DFA167_eof;
			this.min = DFA167_min;
			this.max = DFA167_max;
			this.accept = DFA167_accept;
			this.special = DFA167_special;
			this.transition = DFA167_transition;
		}

		public override string Description { get { return "()* loopback of 301:27: ( ( LT !)* '&&' ( LT !)* bitwiseORExpression )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA170 : DFA
	{
		private const string DFA170_eotS =
			"\x4\xFFFF";
		private const string DFA170_eofS =
			"\x1\x2\x3\xFFFF";
		private const string DFA170_minS =
			"\x2\x14\x2\xFFFF";
		private const string DFA170_maxS =
			"\x2\x6E\x2\xFFFF";
		private const string DFA170_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA170_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA170_transitionS =
			{
				"\x1\x1\x1B\xFFFF\x1\x3\x8\xFFFF\x1\x2\x6\xFFFF\x2\x2\xD\xFFFF\x1\x2"+
				"\xF\xFFFF\x1\x2\xE\xFFFF\x1\x2",
				"\x1\x1\x1B\xFFFF\x1\x3\x8\xFFFF\x1\x2\x6\xFFFF\x2\x2\xD\xFFFF\x1\x2"+
				"\xF\xFFFF\x1\x2\xE\xFFFF\x1\x2",
				"",
				""
			};

		private static readonly short[] DFA170_eot = DFA.UnpackEncodedString(DFA170_eotS);
		private static readonly short[] DFA170_eof = DFA.UnpackEncodedString(DFA170_eofS);
		private static readonly char[] DFA170_min = DFA.UnpackEncodedStringToUnsignedChars(DFA170_minS);
		private static readonly char[] DFA170_max = DFA.UnpackEncodedStringToUnsignedChars(DFA170_maxS);
		private static readonly short[] DFA170_accept = DFA.UnpackEncodedString(DFA170_acceptS);
		private static readonly short[] DFA170_special = DFA.UnpackEncodedString(DFA170_specialS);
		private static readonly short[][] DFA170_transition;

		static DFA170()
		{
			int numStates = DFA170_transitionS.Length;
			DFA170_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA170_transition[i] = DFA.UnpackEncodedString(DFA170_transitionS[i]);
			}
		}

		public DFA170( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 170;
			this.eot = DFA170_eot;
			this.eof = DFA170_eof;
			this.min = DFA170_min;
			this.max = DFA170_max;
			this.accept = DFA170_accept;
			this.special = DFA170_special;
			this.transition = DFA170_transition;
		}

		public override string Description { get { return "()* loopback of 305:31: ( ( LT !)* '&&' ( LT !)* bitwiseORExpressionNoIn )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA173 : DFA
	{
		private const string DFA173_eotS =
			"\x5\xFFFF";
		private const string DFA173_eofS =
			"\x2\x2\x2\xFFFF\x1\x2";
		private const string DFA173_minS =
			"\x1\x5\x1\xD\x2\xFFFF\x1\xD";
		private const string DFA173_maxS =
			"\x2\x6F\x2\xFFFF\x1\x6F";
		private const string DFA173_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1\x1\xFFFF";
		private const string DFA173_specialS =
			"\x5\xFFFF}>";
		private static readonly string[] DFA173_transitionS =
			{
				"\x1\x2\x7\xFFFF\x1\x2\x3\xFFFF\x1\x2\x2\xFFFF\x1\x1\x2\x2\x1\xFFFF\x4"+
				"\x2\x3\xFFFF\x1\x2\x2\xFFFF\x3\x2\x6\xFFFF\x1\x2\x4\xFFFF\x1\x2\x2\xFFFF"+
				"\x1\x2\x2\xFFFF\x2\x2\x1\xFFFF\x3\x2\x4\xFFFF\x2\x2\xD\xFFFF\x2\x2\x2"+
				"\xFFFF\x2\x2\x1\xFFFF\x5\x2\x1\xFFFF\x3\x2\x2\xFFFF\xB\x2\x1\x3\x1\xFFFF"+
				"\x2\x2",
				"\x1\x2\x3\xFFFF\x1\x2\x2\xFFFF\x1\x4\x1\xFFFF\x1\x2\x1\xFFFF\x4\x2"+
				"\x3\xFFFF\x1\x2\x2\xFFFF\x3\x2\x6\xFFFF\x1\x2\x4\xFFFF\x1\x2\x2\xFFFF"+
				"\x1\x2\x2\xFFFF\x2\x2\x1\xFFFF\x3\x2\x4\xFFFF\x2\x2\xD\xFFFF\x2\x2\x2"+
				"\xFFFF\x2\x2\x1\xFFFF\x5\x2\x1\xFFFF\x3\x2\x2\xFFFF\xB\x2\x1\x3\x1\xFFFF"+
				"\x2\x2",
				"",
				"",
				"\x1\x2\x3\xFFFF\x1\x2\x2\xFFFF\x1\x4\x1\xFFFF\x1\x2\x1\xFFFF\x4\x2"+
				"\x3\xFFFF\x1\x2\x2\xFFFF\x3\x2\x6\xFFFF\x1\x2\x4\xFFFF\x1\x2\x2\xFFFF"+
				"\x1\x2\x2\xFFFF\x2\x2\x1\xFFFF\x3\x2\x4\xFFFF\x2\x2\xD\xFFFF\x2\x2\x2"+
				"\xFFFF\x2\x2\x1\xFFFF\x5\x2\x1\xFFFF\x3\x2\x2\xFFFF\xB\x2\x1\x3\x1\xFFFF"+
				"\x2\x2"
			};

		private static readonly short[] DFA173_eot = DFA.UnpackEncodedString(DFA173_eotS);
		private static readonly short[] DFA173_eof = DFA.UnpackEncodedString(DFA173_eofS);
		private static readonly char[] DFA173_min = DFA.UnpackEncodedStringToUnsignedChars(DFA173_minS);
		private static readonly char[] DFA173_max = DFA.UnpackEncodedStringToUnsignedChars(DFA173_maxS);
		private static readonly short[] DFA173_accept = DFA.UnpackEncodedString(DFA173_acceptS);
		private static readonly short[] DFA173_special = DFA.UnpackEncodedString(DFA173_specialS);
		private static readonly short[][] DFA173_transition;

		static DFA173()
		{
			int numStates = DFA173_transitionS.Length;
			DFA173_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA173_transition[i] = DFA.UnpackEncodedString(DFA173_transitionS[i]);
			}
		}

		public DFA173( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 173;
			this.eot = DFA173_eot;
			this.eof = DFA173_eof;
			this.min = DFA173_min;
			this.max = DFA173_max;
			this.accept = DFA173_accept;
			this.special = DFA173_special;
			this.transition = DFA173_transition;
		}

		public override string Description { get { return "()* loopback of 309:28: ( ( LT !)* '|' ( LT !)* bitwiseXORExpression )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA176 : DFA
	{
		private const string DFA176_eotS =
			"\x4\xFFFF";
		private const string DFA176_eofS =
			"\x1\x2\x3\xFFFF";
		private const string DFA176_minS =
			"\x2\x14\x2\xFFFF";
		private const string DFA176_maxS =
			"\x2\x6E\x2\xFFFF";
		private const string DFA176_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA176_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA176_transitionS =
			{
				"\x1\x1\x1B\xFFFF\x1\x2\x8\xFFFF\x1\x2\x6\xFFFF\x2\x2\xD\xFFFF\x1\x2"+
				"\xF\xFFFF\x1\x2\xC\xFFFF\x1\x3\x1\xFFFF\x1\x2",
				"\x1\x1\x1B\xFFFF\x1\x2\x8\xFFFF\x1\x2\x6\xFFFF\x2\x2\xD\xFFFF\x1\x2"+
				"\xF\xFFFF\x1\x2\xC\xFFFF\x1\x3\x1\xFFFF\x1\x2",
				"",
				""
			};

		private static readonly short[] DFA176_eot = DFA.UnpackEncodedString(DFA176_eotS);
		private static readonly short[] DFA176_eof = DFA.UnpackEncodedString(DFA176_eofS);
		private static readonly char[] DFA176_min = DFA.UnpackEncodedStringToUnsignedChars(DFA176_minS);
		private static readonly char[] DFA176_max = DFA.UnpackEncodedStringToUnsignedChars(DFA176_maxS);
		private static readonly short[] DFA176_accept = DFA.UnpackEncodedString(DFA176_acceptS);
		private static readonly short[] DFA176_special = DFA.UnpackEncodedString(DFA176_specialS);
		private static readonly short[][] DFA176_transition;

		static DFA176()
		{
			int numStates = DFA176_transitionS.Length;
			DFA176_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA176_transition[i] = DFA.UnpackEncodedString(DFA176_transitionS[i]);
			}
		}

		public DFA176( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 176;
			this.eot = DFA176_eot;
			this.eof = DFA176_eof;
			this.min = DFA176_min;
			this.max = DFA176_max;
			this.accept = DFA176_accept;
			this.special = DFA176_special;
			this.transition = DFA176_transition;
		}

		public override string Description { get { return "()* loopback of 313:32: ( ( LT !)* '|' ( LT !)* bitwiseXORExpressionNoIn )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA179 : DFA
	{
		private const string DFA179_eotS =
			"\x5\xFFFF";
		private const string DFA179_eofS =
			"\x2\x2\x2\xFFFF\x1\x2";
		private const string DFA179_minS =
			"\x1\x5\x1\xD\x2\xFFFF\x1\xD";
		private const string DFA179_maxS =
			"\x2\x6F\x2\xFFFF\x1\x6F";
		private const string DFA179_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1\x1\xFFFF";
		private const string DFA179_specialS =
			"\x5\xFFFF}>";
		private static readonly string[] DFA179_transitionS =
			{
				"\x1\x2\x7\xFFFF\x1\x2\x3\xFFFF\x1\x2\x2\xFFFF\x1\x1\x2\x2\x1\xFFFF\x4"+
				"\x2\x3\xFFFF\x1\x2\x2\xFFFF\x3\x2\x6\xFFFF\x1\x2\x4\xFFFF\x1\x2\x2\xFFFF"+
				"\x1\x2\x2\xFFFF\x2\x2\x1\xFFFF\x3\x2\x4\xFFFF\x2\x2\xD\xFFFF\x2\x2\x1"+
				"\x3\x1\xFFFF\x2\x2\x1\xFFFF\x5\x2\x1\xFFFF\x3\x2\x2\xFFFF\xC\x2\x1\xFFFF"+
				"\x2\x2",
				"\x1\x2\x3\xFFFF\x1\x2\x2\xFFFF\x1\x4\x1\xFFFF\x1\x2\x1\xFFFF\x4\x2"+
				"\x3\xFFFF\x1\x2\x2\xFFFF\x3\x2\x6\xFFFF\x1\x2\x4\xFFFF\x1\x2\x2\xFFFF"+
				"\x1\x2\x2\xFFFF\x2\x2\x1\xFFFF\x3\x2\x4\xFFFF\x2\x2\xD\xFFFF\x2\x2\x1"+
				"\x3\x1\xFFFF\x2\x2\x1\xFFFF\x5\x2\x1\xFFFF\x3\x2\x2\xFFFF\xC\x2\x1\xFFFF"+
				"\x2\x2",
				"",
				"",
				"\x1\x2\x3\xFFFF\x1\x2\x2\xFFFF\x1\x4\x1\xFFFF\x1\x2\x1\xFFFF\x4\x2"+
				"\x3\xFFFF\x1\x2\x2\xFFFF\x3\x2\x6\xFFFF\x1\x2\x4\xFFFF\x1\x2\x2\xFFFF"+
				"\x1\x2\x2\xFFFF\x2\x2\x1\xFFFF\x3\x2\x4\xFFFF\x2\x2\xD\xFFFF\x2\x2\x1"+
				"\x3\x1\xFFFF\x2\x2\x1\xFFFF\x5\x2\x1\xFFFF\x3\x2\x2\xFFFF\xC\x2\x1\xFFFF"+
				"\x2\x2"
			};

		private static readonly short[] DFA179_eot = DFA.UnpackEncodedString(DFA179_eotS);
		private static readonly short[] DFA179_eof = DFA.UnpackEncodedString(DFA179_eofS);
		private static readonly char[] DFA179_min = DFA.UnpackEncodedStringToUnsignedChars(DFA179_minS);
		private static readonly char[] DFA179_max = DFA.UnpackEncodedStringToUnsignedChars(DFA179_maxS);
		private static readonly short[] DFA179_accept = DFA.UnpackEncodedString(DFA179_acceptS);
		private static readonly short[] DFA179_special = DFA.UnpackEncodedString(DFA179_specialS);
		private static readonly short[][] DFA179_transition;

		static DFA179()
		{
			int numStates = DFA179_transitionS.Length;
			DFA179_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA179_transition[i] = DFA.UnpackEncodedString(DFA179_transitionS[i]);
			}
		}

		public DFA179( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 179;
			this.eot = DFA179_eot;
			this.eof = DFA179_eof;
			this.min = DFA179_min;
			this.max = DFA179_max;
			this.accept = DFA179_accept;
			this.special = DFA179_special;
			this.transition = DFA179_transition;
		}

		public override string Description { get { return "()* loopback of 317:28: ( ( LT !)* '^' ( LT !)* bitwiseANDExpression )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA182 : DFA
	{
		private const string DFA182_eotS =
			"\x4\xFFFF";
		private const string DFA182_eofS =
			"\x1\x2\x3\xFFFF";
		private const string DFA182_minS =
			"\x2\x14\x2\xFFFF";
		private const string DFA182_maxS =
			"\x2\x6E\x2\xFFFF";
		private const string DFA182_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA182_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA182_transitionS =
			{
				"\x1\x1\x1B\xFFFF\x1\x2\x8\xFFFF\x1\x2\x6\xFFFF\x2\x2\xD\xFFFF\x1\x2"+
				"\x1\xFFFF\x1\x3\xD\xFFFF\x1\x2\xC\xFFFF\x1\x2\x1\xFFFF\x1\x2",
				"\x1\x1\x1B\xFFFF\x1\x2\x8\xFFFF\x1\x2\x6\xFFFF\x2\x2\xD\xFFFF\x1\x2"+
				"\x1\xFFFF\x1\x3\xD\xFFFF\x1\x2\xC\xFFFF\x1\x2\x1\xFFFF\x1\x2",
				"",
				""
			};

		private static readonly short[] DFA182_eot = DFA.UnpackEncodedString(DFA182_eotS);
		private static readonly short[] DFA182_eof = DFA.UnpackEncodedString(DFA182_eofS);
		private static readonly char[] DFA182_min = DFA.UnpackEncodedStringToUnsignedChars(DFA182_minS);
		private static readonly char[] DFA182_max = DFA.UnpackEncodedStringToUnsignedChars(DFA182_maxS);
		private static readonly short[] DFA182_accept = DFA.UnpackEncodedString(DFA182_acceptS);
		private static readonly short[] DFA182_special = DFA.UnpackEncodedString(DFA182_specialS);
		private static readonly short[][] DFA182_transition;

		static DFA182()
		{
			int numStates = DFA182_transitionS.Length;
			DFA182_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA182_transition[i] = DFA.UnpackEncodedString(DFA182_transitionS[i]);
			}
		}

		public DFA182( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 182;
			this.eot = DFA182_eot;
			this.eof = DFA182_eof;
			this.min = DFA182_min;
			this.max = DFA182_max;
			this.accept = DFA182_accept;
			this.special = DFA182_special;
			this.transition = DFA182_transition;
		}

		public override string Description { get { return "()* loopback of 321:32: ( ( LT !)* '^' ( LT !)* bitwiseANDExpressionNoIn )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA185 : DFA
	{
		private const string DFA185_eotS =
			"\x5\xFFFF";
		private const string DFA185_eofS =
			"\x2\x2\x2\xFFFF\x1\x2";
		private const string DFA185_minS =
			"\x1\x5\x1\xD\x2\xFFFF\x1\xD";
		private const string DFA185_maxS =
			"\x2\x6F\x2\xFFFF\x1\x6F";
		private const string DFA185_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1\x1\xFFFF";
		private const string DFA185_specialS =
			"\x5\xFFFF}>";
		private static readonly string[] DFA185_transitionS =
			{
				"\x1\x2\x7\xFFFF\x1\x2\x3\xFFFF\x1\x2\x2\xFFFF\x1\x1\x2\x2\x1\xFFFF\x4"+
				"\x2\x3\xFFFF\x1\x2\x2\xFFFF\x3\x2\x6\xFFFF\x1\x2\x4\xFFFF\x1\x2\x1\x3"+
				"\x1\xFFFF\x1\x2\x2\xFFFF\x2\x2\x1\xFFFF\x3\x2\x4\xFFFF\x2\x2\xD\xFFFF"+
				"\x3\x2\x1\xFFFF\x2\x2\x1\xFFFF\x5\x2\x1\xFFFF\x3\x2\x2\xFFFF\xC\x2\x1"+
				"\xFFFF\x2\x2",
				"\x1\x2\x3\xFFFF\x1\x2\x2\xFFFF\x1\x4\x1\xFFFF\x1\x2\x1\xFFFF\x4\x2"+
				"\x3\xFFFF\x1\x2\x2\xFFFF\x3\x2\x6\xFFFF\x1\x2\x4\xFFFF\x1\x2\x1\x3\x1"+
				"\xFFFF\x1\x2\x2\xFFFF\x2\x2\x1\xFFFF\x3\x2\x4\xFFFF\x2\x2\xD\xFFFF\x3"+
				"\x2\x1\xFFFF\x2\x2\x1\xFFFF\x5\x2\x1\xFFFF\x3\x2\x2\xFFFF\xC\x2\x1\xFFFF"+
				"\x2\x2",
				"",
				"",
				"\x1\x2\x3\xFFFF\x1\x2\x2\xFFFF\x1\x4\x1\xFFFF\x1\x2\x1\xFFFF\x4\x2"+
				"\x3\xFFFF\x1\x2\x2\xFFFF\x3\x2\x6\xFFFF\x1\x2\x4\xFFFF\x1\x2\x1\x3\x1"+
				"\xFFFF\x1\x2\x2\xFFFF\x2\x2\x1\xFFFF\x3\x2\x4\xFFFF\x2\x2\xD\xFFFF\x3"+
				"\x2\x1\xFFFF\x2\x2\x1\xFFFF\x5\x2\x1\xFFFF\x3\x2\x2\xFFFF\xC\x2\x1\xFFFF"+
				"\x2\x2"
			};

		private static readonly short[] DFA185_eot = DFA.UnpackEncodedString(DFA185_eotS);
		private static readonly short[] DFA185_eof = DFA.UnpackEncodedString(DFA185_eofS);
		private static readonly char[] DFA185_min = DFA.UnpackEncodedStringToUnsignedChars(DFA185_minS);
		private static readonly char[] DFA185_max = DFA.UnpackEncodedStringToUnsignedChars(DFA185_maxS);
		private static readonly short[] DFA185_accept = DFA.UnpackEncodedString(DFA185_acceptS);
		private static readonly short[] DFA185_special = DFA.UnpackEncodedString(DFA185_specialS);
		private static readonly short[][] DFA185_transition;

		static DFA185()
		{
			int numStates = DFA185_transitionS.Length;
			DFA185_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA185_transition[i] = DFA.UnpackEncodedString(DFA185_transitionS[i]);
			}
		}

		public DFA185( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 185;
			this.eot = DFA185_eot;
			this.eof = DFA185_eof;
			this.min = DFA185_min;
			this.max = DFA185_max;
			this.accept = DFA185_accept;
			this.special = DFA185_special;
			this.transition = DFA185_transition;
		}

		public override string Description { get { return "()* loopback of 325:26: ( ( LT !)* '&' ( LT !)* equalityExpression )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA188 : DFA
	{
		private const string DFA188_eotS =
			"\x4\xFFFF";
		private const string DFA188_eofS =
			"\x1\x2\x3\xFFFF";
		private const string DFA188_minS =
			"\x2\x14\x2\xFFFF";
		private const string DFA188_maxS =
			"\x2\x6E\x2\xFFFF";
		private const string DFA188_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA188_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA188_transitionS =
			{
				"\x1\x1\x1B\xFFFF\x1\x2\x1\x3\x7\xFFFF\x1\x2\x6\xFFFF\x2\x2\xD\xFFFF"+
				"\x1\x2\x1\xFFFF\x1\x2\xD\xFFFF\x1\x2\xC\xFFFF\x1\x2\x1\xFFFF\x1\x2",
				"\x1\x1\x1B\xFFFF\x1\x2\x1\x3\x7\xFFFF\x1\x2\x6\xFFFF\x2\x2\xD\xFFFF"+
				"\x1\x2\x1\xFFFF\x1\x2\xD\xFFFF\x1\x2\xC\xFFFF\x1\x2\x1\xFFFF\x1\x2",
				"",
				""
			};

		private static readonly short[] DFA188_eot = DFA.UnpackEncodedString(DFA188_eotS);
		private static readonly short[] DFA188_eof = DFA.UnpackEncodedString(DFA188_eofS);
		private static readonly char[] DFA188_min = DFA.UnpackEncodedStringToUnsignedChars(DFA188_minS);
		private static readonly char[] DFA188_max = DFA.UnpackEncodedStringToUnsignedChars(DFA188_maxS);
		private static readonly short[] DFA188_accept = DFA.UnpackEncodedString(DFA188_acceptS);
		private static readonly short[] DFA188_special = DFA.UnpackEncodedString(DFA188_specialS);
		private static readonly short[][] DFA188_transition;

		static DFA188()
		{
			int numStates = DFA188_transitionS.Length;
			DFA188_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA188_transition[i] = DFA.UnpackEncodedString(DFA188_transitionS[i]);
			}
		}

		public DFA188( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 188;
			this.eot = DFA188_eot;
			this.eof = DFA188_eof;
			this.min = DFA188_min;
			this.max = DFA188_max;
			this.accept = DFA188_accept;
			this.special = DFA188_special;
			this.transition = DFA188_transition;
		}

		public override string Description { get { return "()* loopback of 329:30: ( ( LT !)* '&' ( LT !)* equalityExpressionNoIn )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA191 : DFA
	{
		private const string DFA191_eotS =
			"\x5\xFFFF";
		private const string DFA191_eofS =
			"\x2\x2\x2\xFFFF\x1\x2";
		private const string DFA191_minS =
			"\x1\x5\x1\xD\x2\xFFFF\x1\xD";
		private const string DFA191_maxS =
			"\x2\x6F\x2\xFFFF\x1\x6F";
		private const string DFA191_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1\x1\xFFFF";
		private const string DFA191_specialS =
			"\x5\xFFFF}>";
		private static readonly string[] DFA191_transitionS =
			{
				"\x1\x2\x7\xFFFF\x1\x2\x3\xFFFF\x1\x2\x2\xFFFF\x1\x1\x2\x2\x1\xFFFF\x4"+
				"\x2\x3\xFFFF\x1\x2\x2\xFFFF\x3\x2\x6\xFFFF\x1\x2\x2\x3\x2\xFFFF\x2\x2"+
				"\x1\xFFFF\x1\x2\x2\xFFFF\x2\x2\x1\xFFFF\x3\x2\x4\xFFFF\x2\x2\x5\xFFFF"+
				"\x2\x3\x6\xFFFF\x3\x2\x1\xFFFF\x2\x2\x1\xFFFF\x5\x2\x1\xFFFF\x3\x2\x2"+
				"\xFFFF\xC\x2\x1\xFFFF\x2\x2",
				"\x1\x2\x3\xFFFF\x1\x2\x2\xFFFF\x1\x4\x1\xFFFF\x1\x2\x1\xFFFF\x4\x2"+
				"\x3\xFFFF\x1\x2\x2\xFFFF\x3\x2\x6\xFFFF\x1\x2\x2\x3\x2\xFFFF\x2\x2\x1"+
				"\xFFFF\x1\x2\x2\xFFFF\x2\x2\x1\xFFFF\x3\x2\x4\xFFFF\x2\x2\x5\xFFFF\x2"+
				"\x3\x6\xFFFF\x3\x2\x1\xFFFF\x2\x2\x1\xFFFF\x5\x2\x1\xFFFF\x3\x2\x2\xFFFF"+
				"\xC\x2\x1\xFFFF\x2\x2",
				"",
				"",
				"\x1\x2\x3\xFFFF\x1\x2\x2\xFFFF\x1\x4\x1\xFFFF\x1\x2\x1\xFFFF\x4\x2"+
				"\x3\xFFFF\x1\x2\x2\xFFFF\x3\x2\x6\xFFFF\x1\x2\x2\x3\x2\xFFFF\x2\x2\x1"+
				"\xFFFF\x1\x2\x2\xFFFF\x2\x2\x1\xFFFF\x3\x2\x4\xFFFF\x2\x2\x5\xFFFF\x2"+
				"\x3\x6\xFFFF\x3\x2\x1\xFFFF\x2\x2\x1\xFFFF\x5\x2\x1\xFFFF\x3\x2\x2\xFFFF"+
				"\xC\x2\x1\xFFFF\x2\x2"
			};

		private static readonly short[] DFA191_eot = DFA.UnpackEncodedString(DFA191_eotS);
		private static readonly short[] DFA191_eof = DFA.UnpackEncodedString(DFA191_eofS);
		private static readonly char[] DFA191_min = DFA.UnpackEncodedStringToUnsignedChars(DFA191_minS);
		private static readonly char[] DFA191_max = DFA.UnpackEncodedStringToUnsignedChars(DFA191_maxS);
		private static readonly short[] DFA191_accept = DFA.UnpackEncodedString(DFA191_acceptS);
		private static readonly short[] DFA191_special = DFA.UnpackEncodedString(DFA191_specialS);
		private static readonly short[][] DFA191_transition;

		static DFA191()
		{
			int numStates = DFA191_transitionS.Length;
			DFA191_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA191_transition[i] = DFA.UnpackEncodedString(DFA191_transitionS[i]);
			}
		}

		public DFA191( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 191;
			this.eot = DFA191_eot;
			this.eof = DFA191_eof;
			this.min = DFA191_min;
			this.max = DFA191_max;
			this.accept = DFA191_accept;
			this.special = DFA191_special;
			this.transition = DFA191_transition;
		}

		public override string Description { get { return "()* loopback of 333:28: ( ( LT !)* ( '==' | '!=' | '===' | '!==' ) ( LT !)* relationalExpression )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA194 : DFA
	{
		private const string DFA194_eotS =
			"\x4\xFFFF";
		private const string DFA194_eofS =
			"\x1\x2\x3\xFFFF";
		private const string DFA194_minS =
			"\x2\x14\x2\xFFFF";
		private const string DFA194_maxS =
			"\x2\x6E\x2\xFFFF";
		private const string DFA194_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA194_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA194_transitionS =
			{
				"\x1\x1\x17\xFFFF\x2\x3\x2\xFFFF\x2\x2\x7\xFFFF\x1\x2\x6\xFFFF\x2\x2"+
				"\x5\xFFFF\x2\x3\x6\xFFFF\x1\x2\x1\xFFFF\x1\x2\xD\xFFFF\x1\x2\xC\xFFFF"+
				"\x1\x2\x1\xFFFF\x1\x2",
				"\x1\x1\x17\xFFFF\x2\x3\x2\xFFFF\x2\x2\x7\xFFFF\x1\x2\x6\xFFFF\x2\x2"+
				"\x5\xFFFF\x2\x3\x6\xFFFF\x1\x2\x1\xFFFF\x1\x2\xD\xFFFF\x1\x2\xC\xFFFF"+
				"\x1\x2\x1\xFFFF\x1\x2",
				"",
				""
			};

		private static readonly short[] DFA194_eot = DFA.UnpackEncodedString(DFA194_eotS);
		private static readonly short[] DFA194_eof = DFA.UnpackEncodedString(DFA194_eofS);
		private static readonly char[] DFA194_min = DFA.UnpackEncodedStringToUnsignedChars(DFA194_minS);
		private static readonly char[] DFA194_max = DFA.UnpackEncodedStringToUnsignedChars(DFA194_maxS);
		private static readonly short[] DFA194_accept = DFA.UnpackEncodedString(DFA194_acceptS);
		private static readonly short[] DFA194_special = DFA.UnpackEncodedString(DFA194_specialS);
		private static readonly short[][] DFA194_transition;

		static DFA194()
		{
			int numStates = DFA194_transitionS.Length;
			DFA194_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA194_transition[i] = DFA.UnpackEncodedString(DFA194_transitionS[i]);
			}
		}

		public DFA194( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 194;
			this.eot = DFA194_eot;
			this.eof = DFA194_eof;
			this.min = DFA194_min;
			this.max = DFA194_max;
			this.accept = DFA194_accept;
			this.special = DFA194_special;
			this.transition = DFA194_transition;
		}

		public override string Description { get { return "()* loopback of 337:32: ( ( LT !)* ( '==' | '!=' | '===' | '!==' ) ( LT !)* relationalExpressionNoIn )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA197 : DFA
	{
		private const string DFA197_eotS =
			"\x5\xFFFF";
		private const string DFA197_eofS =
			"\x2\x2\x2\xFFFF\x1\x2";
		private const string DFA197_minS =
			"\x1\x5\x1\xD\x2\xFFFF\x1\xD";
		private const string DFA197_maxS =
			"\x2\x6F\x2\xFFFF\x1\x6F";
		private const string DFA197_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1\x1\xFFFF";
		private const string DFA197_specialS =
			"\x5\xFFFF}>";
		private static readonly string[] DFA197_transitionS =
			{
				"\x1\x2\x7\xFFFF\x1\x2\x3\xFFFF\x1\x2\x2\xFFFF\x1\x1\x2\x2\x1\xFFFF\x4"+
				"\x2\x3\xFFFF\x1\x2\x2\xFFFF\x3\x2\x6\xFFFF\x3\x2\x2\xFFFF\x2\x2\x1\xFFFF"+
				"\x1\x2\x2\xFFFF\x2\x2\x1\xFFFF\x3\x2\x4\xFFFF\x2\x2\x1\x3\x2\xFFFF\x1"+
				"\x3\x1\xFFFF\x2\x2\x2\x3\x4\xFFFF\x3\x2\x1\xFFFF\x2\x2\x1\xFFFF\x5\x2"+
				"\x1\xFFFF\x3\x2\x2\x3\xC\x2\x1\xFFFF\x2\x2",
				"\x1\x2\x3\xFFFF\x1\x2\x2\xFFFF\x1\x4\x1\xFFFF\x1\x2\x1\xFFFF\x4\x2"+
				"\x3\xFFFF\x1\x2\x2\xFFFF\x3\x2\x6\xFFFF\x3\x2\x2\xFFFF\x2\x2\x1\xFFFF"+
				"\x1\x2\x2\xFFFF\x2\x2\x1\xFFFF\x3\x2\x4\xFFFF\x2\x2\x1\x3\x2\xFFFF\x1"+
				"\x3\x1\xFFFF\x2\x2\x2\x3\x4\xFFFF\x3\x2\x1\xFFFF\x2\x2\x1\xFFFF\x5\x2"+
				"\x1\xFFFF\x3\x2\x2\x3\xC\x2\x1\xFFFF\x2\x2",
				"",
				"",
				"\x1\x2\x3\xFFFF\x1\x2\x2\xFFFF\x1\x4\x1\xFFFF\x1\x2\x1\xFFFF\x4\x2"+
				"\x3\xFFFF\x1\x2\x2\xFFFF\x3\x2\x6\xFFFF\x3\x2\x2\xFFFF\x2\x2\x1\xFFFF"+
				"\x1\x2\x2\xFFFF\x2\x2\x1\xFFFF\x3\x2\x4\xFFFF\x2\x2\x1\x3\x2\xFFFF\x1"+
				"\x3\x1\xFFFF\x2\x2\x2\x3\x4\xFFFF\x3\x2\x1\xFFFF\x2\x2\x1\xFFFF\x5\x2"+
				"\x1\xFFFF\x3\x2\x2\x3\xC\x2\x1\xFFFF\x2\x2"
			};

		private static readonly short[] DFA197_eot = DFA.UnpackEncodedString(DFA197_eotS);
		private static readonly short[] DFA197_eof = DFA.UnpackEncodedString(DFA197_eofS);
		private static readonly char[] DFA197_min = DFA.UnpackEncodedStringToUnsignedChars(DFA197_minS);
		private static readonly char[] DFA197_max = DFA.UnpackEncodedStringToUnsignedChars(DFA197_maxS);
		private static readonly short[] DFA197_accept = DFA.UnpackEncodedString(DFA197_acceptS);
		private static readonly short[] DFA197_special = DFA.UnpackEncodedString(DFA197_specialS);
		private static readonly short[][] DFA197_transition;

		static DFA197()
		{
			int numStates = DFA197_transitionS.Length;
			DFA197_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA197_transition[i] = DFA.UnpackEncodedString(DFA197_transitionS[i]);
			}
		}

		public DFA197( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 197;
			this.eot = DFA197_eot;
			this.eof = DFA197_eof;
			this.min = DFA197_min;
			this.max = DFA197_max;
			this.accept = DFA197_accept;
			this.special = DFA197_special;
			this.transition = DFA197_transition;
		}

		public override string Description { get { return "()* loopback of 341:23: ( ( LT !)* ( '<' | '>' | '<=' | '>=' | 'instanceof' | 'in' ) ( LT !)* shiftExpression )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA200 : DFA
	{
		private const string DFA200_eotS =
			"\x4\xFFFF";
		private const string DFA200_eofS =
			"\x1\x2\x3\xFFFF";
		private const string DFA200_minS =
			"\x2\x14\x2\xFFFF";
		private const string DFA200_maxS =
			"\x2\x6E\x2\xFFFF";
		private const string DFA200_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA200_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA200_transitionS =
			{
				"\x1\x1\x17\xFFFF\x2\x2\x2\xFFFF\x2\x2\x7\xFFFF\x1\x2\x6\xFFFF\x2\x2"+
				"\x1\x3\x2\xFFFF\x1\x3\x1\xFFFF\x2\x2\x2\x3\x4\xFFFF\x1\x2\x1\xFFFF\x1"+
				"\x2\xD\xFFFF\x1\x2\x1\x3\xB\xFFFF\x1\x2\x1\xFFFF\x1\x2",
				"\x1\x1\x17\xFFFF\x2\x2\x2\xFFFF\x2\x2\x7\xFFFF\x1\x2\x6\xFFFF\x2\x2"+
				"\x1\x3\x2\xFFFF\x1\x3\x1\xFFFF\x2\x2\x2\x3\x4\xFFFF\x1\x2\x1\xFFFF\x1"+
				"\x2\xD\xFFFF\x1\x2\x1\x3\xB\xFFFF\x1\x2\x1\xFFFF\x1\x2",
				"",
				""
			};

		private static readonly short[] DFA200_eot = DFA.UnpackEncodedString(DFA200_eotS);
		private static readonly short[] DFA200_eof = DFA.UnpackEncodedString(DFA200_eofS);
		private static readonly char[] DFA200_min = DFA.UnpackEncodedStringToUnsignedChars(DFA200_minS);
		private static readonly char[] DFA200_max = DFA.UnpackEncodedStringToUnsignedChars(DFA200_maxS);
		private static readonly short[] DFA200_accept = DFA.UnpackEncodedString(DFA200_acceptS);
		private static readonly short[] DFA200_special = DFA.UnpackEncodedString(DFA200_specialS);
		private static readonly short[][] DFA200_transition;

		static DFA200()
		{
			int numStates = DFA200_transitionS.Length;
			DFA200_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA200_transition[i] = DFA.UnpackEncodedString(DFA200_transitionS[i]);
			}
		}

		public DFA200( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 200;
			this.eot = DFA200_eot;
			this.eof = DFA200_eof;
			this.min = DFA200_min;
			this.max = DFA200_max;
			this.accept = DFA200_accept;
			this.special = DFA200_special;
			this.transition = DFA200_transition;
		}

		public override string Description { get { return "()* loopback of 345:23: ( ( LT !)* ( '<' | '>' | '<=' | '>=' | 'instanceof' ) ( LT !)* shiftExpression )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA203 : DFA
	{
		private const string DFA203_eotS =
			"\x5\xFFFF";
		private const string DFA203_eofS =
			"\x2\x2\x2\xFFFF\x1\x2";
		private const string DFA203_minS =
			"\x1\x5\x1\xD\x2\xFFFF\x1\xD";
		private const string DFA203_maxS =
			"\x2\x6F\x2\xFFFF\x1\x6F";
		private const string DFA203_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1\x1\xFFFF";
		private const string DFA203_specialS =
			"\x5\xFFFF}>";
		private static readonly string[] DFA203_transitionS =
			{
				"\x1\x2\x7\xFFFF\x1\x2\x3\xFFFF\x1\x2\x2\xFFFF\x1\x1\x2\x2\x1\xFFFF\x4"+
				"\x2\x3\xFFFF\x1\x2\x2\xFFFF\x3\x2\x6\xFFFF\x3\x2\x2\xFFFF\x2\x2\x1\xFFFF"+
				"\x1\x2\x2\xFFFF\x2\x2\x1\xFFFF\x3\x2\x4\xFFFF\x3\x2\x1\x3\x1\xFFFF\x1"+
				"\x2\x1\xFFFF\x4\x2\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x3\x2\x1\xFFFF\x2\x2"+
				"\x1\xFFFF\x5\x2\x1\xFFFF\x11\x2\x1\xFFFF\x2\x2",
				"\x1\x2\x3\xFFFF\x1\x2\x2\xFFFF\x1\x4\x1\xFFFF\x1\x2\x1\xFFFF\x4\x2"+
				"\x3\xFFFF\x1\x2\x2\xFFFF\x3\x2\x6\xFFFF\x3\x2\x2\xFFFF\x2\x2\x1\xFFFF"+
				"\x1\x2\x2\xFFFF\x2\x2\x1\xFFFF\x3\x2\x4\xFFFF\x3\x2\x1\x3\x1\xFFFF\x1"+
				"\x2\x1\xFFFF\x4\x2\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x3\x2\x1\xFFFF\x2\x2"+
				"\x1\xFFFF\x5\x2\x1\xFFFF\x11\x2\x1\xFFFF\x2\x2",
				"",
				"",
				"\x1\x2\x3\xFFFF\x1\x2\x2\xFFFF\x1\x4\x1\xFFFF\x1\x2\x1\xFFFF\x4\x2"+
				"\x3\xFFFF\x1\x2\x2\xFFFF\x3\x2\x6\xFFFF\x3\x2\x2\xFFFF\x2\x2\x1\xFFFF"+
				"\x1\x2\x2\xFFFF\x2\x2\x1\xFFFF\x3\x2\x4\xFFFF\x3\x2\x1\x3\x1\xFFFF\x1"+
				"\x2\x1\xFFFF\x4\x2\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x3\x2\x1\xFFFF\x2\x2"+
				"\x1\xFFFF\x5\x2\x1\xFFFF\x11\x2\x1\xFFFF\x2\x2"
			};

		private static readonly short[] DFA203_eot = DFA.UnpackEncodedString(DFA203_eotS);
		private static readonly short[] DFA203_eof = DFA.UnpackEncodedString(DFA203_eofS);
		private static readonly char[] DFA203_min = DFA.UnpackEncodedStringToUnsignedChars(DFA203_minS);
		private static readonly char[] DFA203_max = DFA.UnpackEncodedStringToUnsignedChars(DFA203_maxS);
		private static readonly short[] DFA203_accept = DFA.UnpackEncodedString(DFA203_acceptS);
		private static readonly short[] DFA203_special = DFA.UnpackEncodedString(DFA203_specialS);
		private static readonly short[][] DFA203_transition;

		static DFA203()
		{
			int numStates = DFA203_transitionS.Length;
			DFA203_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA203_transition[i] = DFA.UnpackEncodedString(DFA203_transitionS[i]);
			}
		}

		public DFA203( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 203;
			this.eot = DFA203_eot;
			this.eof = DFA203_eof;
			this.min = DFA203_min;
			this.max = DFA203_max;
			this.accept = DFA203_accept;
			this.special = DFA203_special;
			this.transition = DFA203_transition;
		}

		public override string Description { get { return "()* loopback of 349:26: ( ( LT !)* ( '<<' | '>>' | '>>>' ) ( LT !)* additiveExpression )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA209 : DFA
	{
		private const string DFA209_eotS =
			"\x5\xFFFF";
		private const string DFA209_eofS =
			"\x2\x2\x2\xFFFF\x1\x2";
		private const string DFA209_minS =
			"\x1\x5\x1\xD\x2\xFFFF\x1\xD";
		private const string DFA209_maxS =
			"\x2\x6F\x2\xFFFF\x1\x6F";
		private const string DFA209_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1\x1\xFFFF";
		private const string DFA209_specialS =
			"\x5\xFFFF}>";
		private static readonly string[] DFA209_transitionS =
			{
				"\x1\x2\x7\xFFFF\x1\x2\x3\xFFFF\x1\x2\x2\xFFFF\x1\x1\x2\x2\x1\xFFFF\x4"+
				"\x2\x3\xFFFF\x1\x2\x2\xFFFF\x3\x2\x6\xFFFF\x3\x2\x1\x3\x1\xFFFF\x2\x2"+
				"\x1\xFFFF\x1\x2\x1\x3\x1\xFFFF\x2\x2\x1\xFFFF\x3\x2\x2\xFFFF\x1\x3\x1"+
				"\xFFFF\x4\x2\x1\xFFFF\x1\x2\x1\xFFFF\x5\x2\x1\xFFFF\x1\x2\x1\xFFFF\x3"+
				"\x2\x1\xFFFF\x2\x2\x1\xFFFF\x5\x2\x1\xFFFF\x11\x2\x1\xFFFF\x2\x2",
				"\x1\x2\x3\xFFFF\x1\x2\x2\xFFFF\x1\x4\x1\xFFFF\x1\x2\x1\xFFFF\x4\x2"+
				"\x3\xFFFF\x1\x2\x2\xFFFF\x3\x2\x6\xFFFF\x3\x2\x1\x3\x1\xFFFF\x2\x2\x1"+
				"\xFFFF\x1\x2\x1\x3\x1\xFFFF\x2\x2\x1\xFFFF\x3\x2\x2\xFFFF\x1\x3\x1\xFFFF"+
				"\x4\x2\x1\xFFFF\x1\x2\x1\xFFFF\x5\x2\x1\xFFFF\x1\x2\x1\xFFFF\x3\x2\x1"+
				"\xFFFF\x2\x2\x1\xFFFF\x5\x2\x1\xFFFF\x11\x2\x1\xFFFF\x2\x2",
				"",
				"",
				"\x1\x2\x3\xFFFF\x1\x2\x2\xFFFF\x1\x4\x1\xFFFF\x1\x2\x1\xFFFF\x4\x2"+
				"\x3\xFFFF\x1\x2\x2\xFFFF\x3\x2\x6\xFFFF\x3\x2\x1\x3\x1\xFFFF\x2\x2\x1"+
				"\xFFFF\x1\x2\x1\x3\x1\xFFFF\x2\x2\x1\xFFFF\x3\x2\x2\xFFFF\x1\x3\x1\xFFFF"+
				"\x4\x2\x1\xFFFF\x1\x2\x1\xFFFF\x5\x2\x1\xFFFF\x1\x2\x1\xFFFF\x3\x2\x1"+
				"\xFFFF\x2\x2\x1\xFFFF\x5\x2\x1\xFFFF\x11\x2\x1\xFFFF\x2\x2"
			};

		private static readonly short[] DFA209_eot = DFA.UnpackEncodedString(DFA209_eotS);
		private static readonly short[] DFA209_eof = DFA.UnpackEncodedString(DFA209_eofS);
		private static readonly char[] DFA209_min = DFA.UnpackEncodedStringToUnsignedChars(DFA209_minS);
		private static readonly char[] DFA209_max = DFA.UnpackEncodedStringToUnsignedChars(DFA209_maxS);
		private static readonly short[] DFA209_accept = DFA.UnpackEncodedString(DFA209_acceptS);
		private static readonly short[] DFA209_special = DFA.UnpackEncodedString(DFA209_specialS);
		private static readonly short[][] DFA209_transition;

		static DFA209()
		{
			int numStates = DFA209_transitionS.Length;
			DFA209_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA209_transition[i] = DFA.UnpackEncodedString(DFA209_transitionS[i]);
			}
		}

		public DFA209( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 209;
			this.eot = DFA209_eot;
			this.eof = DFA209_eof;
			this.min = DFA209_min;
			this.max = DFA209_max;
			this.accept = DFA209_accept;
			this.special = DFA209_special;
			this.transition = DFA209_transition;
		}

		public override string Description { get { return "()* loopback of 357:23: ( ( LT !)* ( '*' | '/' | '%' ) ( LT !)* unaryExpression )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA220 : DFA
	{
		private const string DFA220_eotS =
			"\x4\xFFFF";
		private const string DFA220_eofS =
			"\x4\xFFFF";
		private const string DFA220_minS =
			"\x2\x14\x2\xFFFF";
		private const string DFA220_maxS =
			"\x2\x39\x2\xFFFF";
		private const string DFA220_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA220_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA220_transitionS =
			{
				"\x1\x1\x5\xFFFF\x1\x2\x1E\xFFFF\x1\x3",
				"\x1\x1\x5\xFFFF\x1\x2\x1E\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA220_eot = DFA.UnpackEncodedString(DFA220_eotS);
		private static readonly short[] DFA220_eof = DFA.UnpackEncodedString(DFA220_eofS);
		private static readonly char[] DFA220_min = DFA.UnpackEncodedStringToUnsignedChars(DFA220_minS);
		private static readonly char[] DFA220_max = DFA.UnpackEncodedStringToUnsignedChars(DFA220_maxS);
		private static readonly short[] DFA220_accept = DFA.UnpackEncodedString(DFA220_acceptS);
		private static readonly short[] DFA220_special = DFA.UnpackEncodedString(DFA220_specialS);
		private static readonly short[][] DFA220_transition;

		static DFA220()
		{
			int numStates = DFA220_transitionS.Length;
			DFA220_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA220_transition[i] = DFA.UnpackEncodedString(DFA220_transitionS[i]);
			}
		}

		public DFA220( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 220;
			this.eot = DFA220_eot;
			this.eof = DFA220_eof;
			this.min = DFA220_min;
			this.max = DFA220_max;
			this.accept = DFA220_accept;
			this.special = DFA220_special;
			this.transition = DFA220_transition;
		}

		public override string Description { get { return "()* loopback of 380:38: ( ( LT !)* ',' ( ( LT !)* assignmentExpression )? )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA219 : DFA
	{
		private const string DFA219_eotS =
			"\x4\xFFFF";
		private const string DFA219_eofS =
			"\x4\xFFFF";
		private const string DFA219_minS =
			"\x2\xD\x2\xFFFF";
		private const string DFA219_maxS =
			"\x2\x6F\x2\xFFFF";
		private const string DFA219_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA219_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA219_transitionS =
			{
				"\x1\x2\x3\xFFFF\x1\x2\x2\xFFFF\x1\x1\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1"+
				"\xFFFF\x1\x3\x4\xFFFF\x1\x2\x2\xFFFF\x3\x2\x6\xFFFF\x1\x2\x7\xFFFF\x1"+
				"\x2\x2\xFFFF\x2\x2\x1\xFFFF\x1\x3\x2\x2\x14\xFFFF\x1\x2\x7\xFFFF\x1"+
				"\x2\x4\xFFFF\x1\x2\x3\xFFFF\x1\x2\x4\xFFFF\x1\x2\x1\xFFFF\x1\x2\x2\xFFFF"+
				"\x1\x2\x3\xFFFF\x1\x2",
				"\x1\x2\x3\xFFFF\x1\x2\x2\xFFFF\x1\x1\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2"+
				"\x1\xFFFF\x1\x3\x4\xFFFF\x1\x2\x2\xFFFF\x3\x2\x6\xFFFF\x1\x2\x7\xFFFF"+
				"\x1\x2\x2\xFFFF\x2\x2\x1\xFFFF\x1\x3\x2\x2\x14\xFFFF\x1\x2\x7\xFFFF"+
				"\x1\x2\x4\xFFFF\x1\x2\x3\xFFFF\x1\x2\x4\xFFFF\x1\x2\x1\xFFFF\x1\x2\x2"+
				"\xFFFF\x1\x2\x3\xFFFF\x1\x2",
				"",
				""
			};

		private static readonly short[] DFA219_eot = DFA.UnpackEncodedString(DFA219_eotS);
		private static readonly short[] DFA219_eof = DFA.UnpackEncodedString(DFA219_eofS);
		private static readonly char[] DFA219_min = DFA.UnpackEncodedStringToUnsignedChars(DFA219_minS);
		private static readonly char[] DFA219_max = DFA.UnpackEncodedStringToUnsignedChars(DFA219_maxS);
		private static readonly short[] DFA219_accept = DFA.UnpackEncodedString(DFA219_acceptS);
		private static readonly short[] DFA219_special = DFA.UnpackEncodedString(DFA219_specialS);
		private static readonly short[][] DFA219_transition;

		static DFA219()
		{
			int numStates = DFA219_transitionS.Length;
			DFA219_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA219_transition[i] = DFA.UnpackEncodedString(DFA219_transitionS[i]);
			}
		}

		public DFA219( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 219;
			this.eot = DFA219_eot;
			this.eof = DFA219_eof;
			this.min = DFA219_min;
			this.max = DFA219_max;
			this.accept = DFA219_accept;
			this.special = DFA219_special;
			this.transition = DFA219_transition;
		}

		public override string Description { get { return "380:48: ( ( LT !)* assignmentExpression )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA227 : DFA
	{
		private const string DFA227_eotS =
			"\x4\xFFFF";
		private const string DFA227_eofS =
			"\x4\xFFFF";
		private const string DFA227_minS =
			"\x2\x14\x2\xFFFF";
		private const string DFA227_maxS =
			"\x2\x39\x2\xFFFF";
		private const string DFA227_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA227_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA227_transitionS =
			{
				"\x1\x1\x4\xFFFF\x1\x2\x1F\xFFFF\x1\x3",
				"\x1\x1\x4\xFFFF\x1\x2\x1F\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA227_eot = DFA.UnpackEncodedString(DFA227_eotS);
		private static readonly short[] DFA227_eof = DFA.UnpackEncodedString(DFA227_eofS);
		private static readonly char[] DFA227_min = DFA.UnpackEncodedStringToUnsignedChars(DFA227_minS);
		private static readonly char[] DFA227_max = DFA.UnpackEncodedStringToUnsignedChars(DFA227_maxS);
		private static readonly short[] DFA227_accept = DFA.UnpackEncodedString(DFA227_acceptS);
		private static readonly short[] DFA227_special = DFA.UnpackEncodedString(DFA227_specialS);
		private static readonly short[][] DFA227_transition;

		static DFA227()
		{
			int numStates = DFA227_transitionS.Length;
			DFA227_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA227_transition[i] = DFA.UnpackEncodedString(DFA227_transitionS[i]);
			}
		}

		public DFA227( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 227;
			this.eot = DFA227_eot;
			this.eof = DFA227_eof;
			this.min = DFA227_min;
			this.max = DFA227_max;
			this.accept = DFA227_accept;
			this.special = DFA227_special;
			this.transition = DFA227_transition;
		}

		public override string Description { get { return "()* loopback of 385:38: ( ( LT !)* ',' ( ( LT !)* propertyNameAndValue )? )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA226 : DFA
	{
		private const string DFA226_eotS =
			"\x4\xFFFF";
		private const string DFA226_eofS =
			"\x4\xFFFF";
		private const string DFA226_minS =
			"\x2\x11\x2\xFFFF";
		private const string DFA226_maxS =
			"\x2\x39\x2\xFFFF";
		private const string DFA226_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA226_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA226_transitionS =
			{
				"\x1\x2\x2\xFFFF\x1\x1\x3\xFFFF\x1\x2\x1\x3\x8\xFFFF\x1\x2\x16\xFFFF"+
				"\x1\x3",
				"\x1\x2\x2\xFFFF\x1\x1\x3\xFFFF\x1\x2\x1\x3\x8\xFFFF\x1\x2\x16\xFFFF"+
				"\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA226_eot = DFA.UnpackEncodedString(DFA226_eotS);
		private static readonly short[] DFA226_eof = DFA.UnpackEncodedString(DFA226_eofS);
		private static readonly char[] DFA226_min = DFA.UnpackEncodedStringToUnsignedChars(DFA226_minS);
		private static readonly char[] DFA226_max = DFA.UnpackEncodedStringToUnsignedChars(DFA226_maxS);
		private static readonly short[] DFA226_accept = DFA.UnpackEncodedString(DFA226_acceptS);
		private static readonly short[] DFA226_special = DFA.UnpackEncodedString(DFA226_specialS);
		private static readonly short[][] DFA226_transition;

		static DFA226()
		{
			int numStates = DFA226_transitionS.Length;
			DFA226_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA226_transition[i] = DFA.UnpackEncodedString(DFA226_transitionS[i]);
			}
		}

		public DFA226( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 226;
			this.eot = DFA226_eot;
			this.eof = DFA226_eof;
			this.min = DFA226_min;
			this.max = DFA226_max;
			this.accept = DFA226_accept;
			this.special = DFA226_special;
			this.transition = DFA226_transition;
		}

		public override string Description { get { return "385:48: ( ( LT !)* propertyNameAndValue )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}


	#endregion DFA

	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _65_in_statementEnd158 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LT_in_statementEnd166 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Comment_in_statementEnd174 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LineComment_in_statementEnd182 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _EOF_in_statementEnd190 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LT_in_program216 = new BitSet(new ulong[]{0xCC8081C81522000UL,0x8FFE73490002UL});
		public static readonly BitSet _sourceElements_in_program220 = new BitSet(new ulong[]{0x100000UL});
		public static readonly BitSet _LT_in_program222 = new BitSet(new ulong[]{0x100000UL});
		public static readonly BitSet _EOF_in_program226 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _sourceElement_in_sourceElements248 = new BitSet(new ulong[]{0xCC8081C81522002UL,0x8FFE73490002UL});
		public static readonly BitSet _LT_in_sourceElements251 = new BitSet(new ulong[]{0xCC8081C81522000UL,0x8FFE73490002UL});
		public static readonly BitSet _sourceElement_in_sourceElements255 = new BitSet(new ulong[]{0xCC8081C81522002UL,0x8FFE73490002UL});
		public static readonly BitSet _functionDeclaration_in_sourceElement278 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _statement_in_sourceElement286 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _93_in_functionDeclaration308 = new BitSet(new ulong[]{0x120000UL});
		public static readonly BitSet _LT_in_functionDeclaration310 = new BitSet(new ulong[]{0x120000UL});
		public static readonly BitSet _Identifier_in_functionDeclaration314 = new BitSet(new ulong[]{0x8000000100000UL});
		public static readonly BitSet _LT_in_functionDeclaration316 = new BitSet(new ulong[]{0x8000000100000UL});
		public static readonly BitSet _formalParameterList_in_functionDeclaration320 = new BitSet(new ulong[]{0x100000UL,0x80000000000UL});
		public static readonly BitSet _LT_in_functionDeclaration322 = new BitSet(new ulong[]{0x100000UL,0x80000000000UL});
		public static readonly BitSet _functionBody_in_functionDeclaration326 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _93_in_functionExpression347 = new BitSet(new ulong[]{0x8000000120000UL});
		public static readonly BitSet _LT_in_functionExpression349 = new BitSet(new ulong[]{0x8000000120000UL});
		public static readonly BitSet _Identifier_in_functionExpression353 = new BitSet(new ulong[]{0x8000000100000UL});
		public static readonly BitSet _LT_in_functionExpression356 = new BitSet(new ulong[]{0x8000000100000UL});
		public static readonly BitSet _formalParameterList_in_functionExpression360 = new BitSet(new ulong[]{0x100000UL,0x80000000000UL});
		public static readonly BitSet _LT_in_functionExpression362 = new BitSet(new ulong[]{0x100000UL,0x80000000000UL});
		public static readonly BitSet _functionBody_in_functionExpression366 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _51_in_formalParameterList387 = new BitSet(new ulong[]{0x8120000UL});
		public static readonly BitSet _LT_in_formalParameterList390 = new BitSet(new ulong[]{0x120000UL});
		public static readonly BitSet _Identifier_in_formalParameterList394 = new BitSet(new ulong[]{0x200000008100000UL});
		public static readonly BitSet _LT_in_formalParameterList397 = new BitSet(new ulong[]{0x200000000100000UL});
		public static readonly BitSet _57_in_formalParameterList401 = new BitSet(new ulong[]{0x120000UL});
		public static readonly BitSet _LT_in_formalParameterList403 = new BitSet(new ulong[]{0x120000UL});
		public static readonly BitSet _Identifier_in_formalParameterList407 = new BitSet(new ulong[]{0x200000008100000UL});
		public static readonly BitSet _LT_in_formalParameterList413 = new BitSet(new ulong[]{0x8100000UL});
		public static readonly BitSet _RPAREN_in_formalParameterList417 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _107_in_functionBody434 = new BitSet(new ulong[]{0xCC8081C83522000UL,0x8FFE73490002UL});
		public static readonly BitSet _LT_in_functionBody436 = new BitSet(new ulong[]{0xCC8081C83522000UL,0x8FFE73490002UL});
		public static readonly BitSet _sourceElements_in_functionBody440 = new BitSet(new ulong[]{0x2100000UL});
		public static readonly BitSet _LT_in_functionBody443 = new BitSet(new ulong[]{0x2100000UL});
		public static readonly BitSet _RBRACE_in_functionBody447 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _statementBlock_in_statement465 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variableStatement_in_statement473 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _emptyStatement_in_statement481 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expressionStatement_in_statement489 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ifStatement_in_statement497 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _iterationStatement_in_statement505 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _continueStatement_in_statement513 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _breakStatement_in_statement521 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _returnStatement_in_statement529 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _withStatement_in_statement537 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _labelledStatement_in_statement545 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _switchStatement_in_statement553 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _throwStatement_in_statement561 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _tryStatement_in_statement569 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _107_in_statementBlock590 = new BitSet(new ulong[]{0xCC8081C83522000UL,0x8FFE73490002UL});
		public static readonly BitSet _LT_in_statementBlock592 = new BitSet(new ulong[]{0xCC8081C83522000UL,0x8FFE73490002UL});
		public static readonly BitSet _statementList_in_statementBlock596 = new BitSet(new ulong[]{0x2100000UL});
		public static readonly BitSet _LT_in_statementBlock599 = new BitSet(new ulong[]{0x2100000UL});
		public static readonly BitSet _RBRACE_in_statementBlock603 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _statement_in_statementList624 = new BitSet(new ulong[]{0xCC8081C81522002UL,0x8FFE73490002UL});
		public static readonly BitSet _LT_in_statementList627 = new BitSet(new ulong[]{0xCC8081C81522000UL,0x8FFE73490002UL});
		public static readonly BitSet _statement_in_statementList631 = new BitSet(new ulong[]{0xCC8081C81522002UL,0x8FFE73490002UL});
		public static readonly BitSet _103_in_variableStatement654 = new BitSet(new ulong[]{0x120000UL});
		public static readonly BitSet _LT_in_variableStatement656 = new BitSet(new ulong[]{0x120000UL});
		public static readonly BitSet _variableDeclarationList_in_variableStatement660 = new BitSet(new ulong[]{0x300020UL,0x2UL});
		public static readonly BitSet _statementEnd_in_variableStatement662 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variableDeclaration_in_variableDeclarationList683 = new BitSet(new ulong[]{0x200000000100002UL});
		public static readonly BitSet _LT_in_variableDeclarationList686 = new BitSet(new ulong[]{0x200000000100000UL});
		public static readonly BitSet _57_in_variableDeclarationList690 = new BitSet(new ulong[]{0x120000UL});
		public static readonly BitSet _LT_in_variableDeclarationList692 = new BitSet(new ulong[]{0x120000UL});
		public static readonly BitSet _variableDeclaration_in_variableDeclarationList696 = new BitSet(new ulong[]{0x200000000100002UL});
		public static readonly BitSet _variableDeclarationNoIn_in_variableDeclarationListNoIn719 = new BitSet(new ulong[]{0x200000000100002UL});
		public static readonly BitSet _LT_in_variableDeclarationListNoIn722 = new BitSet(new ulong[]{0x200000000100000UL});
		public static readonly BitSet _57_in_variableDeclarationListNoIn726 = new BitSet(new ulong[]{0x120000UL});
		public static readonly BitSet _LT_in_variableDeclarationListNoIn728 = new BitSet(new ulong[]{0x120000UL});
		public static readonly BitSet _variableDeclarationNoIn_in_variableDeclarationListNoIn732 = new BitSet(new ulong[]{0x200000000100002UL});
		public static readonly BitSet _Identifier_in_variableDeclaration755 = new BitSet(new ulong[]{0x100002UL,0x40UL});
		public static readonly BitSet _LT_in_variableDeclaration758 = new BitSet(new ulong[]{0x100000UL,0x40UL});
		public static readonly BitSet _initialiser_in_variableDeclaration762 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Identifier_in_variableDeclarationNoIn785 = new BitSet(new ulong[]{0x100002UL,0x40UL});
		public static readonly BitSet _LT_in_variableDeclarationNoIn788 = new BitSet(new ulong[]{0x100000UL,0x40UL});
		public static readonly BitSet _initialiserNoIn_in_variableDeclarationNoIn792 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _70_in_initialiser815 = new BitSet(new ulong[]{0xCC8081C81522000UL,0x894221010000UL});
		public static readonly BitSet _LT_in_initialiser817 = new BitSet(new ulong[]{0xCC8081C81522000UL,0x894221010000UL});
		public static readonly BitSet _assignmentExpression_in_initialiser821 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _70_in_initialiserNoIn842 = new BitSet(new ulong[]{0xCC8081C81522000UL,0x894221010000UL});
		public static readonly BitSet _LT_in_initialiserNoIn844 = new BitSet(new ulong[]{0xCC8081C81522000UL,0x894221010000UL});
		public static readonly BitSet _assignmentExpressionNoIn_in_initialiserNoIn848 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _65_in_emptyStatement869 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_expressionStatement890 = new BitSet(new ulong[]{0x300020UL,0x2UL});
		public static readonly BitSet _statementEnd_in_expressionStatement892 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _94_in_ifStatement913 = new BitSet(new ulong[]{0x8000000100000UL});
		public static readonly BitSet _LT_in_ifStatement915 = new BitSet(new ulong[]{0x8000000100000UL});
		public static readonly BitSet _51_in_ifStatement919 = new BitSet(new ulong[]{0xCC8081C81522000UL,0x894221010000UL});
		public static readonly BitSet _LT_in_ifStatement921 = new BitSet(new ulong[]{0xCC8081C81522000UL,0x894221010000UL});
		public static readonly BitSet _expression_in_ifStatement925 = new BitSet(new ulong[]{0x8100000UL});
		public static readonly BitSet _LT_in_ifStatement927 = new BitSet(new ulong[]{0x8100000UL});
		public static readonly BitSet _RPAREN_in_ifStatement931 = new BitSet(new ulong[]{0xCC8081C81522000UL,0x8FFE73490002UL});
		public static readonly BitSet _LT_in_ifStatement933 = new BitSet(new ulong[]{0xCC8081C81522000UL,0x8FFE73490002UL});
		public static readonly BitSet _statement_in_ifStatement937 = new BitSet(new ulong[]{0x100002UL,0x4000000UL});
		public static readonly BitSet _LT_in_ifStatement940 = new BitSet(new ulong[]{0x100000UL,0x4000000UL});
		public static readonly BitSet _90_in_ifStatement944 = new BitSet(new ulong[]{0xCC8081C81522000UL,0x8FFE73490002UL});
		public static readonly BitSet _LT_in_ifStatement946 = new BitSet(new ulong[]{0xCC8081C81522000UL,0x8FFE73490002UL});
		public static readonly BitSet _statement_in_ifStatement950 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _doWhileStatement_in_iterationStatement973 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _whileStatement_in_iterationStatement981 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _forStatement_in_iterationStatement989 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _forInStatement_in_iterationStatement997 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _89_in_doWhileStatement1018 = new BitSet(new ulong[]{0xCC8081C81522000UL,0x8FFE73490002UL});
		public static readonly BitSet _LT_in_doWhileStatement1020 = new BitSet(new ulong[]{0xCC8081C81522000UL,0x8FFE73490002UL});
		public static readonly BitSet _statement_in_doWhileStatement1024 = new BitSet(new ulong[]{0x100000UL,0x20000000000UL});
		public static readonly BitSet _LT_in_doWhileStatement1026 = new BitSet(new ulong[]{0x100000UL,0x20000000000UL});
		public static readonly BitSet _105_in_doWhileStatement1030 = new BitSet(new ulong[]{0x8000000100000UL});
		public static readonly BitSet _LT_in_doWhileStatement1032 = new BitSet(new ulong[]{0x8000000100000UL});
		public static readonly BitSet _51_in_doWhileStatement1036 = new BitSet(new ulong[]{0xCC8081C81422000UL,0x894221010000UL});
		public static readonly BitSet _expression_in_doWhileStatement1038 = new BitSet(new ulong[]{0x8000000UL});
		public static readonly BitSet _RPAREN_in_doWhileStatement1040 = new BitSet(new ulong[]{0x300020UL,0x2UL});
		public static readonly BitSet _statementEnd_in_doWhileStatement1042 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _105_in_whileStatement1063 = new BitSet(new ulong[]{0x8000000100000UL});
		public static readonly BitSet _LT_in_whileStatement1065 = new BitSet(new ulong[]{0x8000000100000UL});
		public static readonly BitSet _51_in_whileStatement1069 = new BitSet(new ulong[]{0xCC8081C81522000UL,0x894221010000UL});
		public static readonly BitSet _LT_in_whileStatement1071 = new BitSet(new ulong[]{0xCC8081C81522000UL,0x894221010000UL});
		public static readonly BitSet _expression_in_whileStatement1075 = new BitSet(new ulong[]{0x8100000UL});
		public static readonly BitSet _LT_in_whileStatement1077 = new BitSet(new ulong[]{0x8100000UL});
		public static readonly BitSet _RPAREN_in_whileStatement1081 = new BitSet(new ulong[]{0xCC8081C81522000UL,0x8FFE73490002UL});
		public static readonly BitSet _LT_in_whileStatement1083 = new BitSet(new ulong[]{0xCC8081C81522000UL,0x8FFE73490002UL});
		public static readonly BitSet _statement_in_whileStatement1087 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _92_in_forStatement1108 = new BitSet(new ulong[]{0x8000000100000UL});
		public static readonly BitSet _LT_in_forStatement1110 = new BitSet(new ulong[]{0x8000000100000UL});
		public static readonly BitSet _51_in_forStatement1114 = new BitSet(new ulong[]{0xCC8081C81522000UL,0x89C221010002UL});
		public static readonly BitSet _LT_in_forStatement1117 = new BitSet(new ulong[]{0xCC8081C81522000UL,0x89C221010000UL});
		public static readonly BitSet _forStatementInitialiserPart_in_forStatement1121 = new BitSet(new ulong[]{0x100000UL,0x2UL});
		public static readonly BitSet _LT_in_forStatement1125 = new BitSet(new ulong[]{0x100000UL,0x2UL});
		public static readonly BitSet _65_in_forStatement1129 = new BitSet(new ulong[]{0xCC8081C81522000UL,0x894221010002UL});
		public static readonly BitSet _LT_in_forStatement1132 = new BitSet(new ulong[]{0xCC8081C81522000UL,0x894221010000UL});
		public static readonly BitSet _expression_in_forStatement1136 = new BitSet(new ulong[]{0x100000UL,0x2UL});
		public static readonly BitSet _LT_in_forStatement1140 = new BitSet(new ulong[]{0x100000UL,0x2UL});
		public static readonly BitSet _65_in_forStatement1144 = new BitSet(new ulong[]{0xCC8081C89522000UL,0x894221010000UL});
		public static readonly BitSet _LT_in_forStatement1147 = new BitSet(new ulong[]{0xCC8081C81522000UL,0x894221010000UL});
		public static readonly BitSet _expression_in_forStatement1151 = new BitSet(new ulong[]{0x8100000UL});
		public static readonly BitSet _LT_in_forStatement1155 = new BitSet(new ulong[]{0x8100000UL});
		public static readonly BitSet _RPAREN_in_forStatement1159 = new BitSet(new ulong[]{0xCC8081C81522000UL,0x8FFE73490002UL});
		public static readonly BitSet _LT_in_forStatement1161 = new BitSet(new ulong[]{0xCC8081C81522000UL,0x8FFE73490002UL});
		public static readonly BitSet _statement_in_forStatement1165 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expressionNoIn_in_forStatementInitialiserPart1186 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _103_in_forStatementInitialiserPart1194 = new BitSet(new ulong[]{0x120000UL});
		public static readonly BitSet _LT_in_forStatementInitialiserPart1196 = new BitSet(new ulong[]{0x120000UL});
		public static readonly BitSet _variableDeclarationListNoIn_in_forStatementInitialiserPart1200 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _92_in_forInStatement1221 = new BitSet(new ulong[]{0x8000000100000UL});
		public static readonly BitSet _LT_in_forInStatement1223 = new BitSet(new ulong[]{0x8000000100000UL});
		public static readonly BitSet _51_in_forInStatement1227 = new BitSet(new ulong[]{0x8001C81522000UL,0x88220010000UL});
		public static readonly BitSet _LT_in_forInStatement1229 = new BitSet(new ulong[]{0x8001C81522000UL,0x88220010000UL});
		public static readonly BitSet _forInStatementInitialiserPart_in_forInStatement1233 = new BitSet(new ulong[]{0x100000UL,0x80000000UL});
		public static readonly BitSet _LT_in_forInStatement1235 = new BitSet(new ulong[]{0x100000UL,0x80000000UL});
		public static readonly BitSet _95_in_forInStatement1239 = new BitSet(new ulong[]{0xCC8081C81522000UL,0x894221010000UL});
		public static readonly BitSet _LT_in_forInStatement1241 = new BitSet(new ulong[]{0xCC8081C81522000UL,0x894221010000UL});
		public static readonly BitSet _expression_in_forInStatement1245 = new BitSet(new ulong[]{0x8100000UL});
		public static readonly BitSet _LT_in_forInStatement1247 = new BitSet(new ulong[]{0x8100000UL});
		public static readonly BitSet _RPAREN_in_forInStatement1251 = new BitSet(new ulong[]{0xCC8081C81522000UL,0x8FFE73490002UL});
		public static readonly BitSet _LT_in_forInStatement1253 = new BitSet(new ulong[]{0xCC8081C81522000UL,0x8FFE73490002UL});
		public static readonly BitSet _statement_in_forInStatement1257 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _leftHandSideExpression_in_forInStatementInitialiserPart1278 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _103_in_forInStatementInitialiserPart1286 = new BitSet(new ulong[]{0x120000UL});
		public static readonly BitSet _LT_in_forInStatementInitialiserPart1288 = new BitSet(new ulong[]{0x120000UL});
		public static readonly BitSet _variableDeclarationNoIn_in_forInStatementInitialiserPart1292 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _86_in_continueStatement1309 = new BitSet(new ulong[]{0x320020UL,0x2UL});
		public static readonly BitSet _Identifier_in_continueStatement1311 = new BitSet(new ulong[]{0x300020UL,0x2UL});
		public static readonly BitSet _statementEnd_in_continueStatement1314 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _83_in_breakStatement1331 = new BitSet(new ulong[]{0x320020UL,0x2UL});
		public static readonly BitSet _Identifier_in_breakStatement1333 = new BitSet(new ulong[]{0x300020UL,0x2UL});
		public static readonly BitSet _statementEnd_in_breakStatement1336 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _98_in_returnStatement1353 = new BitSet(new ulong[]{0xCC8081C81722020UL,0x894221010002UL});
		public static readonly BitSet _expression_in_returnStatement1355 = new BitSet(new ulong[]{0x300020UL,0x2UL});
		public static readonly BitSet _statementEnd_in_returnStatement1358 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _106_in_withStatement1379 = new BitSet(new ulong[]{0x8000000100000UL});
		public static readonly BitSet _LT_in_withStatement1381 = new BitSet(new ulong[]{0x8000000100000UL});
		public static readonly BitSet _51_in_withStatement1385 = new BitSet(new ulong[]{0xCC8081C81522000UL,0x894221010000UL});
		public static readonly BitSet _LT_in_withStatement1387 = new BitSet(new ulong[]{0xCC8081C81522000UL,0x894221010000UL});
		public static readonly BitSet _expression_in_withStatement1391 = new BitSet(new ulong[]{0x8100000UL});
		public static readonly BitSet _LT_in_withStatement1393 = new BitSet(new ulong[]{0x8100000UL});
		public static readonly BitSet _RPAREN_in_withStatement1397 = new BitSet(new ulong[]{0xCC8081C81522000UL,0x8FFE73490002UL});
		public static readonly BitSet _LT_in_withStatement1399 = new BitSet(new ulong[]{0xCC8081C81522000UL,0x8FFE73490002UL});
		public static readonly BitSet _statement_in_withStatement1403 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Identifier_in_labelledStatement1420 = new BitSet(new ulong[]{0x100000UL,0x1UL});
		public static readonly BitSet _LT_in_labelledStatement1422 = new BitSet(new ulong[]{0x100000UL,0x1UL});
		public static readonly BitSet _64_in_labelledStatement1426 = new BitSet(new ulong[]{0xCC8081C81522000UL,0x8FFE73490002UL});
		public static readonly BitSet _LT_in_labelledStatement1428 = new BitSet(new ulong[]{0xCC8081C81522000UL,0x8FFE73490002UL});
		public static readonly BitSet _statement_in_labelledStatement1432 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _99_in_switchStatement1453 = new BitSet(new ulong[]{0x8000000100000UL});
		public static readonly BitSet _LT_in_switchStatement1455 = new BitSet(new ulong[]{0x8000000100000UL});
		public static readonly BitSet _51_in_switchStatement1459 = new BitSet(new ulong[]{0xCC8081C81522000UL,0x894221010000UL});
		public static readonly BitSet _LT_in_switchStatement1461 = new BitSet(new ulong[]{0xCC8081C81522000UL,0x894221010000UL});
		public static readonly BitSet _expression_in_switchStatement1465 = new BitSet(new ulong[]{0x8100000UL});
		public static readonly BitSet _LT_in_switchStatement1467 = new BitSet(new ulong[]{0x8100000UL});
		public static readonly BitSet _RPAREN_in_switchStatement1471 = new BitSet(new ulong[]{0x100000UL,0x80000000000UL});
		public static readonly BitSet _LT_in_switchStatement1473 = new BitSet(new ulong[]{0x100000UL,0x80000000000UL});
		public static readonly BitSet _caseBlock_in_switchStatement1477 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _107_in_caseBlock1498 = new BitSet(new ulong[]{0x2100000UL,0x900000UL});
		public static readonly BitSet _LT_in_caseBlock1501 = new BitSet(new ulong[]{0x100000UL,0x100000UL});
		public static readonly BitSet _caseClause_in_caseBlock1505 = new BitSet(new ulong[]{0x2100000UL,0x900000UL});
		public static readonly BitSet _LT_in_caseBlock1510 = new BitSet(new ulong[]{0x100000UL,0x800000UL});
		public static readonly BitSet _defaultClause_in_caseBlock1514 = new BitSet(new ulong[]{0x2100000UL,0x100000UL});
		public static readonly BitSet _LT_in_caseBlock1517 = new BitSet(new ulong[]{0x100000UL,0x100000UL});
		public static readonly BitSet _caseClause_in_caseBlock1521 = new BitSet(new ulong[]{0x2100000UL,0x100000UL});
		public static readonly BitSet _LT_in_caseBlock1527 = new BitSet(new ulong[]{0x2100000UL});
		public static readonly BitSet _RBRACE_in_caseBlock1531 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _84_in_caseClause1548 = new BitSet(new ulong[]{0xCC8081C81522000UL,0x894221010000UL});
		public static readonly BitSet _LT_in_caseClause1550 = new BitSet(new ulong[]{0xCC8081C81522000UL,0x894221010000UL});
		public static readonly BitSet _expression_in_caseClause1554 = new BitSet(new ulong[]{0x100000UL,0x1UL});
		public static readonly BitSet _LT_in_caseClause1556 = new BitSet(new ulong[]{0x100000UL,0x1UL});
		public static readonly BitSet _64_in_caseClause1560 = new BitSet(new ulong[]{0xCC8081C81522002UL,0x8FFE73490002UL});
		public static readonly BitSet _LT_in_caseClause1562 = new BitSet(new ulong[]{0xCC8081C81522002UL,0x8FFE73490002UL});
		public static readonly BitSet _statementList_in_caseClause1566 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _87_in_defaultClause1588 = new BitSet(new ulong[]{0x100000UL,0x1UL});
		public static readonly BitSet _LT_in_defaultClause1590 = new BitSet(new ulong[]{0x100000UL,0x1UL});
		public static readonly BitSet _64_in_defaultClause1594 = new BitSet(new ulong[]{0xCC8081C81522002UL,0x8FFE73490002UL});
		public static readonly BitSet _LT_in_defaultClause1596 = new BitSet(new ulong[]{0xCC8081C81522002UL,0x8FFE73490002UL});
		public static readonly BitSet _statementList_in_defaultClause1600 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _100_in_throwStatement1622 = new BitSet(new ulong[]{0xCC8081C81422000UL,0x894221010000UL});
		public static readonly BitSet _expression_in_throwStatement1624 = new BitSet(new ulong[]{0x300020UL,0x2UL});
		public static readonly BitSet _statementEnd_in_throwStatement1626 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _101_in_tryStatement1643 = new BitSet(new ulong[]{0x100000UL,0x80000000000UL});
		public static readonly BitSet _LT_in_tryStatement1645 = new BitSet(new ulong[]{0x100000UL,0x80000000000UL});
		public static readonly BitSet _statementBlock_in_tryStatement1649 = new BitSet(new ulong[]{0x100000UL,0x8200000UL});
		public static readonly BitSet _LT_in_tryStatement1651 = new BitSet(new ulong[]{0x100000UL,0x8200000UL});
		public static readonly BitSet _finallyClause_in_tryStatement1656 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _catchClause_in_tryStatement1660 = new BitSet(new ulong[]{0x100002UL,0x8000000UL});
		public static readonly BitSet _LT_in_tryStatement1663 = new BitSet(new ulong[]{0x100000UL,0x8000000UL});
		public static readonly BitSet _finallyClause_in_tryStatement1667 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _85_in_catchClause1694 = new BitSet(new ulong[]{0x8000000100000UL});
		public static readonly BitSet _LT_in_catchClause1696 = new BitSet(new ulong[]{0x8000000100000UL});
		public static readonly BitSet _51_in_catchClause1700 = new BitSet(new ulong[]{0x120000UL});
		public static readonly BitSet _LT_in_catchClause1702 = new BitSet(new ulong[]{0x120000UL});
		public static readonly BitSet _Identifier_in_catchClause1706 = new BitSet(new ulong[]{0x8100000UL});
		public static readonly BitSet _LT_in_catchClause1708 = new BitSet(new ulong[]{0x8100000UL});
		public static readonly BitSet _RPAREN_in_catchClause1712 = new BitSet(new ulong[]{0x100000UL,0x80000000000UL});
		public static readonly BitSet _LT_in_catchClause1714 = new BitSet(new ulong[]{0x100000UL,0x80000000000UL});
		public static readonly BitSet _statementBlock_in_catchClause1718 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _91_in_finallyClause1739 = new BitSet(new ulong[]{0x100000UL,0x80000000000UL});
		public static readonly BitSet _LT_in_finallyClause1741 = new BitSet(new ulong[]{0x100000UL,0x80000000000UL});
		public static readonly BitSet _statementBlock_in_finallyClause1745 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _assignmentExpression_in_expression1763 = new BitSet(new ulong[]{0x200000000100002UL});
		public static readonly BitSet _LT_in_expression1766 = new BitSet(new ulong[]{0x200000000100000UL});
		public static readonly BitSet _57_in_expression1770 = new BitSet(new ulong[]{0xCC8081C81522000UL,0x894221010000UL});
		public static readonly BitSet _LT_in_expression1772 = new BitSet(new ulong[]{0xCC8081C81522000UL,0x894221010000UL});
		public static readonly BitSet _assignmentExpression_in_expression1776 = new BitSet(new ulong[]{0x200000000100002UL});
		public static readonly BitSet _assignmentExpressionNoIn_in_expressionNoIn1799 = new BitSet(new ulong[]{0x200000000100002UL});
		public static readonly BitSet _LT_in_expressionNoIn1802 = new BitSet(new ulong[]{0x200000000100000UL});
		public static readonly BitSet _57_in_expressionNoIn1806 = new BitSet(new ulong[]{0xCC8081C81522000UL,0x894221010000UL});
		public static readonly BitSet _LT_in_expressionNoIn1808 = new BitSet(new ulong[]{0xCC8081C81522000UL,0x894221010000UL});
		public static readonly BitSet _assignmentExpressionNoIn_in_expressionNoIn1812 = new BitSet(new ulong[]{0x200000000100002UL});
		public static readonly BitSet _conditionalExpression_in_assignmentExpression1835 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _leftHandSideExpression_in_assignmentExpression1843 = new BitSet(new ulong[]{0x9124800000100000UL,0x200000045050UL});
		public static readonly BitSet _LT_in_assignmentExpression1845 = new BitSet(new ulong[]{0x9124800000100000UL,0x200000045050UL});
		public static readonly BitSet _assignmentOperator_in_assignmentExpression1849 = new BitSet(new ulong[]{0xCC8081C81522000UL,0x894221010000UL});
		public static readonly BitSet _LT_in_assignmentExpression1851 = new BitSet(new ulong[]{0xCC8081C81522000UL,0x894221010000UL});
		public static readonly BitSet _assignmentExpression_in_assignmentExpression1855 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _conditionalExpressionNoIn_in_assignmentExpressionNoIn1876 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _leftHandSideExpression_in_assignmentExpressionNoIn1884 = new BitSet(new ulong[]{0x9124800000100000UL,0x200000045050UL});
		public static readonly BitSet _LT_in_assignmentExpressionNoIn1886 = new BitSet(new ulong[]{0x9124800000100000UL,0x200000045050UL});
		public static readonly BitSet _assignmentOperator_in_assignmentExpressionNoIn1890 = new BitSet(new ulong[]{0xCC8081C81522000UL,0x894221010000UL});
		public static readonly BitSet _LT_in_assignmentExpressionNoIn1892 = new BitSet(new ulong[]{0xCC8081C81522000UL,0x894221010000UL});
		public static readonly BitSet _assignmentExpressionNoIn_in_assignmentExpressionNoIn1896 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _callExpression_in_leftHandSideExpression1917 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _newExpression_in_leftHandSideExpression1925 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _memberExpression_in_newExpression1946 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _97_in_newExpression1954 = new BitSet(new ulong[]{0x8001C81522000UL,0x80220010000UL});
		public static readonly BitSet _LT_in_newExpression1956 = new BitSet(new ulong[]{0x8001C81522000UL,0x80220010000UL});
		public static readonly BitSet _newExpression_in_newExpression1960 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _primaryExpression_in_memberExpression1982 = new BitSet(new ulong[]{0x2000000000100002UL,0x10000UL});
		public static readonly BitSet _functionExpression_in_memberExpression1986 = new BitSet(new ulong[]{0x2000000000100002UL,0x10000UL});
		public static readonly BitSet _97_in_memberExpression1990 = new BitSet(new ulong[]{0x8001C81522000UL,0x80220010000UL});
		public static readonly BitSet _LT_in_memberExpression1992 = new BitSet(new ulong[]{0x8001C81522000UL,0x80220010000UL});
		public static readonly BitSet _memberExpression_in_memberExpression1996 = new BitSet(new ulong[]{0x8000000100000UL});
		public static readonly BitSet _LT_in_memberExpression1998 = new BitSet(new ulong[]{0x8000000100000UL});
		public static readonly BitSet _arguments_in_memberExpression2002 = new BitSet(new ulong[]{0x2000000000100002UL,0x10000UL});
		public static readonly BitSet _LT_in_memberExpression2006 = new BitSet(new ulong[]{0x2000000000100000UL,0x10000UL});
		public static readonly BitSet _memberExpressionSuffix_in_memberExpression2010 = new BitSet(new ulong[]{0x2000000000100002UL,0x10000UL});
		public static readonly BitSet _indexSuffix_in_memberExpressionSuffix2033 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _propertyReferenceSuffix_in_memberExpressionSuffix2041 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _memberExpression_in_callExpression2058 = new BitSet(new ulong[]{0x8000000100000UL});
		public static readonly BitSet _LT_in_callExpression2060 = new BitSet(new ulong[]{0x8000000100000UL});
		public static readonly BitSet _arguments_in_callExpression2064 = new BitSet(new ulong[]{0x2008000000100002UL,0x10000UL});
		public static readonly BitSet _LT_in_callExpression2067 = new BitSet(new ulong[]{0x2008000000100000UL,0x10000UL});
		public static readonly BitSet _callExpressionSuffix_in_callExpression2071 = new BitSet(new ulong[]{0x2008000000100002UL,0x10000UL});
		public static readonly BitSet _arguments_in_callExpressionSuffix2094 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _indexSuffix_in_callExpressionSuffix2102 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _propertyReferenceSuffix_in_callExpressionSuffix2110 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _51_in_arguments2127 = new BitSet(new ulong[]{0xCC8081C89522000UL,0x894221010000UL});
		public static readonly BitSet _LT_in_arguments2130 = new BitSet(new ulong[]{0xCC8081C81522000UL,0x894221010000UL});
		public static readonly BitSet _assignmentExpression_in_arguments2134 = new BitSet(new ulong[]{0x200000008100000UL});
		public static readonly BitSet _LT_in_arguments2137 = new BitSet(new ulong[]{0x200000000100000UL});
		public static readonly BitSet _57_in_arguments2141 = new BitSet(new ulong[]{0xCC8081C81522000UL,0x894221010000UL});
		public static readonly BitSet _LT_in_arguments2143 = new BitSet(new ulong[]{0xCC8081C81522000UL,0x894221010000UL});
		public static readonly BitSet _assignmentExpression_in_arguments2147 = new BitSet(new ulong[]{0x200000008100000UL});
		public static readonly BitSet _LT_in_arguments2153 = new BitSet(new ulong[]{0x8100000UL});
		public static readonly BitSet _RPAREN_in_arguments2157 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _80_in_indexSuffix2178 = new BitSet(new ulong[]{0xCC8081C81522000UL,0x894221010000UL});
		public static readonly BitSet _LT_in_indexSuffix2180 = new BitSet(new ulong[]{0xCC8081C81522000UL,0x894221010000UL});
		public static readonly BitSet _expression_in_indexSuffix2184 = new BitSet(new ulong[]{0x4100000UL});
		public static readonly BitSet _LT_in_indexSuffix2186 = new BitSet(new ulong[]{0x4100000UL});
		public static readonly BitSet _RBRACK_in_indexSuffix2190 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _61_in_propertyReferenceSuffix2212 = new BitSet(new ulong[]{0x120000UL});
		public static readonly BitSet _LT_in_propertyReferenceSuffix2214 = new BitSet(new ulong[]{0x120000UL});
		public static readonly BitSet _Identifier_in_propertyReferenceSuffix2218 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _logicalORExpression_in_conditionalExpression2300 = new BitSet(new ulong[]{0x100002UL,0x8000UL});
		public static readonly BitSet _LT_in_conditionalExpression2303 = new BitSet(new ulong[]{0x100000UL,0x8000UL});
		public static readonly BitSet _79_in_conditionalExpression2307 = new BitSet(new ulong[]{0xCC8081C81522000UL,0x894221010000UL});
		public static readonly BitSet _LT_in_conditionalExpression2309 = new BitSet(new ulong[]{0xCC8081C81522000UL,0x894221010000UL});
		public static readonly BitSet _assignmentExpression_in_conditionalExpression2313 = new BitSet(new ulong[]{0x100000UL,0x1UL});
		public static readonly BitSet _LT_in_conditionalExpression2315 = new BitSet(new ulong[]{0x100000UL,0x1UL});
		public static readonly BitSet _64_in_conditionalExpression2319 = new BitSet(new ulong[]{0xCC8081C81522000UL,0x894221010000UL});
		public static readonly BitSet _LT_in_conditionalExpression2321 = new BitSet(new ulong[]{0xCC8081C81522000UL,0x894221010000UL});
		public static readonly BitSet _assignmentExpression_in_conditionalExpression2325 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _logicalORExpressionNoIn_in_conditionalExpressionNoIn2344 = new BitSet(new ulong[]{0x100002UL,0x8000UL});
		public static readonly BitSet _LT_in_conditionalExpressionNoIn2347 = new BitSet(new ulong[]{0x100000UL,0x8000UL});
		public static readonly BitSet _79_in_conditionalExpressionNoIn2351 = new BitSet(new ulong[]{0xCC8081C81522000UL,0x894221010000UL});
		public static readonly BitSet _LT_in_conditionalExpressionNoIn2353 = new BitSet(new ulong[]{0xCC8081C81522000UL,0x894221010000UL});
		public static readonly BitSet _assignmentExpressionNoIn_in_conditionalExpressionNoIn2357 = new BitSet(new ulong[]{0x100000UL,0x1UL});
		public static readonly BitSet _LT_in_conditionalExpressionNoIn2359 = new BitSet(new ulong[]{0x100000UL,0x1UL});
		public static readonly BitSet _64_in_conditionalExpressionNoIn2363 = new BitSet(new ulong[]{0xCC8081C81522000UL,0x894221010000UL});
		public static readonly BitSet _LT_in_conditionalExpressionNoIn2365 = new BitSet(new ulong[]{0xCC8081C81522000UL,0x894221010000UL});
		public static readonly BitSet _assignmentExpressionNoIn_in_conditionalExpressionNoIn2369 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _logicalANDExpression_in_logicalORExpression2388 = new BitSet(new ulong[]{0x100002UL,0x400000000000UL});
		public static readonly BitSet _LT_in_logicalORExpression2391 = new BitSet(new ulong[]{0x100000UL,0x400000000000UL});
		public static readonly BitSet _110_in_logicalORExpression2395 = new BitSet(new ulong[]{0xCC8081C81522000UL,0x894221010000UL});
		public static readonly BitSet _LT_in_logicalORExpression2397 = new BitSet(new ulong[]{0xCC8081C81522000UL,0x894221010000UL});
		public static readonly BitSet _logicalANDExpression_in_logicalORExpression2401 = new BitSet(new ulong[]{0x100002UL,0x400000000000UL});
		public static readonly BitSet _logicalANDExpressionNoIn_in_logicalORExpressionNoIn2424 = new BitSet(new ulong[]{0x100002UL,0x400000000000UL});
		public static readonly BitSet _LT_in_logicalORExpressionNoIn2427 = new BitSet(new ulong[]{0x100000UL,0x400000000000UL});
		public static readonly BitSet _110_in_logicalORExpressionNoIn2431 = new BitSet(new ulong[]{0xCC8081C81522000UL,0x894221010000UL});
		public static readonly BitSet _LT_in_logicalORExpressionNoIn2433 = new BitSet(new ulong[]{0xCC8081C81522000UL,0x894221010000UL});
		public static readonly BitSet _logicalANDExpressionNoIn_in_logicalORExpressionNoIn2437 = new BitSet(new ulong[]{0x100002UL,0x400000000000UL});
		public static readonly BitSet _bitwiseORExpression_in_logicalANDExpression2460 = new BitSet(new ulong[]{0x1000000100002UL});
		public static readonly BitSet _LT_in_logicalANDExpression2463 = new BitSet(new ulong[]{0x1000000100000UL});
		public static readonly BitSet _48_in_logicalANDExpression2467 = new BitSet(new ulong[]{0xCC8081C81522000UL,0x894221010000UL});
		public static readonly BitSet _LT_in_logicalANDExpression2469 = new BitSet(new ulong[]{0xCC8081C81522000UL,0x894221010000UL});
		public static readonly BitSet _bitwiseORExpression_in_logicalANDExpression2473 = new BitSet(new ulong[]{0x1000000100002UL});
		public static readonly BitSet _bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn2496 = new BitSet(new ulong[]{0x1000000100002UL});
		public static readonly BitSet _LT_in_logicalANDExpressionNoIn2499 = new BitSet(new ulong[]{0x1000000100000UL});
		public static readonly BitSet _48_in_logicalANDExpressionNoIn2503 = new BitSet(new ulong[]{0xCC8081C81522000UL,0x894221010000UL});
		public static readonly BitSet _LT_in_logicalANDExpressionNoIn2505 = new BitSet(new ulong[]{0xCC8081C81522000UL,0x894221010000UL});
		public static readonly BitSet _bitwiseORExpressionNoIn_in_logicalANDExpressionNoIn2509 = new BitSet(new ulong[]{0x1000000100002UL});
		public static readonly BitSet _bitwiseXORExpression_in_bitwiseORExpression2532 = new BitSet(new ulong[]{0x100002UL,0x100000000000UL});
		public static readonly BitSet _LT_in_bitwiseORExpression2535 = new BitSet(new ulong[]{0x100000UL,0x100000000000UL});
		public static readonly BitSet _108_in_bitwiseORExpression2539 = new BitSet(new ulong[]{0xCC8081C81522000UL,0x894221010000UL});
		public static readonly BitSet _LT_in_bitwiseORExpression2541 = new BitSet(new ulong[]{0xCC8081C81522000UL,0x894221010000UL});
		public static readonly BitSet _bitwiseXORExpression_in_bitwiseORExpression2545 = new BitSet(new ulong[]{0x100002UL,0x100000000000UL});
		public static readonly BitSet _bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn2568 = new BitSet(new ulong[]{0x100002UL,0x100000000000UL});
		public static readonly BitSet _LT_in_bitwiseORExpressionNoIn2571 = new BitSet(new ulong[]{0x100000UL,0x100000000000UL});
		public static readonly BitSet _108_in_bitwiseORExpressionNoIn2575 = new BitSet(new ulong[]{0xCC8081C81522000UL,0x894221010000UL});
		public static readonly BitSet _LT_in_bitwiseORExpressionNoIn2577 = new BitSet(new ulong[]{0xCC8081C81522000UL,0x894221010000UL});
		public static readonly BitSet _bitwiseXORExpressionNoIn_in_bitwiseORExpressionNoIn2581 = new BitSet(new ulong[]{0x100002UL,0x100000000000UL});
		public static readonly BitSet _bitwiseANDExpression_in_bitwiseXORExpression2604 = new BitSet(new ulong[]{0x100002UL,0x20000UL});
		public static readonly BitSet _LT_in_bitwiseXORExpression2607 = new BitSet(new ulong[]{0x100000UL,0x20000UL});
		public static readonly BitSet _81_in_bitwiseXORExpression2611 = new BitSet(new ulong[]{0xCC8081C81522000UL,0x894221010000UL});
		public static readonly BitSet _LT_in_bitwiseXORExpression2613 = new BitSet(new ulong[]{0xCC8081C81522000UL,0x894221010000UL});
		public static readonly BitSet _bitwiseANDExpression_in_bitwiseXORExpression2617 = new BitSet(new ulong[]{0x100002UL,0x20000UL});
		public static readonly BitSet _bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn2640 = new BitSet(new ulong[]{0x100002UL,0x20000UL});
		public static readonly BitSet _LT_in_bitwiseXORExpressionNoIn2643 = new BitSet(new ulong[]{0x100000UL,0x20000UL});
		public static readonly BitSet _81_in_bitwiseXORExpressionNoIn2647 = new BitSet(new ulong[]{0xCC8081C81522000UL,0x894221010000UL});
		public static readonly BitSet _LT_in_bitwiseXORExpressionNoIn2649 = new BitSet(new ulong[]{0xCC8081C81522000UL,0x894221010000UL});
		public static readonly BitSet _bitwiseANDExpressionNoIn_in_bitwiseXORExpressionNoIn2653 = new BitSet(new ulong[]{0x100002UL,0x20000UL});
		public static readonly BitSet _equalityExpression_in_bitwiseANDExpression2676 = new BitSet(new ulong[]{0x2000000100002UL});
		public static readonly BitSet _LT_in_bitwiseANDExpression2679 = new BitSet(new ulong[]{0x2000000100000UL});
		public static readonly BitSet _49_in_bitwiseANDExpression2683 = new BitSet(new ulong[]{0xCC8081C81522000UL,0x894221010000UL});
		public static readonly BitSet _LT_in_bitwiseANDExpression2685 = new BitSet(new ulong[]{0xCC8081C81522000UL,0x894221010000UL});
		public static readonly BitSet _equalityExpression_in_bitwiseANDExpression2689 = new BitSet(new ulong[]{0x2000000100002UL});
		public static readonly BitSet _equalityExpressionNoIn_in_bitwiseANDExpressionNoIn2712 = new BitSet(new ulong[]{0x2000000100002UL});
		public static readonly BitSet _LT_in_bitwiseANDExpressionNoIn2715 = new BitSet(new ulong[]{0x2000000100000UL});
		public static readonly BitSet _49_in_bitwiseANDExpressionNoIn2719 = new BitSet(new ulong[]{0xCC8081C81522000UL,0x894221010000UL});
		public static readonly BitSet _LT_in_bitwiseANDExpressionNoIn2721 = new BitSet(new ulong[]{0xCC8081C81522000UL,0x894221010000UL});
		public static readonly BitSet _equalityExpressionNoIn_in_bitwiseANDExpressionNoIn2725 = new BitSet(new ulong[]{0x2000000100002UL});
		public static readonly BitSet _relationalExpression_in_equalityExpression2748 = new BitSet(new ulong[]{0x300000100002UL,0x180UL});
		public static readonly BitSet _LT_in_equalityExpression2751 = new BitSet(new ulong[]{0x300000100000UL,0x180UL});
		public static readonly BitSet _set_in_equalityExpression2755 = new BitSet(new ulong[]{0xCC8081C81522000UL,0x894221010000UL});
		public static readonly BitSet _LT_in_equalityExpression2771 = new BitSet(new ulong[]{0xCC8081C81522000UL,0x894221010000UL});
		public static readonly BitSet _relationalExpression_in_equalityExpression2775 = new BitSet(new ulong[]{0x300000100002UL,0x180UL});
		public static readonly BitSet _relationalExpressionNoIn_in_equalityExpressionNoIn2794 = new BitSet(new ulong[]{0x300000100002UL,0x180UL});
		public static readonly BitSet _LT_in_equalityExpressionNoIn2797 = new BitSet(new ulong[]{0x300000100000UL,0x180UL});
		public static readonly BitSet _set_in_equalityExpressionNoIn2801 = new BitSet(new ulong[]{0xCC8081C81522000UL,0x894221010000UL});
		public static readonly BitSet _LT_in_equalityExpressionNoIn2817 = new BitSet(new ulong[]{0xCC8081C81522000UL,0x894221010000UL});
		public static readonly BitSet _relationalExpressionNoIn_in_equalityExpressionNoIn2821 = new BitSet(new ulong[]{0x300000100002UL,0x180UL});
		public static readonly BitSet _shiftExpression_in_relationalExpression2844 = new BitSet(new ulong[]{0x100002UL,0x180000624UL});
		public static readonly BitSet _LT_in_relationalExpression2847 = new BitSet(new ulong[]{0x100000UL,0x180000624UL});
		public static readonly BitSet _set_in_relationalExpression2851 = new BitSet(new ulong[]{0xCC8081C81522000UL,0x894221010000UL});
		public static readonly BitSet _LT_in_relationalExpression2875 = new BitSet(new ulong[]{0xCC8081C81522000UL,0x894221010000UL});
		public static readonly BitSet _shiftExpression_in_relationalExpression2879 = new BitSet(new ulong[]{0x100002UL,0x180000624UL});
		public static readonly BitSet _shiftExpression_in_relationalExpressionNoIn2898 = new BitSet(new ulong[]{0x100002UL,0x100000624UL});
		public static readonly BitSet _LT_in_relationalExpressionNoIn2901 = new BitSet(new ulong[]{0x100000UL,0x100000624UL});
		public static readonly BitSet _set_in_relationalExpressionNoIn2905 = new BitSet(new ulong[]{0xCC8081C81522000UL,0x894221010000UL});
		public static readonly BitSet _LT_in_relationalExpressionNoIn2925 = new BitSet(new ulong[]{0xCC8081C81522000UL,0x894221010000UL});
		public static readonly BitSet _shiftExpression_in_relationalExpressionNoIn2929 = new BitSet(new ulong[]{0x100002UL,0x100000624UL});
		public static readonly BitSet _additiveExpression_in_shiftExpression2948 = new BitSet(new ulong[]{0x100002UL,0x2808UL});
		public static readonly BitSet _LT_in_shiftExpression2951 = new BitSet(new ulong[]{0x100000UL,0x2808UL});
		public static readonly BitSet _set_in_shiftExpression2955 = new BitSet(new ulong[]{0xCC8081C81522000UL,0x894221010000UL});
		public static readonly BitSet _LT_in_shiftExpression2967 = new BitSet(new ulong[]{0xCC8081C81522000UL,0x894221010000UL});
		public static readonly BitSet _additiveExpression_in_shiftExpression2971 = new BitSet(new ulong[]{0x100002UL,0x2808UL});
		public static readonly BitSet _multiplicativeExpression_in_additiveExpression2990 = new BitSet(new ulong[]{0x440000000100002UL});
		public static readonly BitSet _LT_in_additiveExpression2993 = new BitSet(new ulong[]{0x440000000100000UL});
		public static readonly BitSet _set_in_additiveExpression2997 = new BitSet(new ulong[]{0xCC8081C81522000UL,0x894221010000UL});
		public static readonly BitSet _LT_in_additiveExpression3005 = new BitSet(new ulong[]{0xCC8081C81522000UL,0x894221010000UL});
		public static readonly BitSet _multiplicativeExpression_in_additiveExpression3009 = new BitSet(new ulong[]{0x440000000100002UL});
		public static readonly BitSet _unaryExpression_in_multiplicativeExpression3028 = new BitSet(new ulong[]{0x4010400000100002UL});
		public static readonly BitSet _LT_in_multiplicativeExpression3031 = new BitSet(new ulong[]{0x4010400000100000UL});
		public static readonly BitSet _set_in_multiplicativeExpression3035 = new BitSet(new ulong[]{0xCC8081C81522000UL,0x894221010000UL});
		public static readonly BitSet _LT_in_multiplicativeExpression3047 = new BitSet(new ulong[]{0xCC8081C81522000UL,0x894221010000UL});
		public static readonly BitSet _unaryExpression_in_multiplicativeExpression3051 = new BitSet(new ulong[]{0x4010400000100002UL});
		public static readonly BitSet _postfixExpression_in_unaryExpression3070 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_in_unaryExpression3078 = new BitSet(new ulong[]{0xCC8081C81422000UL,0x894221010000UL});
		public static readonly BitSet _unaryExpression_in_unaryExpression3114 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _leftHandSideExpression_in_postfixExpression3135 = new BitSet(new ulong[]{0x880000000000002UL});
		public static readonly BitSet _THIS_in_primaryExpression3161 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Identifier_in_primaryExpression3169 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _literal_in_primaryExpression3177 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _arrayLiteral_in_primaryExpression3185 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _objectLiteral_in_primaryExpression3193 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _51_in_primaryExpression3201 = new BitSet(new ulong[]{0xCC8081C81522000UL,0x894221010000UL});
		public static readonly BitSet _LT_in_primaryExpression3203 = new BitSet(new ulong[]{0xCC8081C81522000UL,0x894221010000UL});
		public static readonly BitSet _expression_in_primaryExpression3207 = new BitSet(new ulong[]{0x8100000UL});
		public static readonly BitSet _LT_in_primaryExpression3209 = new BitSet(new ulong[]{0x8100000UL});
		public static readonly BitSet _RPAREN_in_primaryExpression3213 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _80_in_arrayLiteral3235 = new BitSet(new ulong[]{0xEC8081C85522000UL,0x894221010000UL});
		public static readonly BitSet _LT_in_arrayLiteral3237 = new BitSet(new ulong[]{0xEC8081C85522000UL,0x894221010000UL});
		public static readonly BitSet _assignmentExpression_in_arrayLiteral3241 = new BitSet(new ulong[]{0x200000004100000UL});
		public static readonly BitSet _LT_in_arrayLiteral3245 = new BitSet(new ulong[]{0x200000000100000UL});
		public static readonly BitSet _57_in_arrayLiteral3249 = new BitSet(new ulong[]{0xEC8081C85522000UL,0x894221010000UL});
		public static readonly BitSet _LT_in_arrayLiteral3252 = new BitSet(new ulong[]{0xCC8081C81522000UL,0x894221010000UL});
		public static readonly BitSet _assignmentExpression_in_arrayLiteral3256 = new BitSet(new ulong[]{0x200000004100000UL});
		public static readonly BitSet _LT_in_arrayLiteral3262 = new BitSet(new ulong[]{0x4100000UL});
		public static readonly BitSet _RBRACK_in_arrayLiteral3266 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _107_in_objectLiteral3291 = new BitSet(new ulong[]{0x200000403120000UL});
		public static readonly BitSet _LT_in_objectLiteral3293 = new BitSet(new ulong[]{0x200000403120000UL});
		public static readonly BitSet _propertyNameAndValue_in_objectLiteral3297 = new BitSet(new ulong[]{0x200000002100000UL});
		public static readonly BitSet _LT_in_objectLiteral3301 = new BitSet(new ulong[]{0x200000000100000UL});
		public static readonly BitSet _57_in_objectLiteral3305 = new BitSet(new ulong[]{0x200000403120000UL});
		public static readonly BitSet _LT_in_objectLiteral3308 = new BitSet(new ulong[]{0x401120000UL});
		public static readonly BitSet _propertyNameAndValue_in_objectLiteral3312 = new BitSet(new ulong[]{0x200000002100000UL});
		public static readonly BitSet _LT_in_objectLiteral3318 = new BitSet(new ulong[]{0x2100000UL});
		public static readonly BitSet _RBRACE_in_objectLiteral3322 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _propertyName_in_propertyNameAndValue3343 = new BitSet(new ulong[]{0x100000UL,0x1UL});
		public static readonly BitSet _LT_in_propertyNameAndValue3345 = new BitSet(new ulong[]{0x100000UL,0x1UL});
		public static readonly BitSet _64_in_propertyNameAndValue3349 = new BitSet(new ulong[]{0xCC8081C81522000UL,0x894221010000UL});
		public static readonly BitSet _LT_in_propertyNameAndValue3351 = new BitSet(new ulong[]{0xCC8081C81522000UL,0x894221010000UL});
		public static readonly BitSet _assignmentExpression_in_propertyNameAndValue3355 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Identifier_in_propertyName3372 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stringliteral_in_propertyName3380 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _numericliteral_in_propertyName3388 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NULL_in_literal3406 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TRUE_in_literal3414 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FALSE_in_literal3422 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stringliteral_in_literal3430 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _numericliteral_in_literal3438 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _regularExpressionLiteral_in_literal3446 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NumericLiteral_in_numericliteral3463 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _StringLiteral_in_stringliteral3484 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _RegularExpressionLiteral_in_regularExpressionLiteral3501 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _65_in_synpred1_JavaScript158 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LT_in_synpred2_JavaScript166 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _functionDeclaration_in_synpred10_JavaScript278 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LT_in_synpred14_JavaScript349 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LT_in_synpred24_JavaScript436 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _statementBlock_in_synpred27_JavaScript465 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expressionStatement_in_synpred30_JavaScript489 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _labelledStatement_in_synpred37_JavaScript545 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LT_in_synpred40_JavaScript592 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LT_in_synpred64_JavaScript940 = new BitSet(new ulong[]{0x100000UL,0x4000000UL});
		public static readonly BitSet _90_in_synpred64_JavaScript944 = new BitSet(new ulong[]{0xCC8081C81522000UL,0x8FFE73490002UL});
		public static readonly BitSet _LT_in_synpred64_JavaScript946 = new BitSet(new ulong[]{0xCC8081C81522000UL,0x8FFE73490002UL});
		public static readonly BitSet _statement_in_synpred64_JavaScript950 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _forStatement_in_synpred67_JavaScript989 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Identifier_in_synpred96_JavaScript1311 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Identifier_in_synpred97_JavaScript1333 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_synpred98_JavaScript1355 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LT_in_synpred118_JavaScript1562 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LT_in_synpred121_JavaScript1596 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _conditionalExpression_in_synpred139_JavaScript1835 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _conditionalExpressionNoIn_in_synpred142_JavaScript1876 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _callExpression_in_synpred145_JavaScript1917 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _memberExpression_in_synpred146_JavaScript1946 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LT_in_synpred153_JavaScript2006 = new BitSet(new ulong[]{0x2000000000100000UL,0x10000UL});
		public static readonly BitSet _memberExpressionSuffix_in_synpred153_JavaScript2010 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LT_in_synpred157_JavaScript2067 = new BitSet(new ulong[]{0x2008000000100000UL,0x10000UL});
		public static readonly BitSet _callExpressionSuffix_in_synpred157_JavaScript2071 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LT_in_synpred255_JavaScript2993 = new BitSet(new ulong[]{0x440000000100000UL});
		public static readonly BitSet _set_in_synpred255_JavaScript2997 = new BitSet(new ulong[]{0xCC8081C81522000UL,0x894221010000UL});
		public static readonly BitSet _LT_in_synpred255_JavaScript3005 = new BitSet(new ulong[]{0xCC8081C81522000UL,0x894221010000UL});
		public static readonly BitSet _multiplicativeExpression_in_synpred255_JavaScript3009 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LT_in_synpred279_JavaScript3237 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LT_in_synpred286_JavaScript3293 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}
